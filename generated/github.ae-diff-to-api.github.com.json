{
  "openapi": "3.0.3",
  "info": {
    "version": "0.0.0-development",
    "title": "GitHub's official OpenAPI spec + Octokit extension",
    "description": "OpenAPI specs from https://github.com/github/rest-api-description with the 'x-octokit' extension required by the Octokit SDKs",
    "license": {
      "name": "MIT",
      "url": "https://spdx.org/licenses/MIT"
    },
    "termsOfService": "https://docs.github.com/articles/github-terms-of-service",
    "contact": {
      "name": "Support",
      "url": "https://github.com/octokit/openapi"
    },
    "x-github-plan": "github.ae"
  },
  "tags": [
    {
      "name": "actions",
      "description": "Endpoints to manage GitHub Actions using the REST API."
    },
    {
      "name": "activity",
      "description": "Activity APIs provide access to notifications, subscriptions, and timelines."
    },
    {
      "name": "apps",
      "description": "Information for integrations and installations."
    },
    {
      "name": "billing",
      "description": "Monitor charges and usage from Actions and Packages."
    },
    {
      "name": "checks",
      "description": "Rich interactions with checks run by your integrations."
    },
    {
      "name": "code-scanning",
      "description": "Retrieve code scanning alerts from a repository."
    },
    {
      "name": "codes-of-conduct",
      "description": "Insight into codes of conduct for your communities."
    },
    {
      "name": "codespaces",
      "description": "Endpoints to manage Codespaces using the REST API."
    },
    {
      "name": "emojis",
      "description": "List emojis available to use on GitHub."
    },
    {
      "name": "dependabot",
      "description": "Endpoints to manage Dependabot."
    },
    {
      "name": "dependency-graph",
      "description": "Endpoints to access Dependency Graph features."
    },
    {
      "name": "gists",
      "description": "View, modify your gists."
    },
    {
      "name": "git",
      "description": "Raw Git functionality."
    },
    {
      "name": "gitignore",
      "description": "View gitignore templates"
    },
    {
      "name": "interactions",
      "description": "Owner or admin management of users interactions."
    },
    {
      "name": "issues",
      "description": "Interact with GitHub Issues."
    },
    {
      "name": "licenses",
      "description": "View various OSS licenses."
    },
    {
      "name": "markdown",
      "description": "Render GitHub flavored markdown"
    },
    {
      "name": "merge-queue",
      "description": "Interact with GitHub Merge Queues."
    },
    {
      "name": "meta",
      "description": "Endpoints that give information about the API."
    },
    {
      "name": "migrations",
      "description": "Move projects to or from GitHub."
    },
    {
      "name": "oidc",
      "description": "Endpoints to manage GitHub OIDC configuration using the REST API."
    },
    {
      "name": "orgs",
      "description": "Interact with GitHub Orgs."
    },
    {
      "name": "packages",
      "description": "Manage packages for authenticated users and organizations."
    },
    {
      "name": "projects",
      "description": "Interact with GitHub Projects."
    },
    {
      "name": "pulls",
      "description": "Interact with GitHub Pull Requests."
    },
    {
      "name": "rate-limit",
      "description": "Check your current rate limit status"
    },
    {
      "name": "reactions",
      "description": "Interact with reactions to various GitHub entities."
    },
    {
      "name": "repos",
      "description": "Interact with GitHub Repos."
    },
    {
      "name": "search",
      "description": "Look for stuff on GitHub."
    },
    {
      "name": "secret-scanning",
      "description": "Retrieve secret scanning alerts from a repository."
    },
    {
      "name": "security-advisories",
      "description": "Manage security advisories."
    },
    {
      "name": "teams",
      "description": "Interact with GitHub Teams."
    },
    {
      "name": "users",
      "description": "Interact with and view information about users and also current user."
    },
    {
      "name": "enterprise-admin",
      "description": "Enterprise Administration"
    }
  ],
  "servers": [
    {
      "url": "https://{hostname}/api/v3",
      "variables": {
        "hostname": {
          "description": "Self-hosted GitHub AE hostname",
          "default": "HOSTNAME"
        }
      }
    }
  ],
  "externalDocs": {
    "description": "GitHub AE Developer Docs",
    "url": "https://docs.github.com/github-ae@latest/rest/"
  },
  "paths": {
    "/admin/hooks": {
      "get": {
        "summary": "List global webhooks",
        "description": "",
        "operationId": "enterprise-admin/list-global-webhooks",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-global-webhooks"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/global-hook"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/global-hook-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "post": {
        "summary": "Create a global webhook",
        "description": "",
        "operationId": "enterprise-admin/create-global-webhook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-global-webhook"
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/global-hook"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/global-hook"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Must be passed as \"web\"."
                  },
                  "config": {
                    "type": "object",
                    "description": "Key/value pairs to provide settings for this webhook.",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The URL to which the payloads will be delivered."
                      },
                      "content_type": {
                        "type": "string",
                        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`."
                      },
                      "secret": {
                        "type": "string",
                        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/github-ae@latest/webhooks/event-payloads/#delivery-headers) header."
                      },
                      "insecure_ssl": {
                        "type": "string",
                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "events": {
                    "type": "array",
                    "description": "The [events](https://docs.github.com/github-ae@latest/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                    "default": true
                  }
                },
                "required": [
                  "name",
                  "config"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "name": "web",
                    "events": [
                      "organization",
                      "user"
                    ],
                    "config": {
                      "url": "https://example.com/webhook",
                      "content_type": "json",
                      "secret": "secret"
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/hooks/{hook_id}": {
      "get": {
        "summary": "Get a global webhook",
        "description": "",
        "operationId": "enterprise-admin/get-global-webhook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-global-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/hook-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/global-hook"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/global-hook"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a global webhook",
        "description": "Parameters that are not provided will be overwritten with the default value or removed if no default exists.",
        "operationId": "enterprise-admin/update-global-webhook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-global-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/hook-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/global-hook-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/global-hook-2"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "config": {
                    "type": "object",
                    "description": "Key/value pairs to provide settings for this webhook.",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The URL to which the payloads will be delivered."
                      },
                      "content_type": {
                        "type": "string",
                        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`."
                      },
                      "secret": {
                        "type": "string",
                        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/github-ae@latest/webhooks/event-payloads/#delivery-headers) header."
                      },
                      "insecure_ssl": {
                        "type": "string",
                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "events": {
                    "type": "array",
                    "description": "The [events](https://docs.github.com/github-ae@latest/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                    "default": true
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "events": [
                      "organization"
                    ],
                    "config": {
                      "url": "https://example.com/webhook"
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a global webhook",
        "description": "",
        "operationId": "enterprise-admin/delete-global-webhook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-global-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/hook-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/hooks/{hook_id}/pings": {
      "post": {
        "summary": "Ping a global webhook",
        "description": "This will trigger a [ping event](https://docs.github.com/github-ae@latest/webhooks/#ping-event) to be sent to the webhook.",
        "operationId": "enterprise-admin/ping-global-webhook",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#ping-a-global-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/hook-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "global-webhooks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/keys": {
      "get": {
        "summary": "List public keys",
        "description": "",
        "operationId": "enterprise-admin/list-public-keys",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-public-keys"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "accessed"
              ],
              "default": "created"
            }
          },
          {
            "name": "since",
            "description": "Only show public keys accessed after the given time.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/public-key-full"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/enterprise-public-key-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/keys/{key_ids}": {
      "delete": {
        "summary": "Delete a public key",
        "description": "",
        "operationId": "enterprise-admin/delete-public-key",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-public-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/key-ids"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/organizations": {
      "post": {
        "summary": "Create an organization",
        "description": "",
        "operationId": "enterprise-admin/create-org",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-organization"
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization-simple"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-simple"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string",
                    "description": "The organization's username."
                  },
                  "admin": {
                    "type": "string",
                    "description": "The login of the user who will manage this organization."
                  },
                  "profile_name": {
                    "type": "string",
                    "description": "The organization's display name."
                  }
                },
                "required": [
                  "login",
                  "admin"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "login": "github",
                    "profile_name": "GitHub, Inc.",
                    "admin": "monalisaoctocat"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "orgs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/organizations/{org}": {
      "patch": {
        "summary": "Update an organization name",
        "description": "",
        "operationId": "enterprise-admin/update-org-name",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-an-organization-name"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "202": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "default": {
                    "value": {
                      "message": "Job queued to rename organization. It may take a few minutes to complete.",
                      "url": "https://<hostname>/api/v3/organizations/1"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string",
                    "description": "The organization's new name."
                  }
                },
                "required": [
                  "login"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "login": "the-new-octocats"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "orgs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/pre-receive-environments": {
      "get": {
        "summary": "List pre-receive environments",
        "description": "",
        "operationId": "enterprise-admin/list-pre-receive-environments",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-pre-receive-environments"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "name"
              ],
              "default": "created"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pre-receive-environment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pre-receive-environment-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "post": {
        "summary": "Create a pre-receive environment",
        "description": "",
        "operationId": "enterprise-admin/create-pre-receive-environment",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-pre-receive-environment"
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pre-receive-environment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pre-receive-environment"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new pre-receive environment's name."
                  },
                  "image_url": {
                    "type": "string",
                    "description": "URL from which to download a tarball of this environment."
                  }
                },
                "required": [
                  "name",
                  "image_url"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "name": "DevTools Hook Env",
                    "image_url": "https://my_file_server/path/to/devtools_env.tar.gz"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/pre-receive-environments/{pre_receive_environment_id}": {
      "get": {
        "summary": "Get a pre-receive environment",
        "description": "",
        "operationId": "enterprise-admin/get-pre-receive-environment",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-pre-receive-environment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/pre-receive-environment-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pre-receive-environment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pre-receive-environment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a pre-receive environment",
        "description": "You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.",
        "operationId": "enterprise-admin/update-pre-receive-environment",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-pre-receive-environment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/pre-receive-environment-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pre-receive-environment"
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/pre-receive-environment-default-response"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Client Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "resource": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "client-errors": {
                    "value": {
                      "message": "Validation Failed",
                      "errors": [
                        {
                          "resource": "PreReceiveEnvironment",
                          "code": "custom",
                          "message": "Cannot modify or delete the default environment"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "This pre-receive environment's new name."
                  },
                  "image_url": {
                    "type": "string",
                    "description": "URL from which to download a tarball of this environment."
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "name": "DevTools Hook Env",
                    "image_url": "https://my_file_server/path/to/devtools_env.tar.gz"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a pre-receive environment",
        "description": "If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.\n\nThe possible error messages are:\n\n*   _Cannot modify or delete the default environment_\n*   _Cannot delete environment that has hooks_\n*   _Cannot delete environment when download is in progress_",
        "operationId": "enterprise-admin/delete-pre-receive-environment",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-pre-receive-environment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/pre-receive-environment-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          },
          "422": {
            "description": "Client Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "resource": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "client-errors": {
                    "value": {
                      "message": "Validation Failed",
                      "errors": [
                        {
                          "resource": "PreReceiveEnvironment",
                          "code": "custom",
                          "message": "Cannot modify or delete the default environment"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads": {
      "post": {
        "summary": "Start a pre-receive environment download",
        "description": "Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.\n\nIf a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.\n\nThe possible error messages are:\n\n* _Cannot modify or delete the default environment_\n* _Can not start a new download when a download is in progress_",
        "operationId": "enterprise-admin/start-pre-receive-environment-download",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#start-a-pre-receive-environment-download"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/pre-receive-environment-id"
          }
        ],
        "responses": {
          "202": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pre-receive-environment-download-status"
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/pre-receive-environment-download-status-default-response"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Client Errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "resource": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "client-errors": {
                    "value": {
                      "message": "Validation Failed",
                      "errors": [
                        {
                          "resource": "PreReceiveEnvironment",
                          "code": "custom",
                          "message": "Can not start a new download when a download is in progress"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest": {
      "get": {
        "summary": "Get the download status for a pre-receive environment",
        "description": "In addition to seeing the download status at the \"[Get a pre-receive environment](#get-a-pre-receive-environment)\" endpoint, there is also this separate endpoint for just the download status.",
        "operationId": "enterprise-admin/get-download-status-for-pre-receive-environment",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/pre-receive-environment-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pre-receive-environment-download-status"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pre-receive-environment-download-status"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "pre-receive-environments"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/tokens": {
      "get": {
        "summary": "List personal access tokens",
        "description": "Lists personal access tokens for all users, including admin users.",
        "operationId": "enterprise-admin/list-personal-access-tokens",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-personal-access-tokens"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/authorization"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/tokens/{token_id}": {
      "delete": {
        "summary": "Delete a personal access token",
        "description": "Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.",
        "operationId": "enterprise-admin/delete-personal-access-token",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-personal-access-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/token-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/users/{username}": {
      "delete": {
        "summary": "Delete a user",
        "description": "Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user) is often a better option.\n\nYou can delete any user account except your own.",
        "operationId": "enterprise-admin/delete-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/admin/users/{username}/authorizations": {
      "post": {
        "summary": "Create an impersonation OAuth token",
        "description": "",
        "operationId": "enterprise-admin/create-impersonation-o-auth-token",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-impersonation-oauth-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "Response when getting an existing impersonation OAuth token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Response when creating a new impersonation OAuth token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scopes": {
                    "type": "array",
                    "description": "A list of [scopes](https://docs.github.com/github-ae@latest/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "scopes"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "scopes": [
                      "public_repo"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an impersonation OAuth token",
        "description": "",
        "operationId": "enterprise-admin/delete-impersonation-o-auth-token",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/app/installations": {
      "get": {
        "summary": "List installations for the authenticated app",
        "description": "You must use a [JWT](https://docs.github.com/github-ae@latest/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n\nThe permissions the installation has are included under the `permissions` key.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/list-installations",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#list-installations-for-the-authenticated-app"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "name": "outdated",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The permissions the installation has are included under the `permissions` key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/installation"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-installation-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "apps",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/app/installations/{installation_id}": {
      "get": {
        "summary": "Get an installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find an installation's information using the installation id.\n\nYou must use a [JWT](https://docs.github.com/github-ae@latest/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/get-installation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#get-an-installation-for-the-authenticated-app"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/installation-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/installation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-installation"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "apps",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/app/installations/{installation_id}/access_tokens": {
      "post": {
        "summary": "Create an installation access token for an app",
        "description": "Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.\n\nYou must use a [JWT](https://docs.github.com/github-ae@latest/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/create-installation-access-token",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps/#create-an-installation-access-token-for-an-app"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/installation-id"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repositories": {
                    "description": "List of repository names that the token should have access to",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "rails"
                    }
                  },
                  "repository_ids": {
                    "description": "List of repository IDs that the token should have access to",
                    "example": [
                      1
                    ],
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "permissions": {
                    "$ref": "#/components/schemas/app-permissions"
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "repository": "Hello-World",
                    "permissions": {
                      "issues": "write",
                      "contents": "read"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/installation-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installation-token"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "apps",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/applications/{client_id}/token": {
      "post": {
        "summary": "Check a token",
        "description": "OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/check-token",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#check-a-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/client-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "access_token": {
                    "description": "The access_token of the OAuth or GitHub application.",
                    "type": "string"
                  }
                },
                "required": [
                  "access_token"
                ],
                "type": "object"
              },
              "examples": {
                "default": {
                  "value": {
                    "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-with-user"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": "oauth-applications"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "patch": {
        "summary": "Reset a token",
        "description": "OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/reset-token",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#reset-a-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/client-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "access_token": {
                    "description": "The access_token of the OAuth or GitHub application.",
                    "type": "string"
                  }
                },
                "required": [
                  "access_token"
                ],
                "type": "object"
              },
              "examples": {
                "default": {
                  "value": {
                    "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-with-user"
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": "oauth-applications"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/applications/{client_id}/tokens/{access_token}": {
      "post": {
        "summary": "Reset an authorization",
        "description": "**Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/reset-authorization",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#reset-an-authorization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/client-id"
          },
          {
            "$ref": "#/components/parameters/access-token"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-with-user"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "removalDate": "2021-05-05",
          "deprecationDate": "2020-02-14",
          "category": "apps",
          "subcategory": "oauth-applications"
        },
        "deprecated": true,
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/announcement": {
      "get": {
        "summary": "Get the global announcement banner",
        "description": "Gets the current message and expiration date of the global announcement banner in your enterprise.",
        "tags": [
          "enterprise-admin"
        ],
        "operationId": "enterprise-admin/get-announcement",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#get-the-global-announcement-banner"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/announcement"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/announcement"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "announcement"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "patch": {
        "summary": "Set the global announcement banner",
        "description": "Sets the message and expiration time for the global announcement banner in your enterprise.",
        "tags": [
          "enterprise-admin"
        ],
        "operationId": "enterprise-admin/set-announcement",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#set-the-global-announcement-banner"
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/announcement"
              },
              "examples": {
                "default": {
                  "value": {
                    "announcement": "Very **important** announcement about _something_.",
                    "expires_at": "2021-01-01T00:00:00.000+00:00"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/announcement"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/announcement"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "announcement"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove the global announcement banner",
        "description": "Removes the global announcement banner in your enterprise.",
        "tags": [
          "enterprise-admin"
        ],
        "operationId": "enterprise-admin/remove-announcement",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/enterprise-admin/announcement#remove-the-global-announcement-banner"
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "announcement"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/settings/license": {
      "get": {
        "summary": "Get license information",
        "description": "",
        "operationId": "enterprise-admin/get-license-information",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-license-information"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/license-info"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/license-info"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "license"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/all": {
      "get": {
        "summary": "Get all statistics",
        "description": "",
        "operationId": "enterprise-admin/get-all-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-overview"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/enterprise-overview"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/comments": {
      "get": {
        "summary": "Get comment statistics",
        "description": "",
        "operationId": "enterprise-admin/get-comment-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-comment-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-comment-overview"
                },
                "examples": {
                  "example": {
                    "value": {
                      "total_commit_comments": 5000,
                      "total_gist_comments": 400,
                      "total_issue_comments": 10900,
                      "total_pull_request_comments": 9900
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/gists": {
      "get": {
        "summary": "Get gist statistics",
        "description": "",
        "operationId": "enterprise-admin/get-gist-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-gist-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-gist-overview"
                },
                "examples": {
                  "example": {
                    "value": {
                      "total_gists": 500,
                      "private_gists": 30,
                      "public_gists": 470
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/hooks": {
      "get": {
        "summary": "Get hooks statistics",
        "operationId": "enterprise-admin/get-hooks-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-hooks-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-hook-overview"
                },
                "examples": {
                  "example": {
                    "value": {
                      "total_hooks": 50,
                      "active_hooks": 47,
                      "inactive_hooks": 3
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/issues": {
      "get": {
        "summary": "Get issue statistics",
        "description": "",
        "operationId": "enterprise-admin/get-issue-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-issues-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-issue-overview"
                },
                "examples": {
                  "example": {
                    "value": {
                      "total_issues": 5000,
                      "open_issues": 300,
                      "closed_issues": 4700
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/milestones": {
      "get": {
        "summary": "Get milestone statistics",
        "description": "",
        "operationId": "enterprise-admin/get-milestone-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-milestone-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-milestone-overview"
                },
                "examples": {
                  "example": {
                    "value": {
                      "total_milestones": 90,
                      "open_milestones": 10,
                      "closed_milestones": 80
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/orgs": {
      "get": {
        "summary": "Get organization statistics",
        "description": "",
        "operationId": "enterprise-admin/get-org-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-organization-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-organization-overview"
                },
                "examples": {
                  "example": {
                    "value": {
                      "total_orgs": 50,
                      "disabled_orgs": 1,
                      "total_teams": 70,
                      "total_team_members": 700
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/pages": {
      "get": {
        "summary": "Get pages statistics",
        "description": "",
        "operationId": "enterprise-admin/get-pages-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pages-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-page-overview"
                },
                "examples": {
                  "example": {
                    "value": {
                      "total_pages": 20
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/pulls": {
      "get": {
        "summary": "Get pull request statistics",
        "description": "",
        "operationId": "enterprise-admin/get-pull-request-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pull-requests-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-pull-request-overview"
                },
                "examples": {
                  "example": {
                    "value": {
                      "total_pulls": 1200,
                      "merged_pulls": 1100,
                      "mergeable_pulls": 90,
                      "unmergeable_pulls": 10
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/repos": {
      "get": {
        "summary": "Get repository statistics",
        "operationId": "enterprise-admin/get-repo-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-repository-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-repository-overview"
                },
                "examples": {
                  "example": {
                    "value": {
                      "total_repos": 200,
                      "root_repos": 1,
                      "fork_repos": 10,
                      "org_repos": 150,
                      "total_pushes": 39000,
                      "total_wikis": 5
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprise/stats/users": {
      "get": {
        "summary": "Get users statistics",
        "description": "",
        "operationId": "enterprise-admin/get-user-stats",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-users-statistics"
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enterprise-user-overview"
                },
                "examples": {
                  "example": {
                    "value": {
                      "total_users": 100,
                      "admin_users": 3,
                      "suspended_users": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "admin-stats"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/permissions": {
      "get": {
        "summary": "Get GitHub Actions permissions for an enterprise",
        "description": "Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/get-github-actions-permissions-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#get-github-actions-permissions-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actions-enterprise-permissions"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-enterprise-permissions"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "permissions"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "put": {
        "summary": "Set GitHub Actions permissions for an enterprise",
        "description": "Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/set-github-actions-permissions-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#set-github-actions-permissions-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled_organizations": {
                    "$ref": "#/components/schemas/enabled-organizations"
                  },
                  "allowed_actions": {
                    "$ref": "#/components/schemas/allowed-actions"
                  }
                },
                "required": [
                  "enabled_organizations"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "enabled_organizations": "all",
                    "allowed_actions": "selected"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "permissions"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/permissions/organizations": {
      "get": {
        "summary": "List selected organizations enabled for GitHub Actions in an enterprise",
        "description": "Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "organizations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/organization-simple"
                      }
                    }
                  },
                  "required": [
                    "total_count",
                    "organizations"
                  ]
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-targets"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "permissions"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "put": {
        "summary": "Set selected organizations enabled for GitHub Actions in an enterprise",
        "description": "Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "selected_organization_ids": {
                    "description": "List of organization IDs to enable for GitHub Actions.",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "description": "Unique identifier of the organization."
                    }
                  }
                },
                "required": [
                  "selected_organization_ids"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "selected_organization_ids": [
                      32,
                      91
                    ]
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "permissions"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}": {
      "put": {
        "summary": "Enable a selected organization for GitHub Actions in an enterprise",
        "description": "Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/enable-selected-organization-github-actions-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/org-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "permissions"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Disable a selected organization for GitHub Actions in an enterprise",
        "description": "Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/disable-selected-organization-github-actions-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/org-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "permissions"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/permissions/selected-actions": {
      "get": {
        "summary": "Get allowed actions for an enterprise",
        "description": "Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/get-allowed-actions-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#get-allowed-actions-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/selected-actions"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/selected-actions"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "permissions"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "put": {
        "summary": "Set allowed actions for an enterprise",
        "description": "Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/set-allowed-actions-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#set-allowed-actions-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/selected-actions"
              },
              "examples": {
                "selected_actions": {
                  "$ref": "#/components/examples/selected-actions"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "permissions"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/runner-groups": {
      "get": {
        "summary": "List self-hosted runner groups for an enterprise",
        "description": "Lists all self-hosted runner groups for an enterprise.\n\nYou must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/list-self-hosted-runner-groups-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/visible-to-organization"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "runner_groups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/runner-groups-enterprise"
                      }
                    }
                  },
                  "required": [
                    "total_count",
                    "runner_groups"
                  ]
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-groups-enterprise"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "post": {
        "summary": "Create a self-hosted runner group for an enterprise",
        "description": "Creates a new self-hosted runner group for an enterprise.\n\nYou must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/create-self-hosted-runner-group-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the runner group.",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Visibility of a runner group. You can select all organizations or select individual organization.",
                    "type": "string",
                    "enum": [
                      "selected",
                      "all"
                    ]
                  },
                  "selected_organization_ids": {
                    "description": "List of organization IDs that can access the runner group.",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "description": "Unique identifier of the organization."
                    }
                  },
                  "runners": {
                    "description": "List of runner IDs to add to the runner group.",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "description": "Unique identifier of the runner."
                    }
                  },
                  "allows_public_repositories": {
                    "description": "Whether the runner group can be used by `public` repositories.",
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "name": "Expensive hardware runners",
                    "visibility": "selected",
                    "selected_organization_ids": [
                      32,
                      91
                    ],
                    "runners": [
                      9,
                      2
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runner-groups-enterprise"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-group-enterprise"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}": {
      "get": {
        "summary": "Get a self-hosted runner group for an enterprise",
        "description": "Gets a specific self-hosted runner group for an enterprise.\n\nYou must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/get-self-hosted-runner-group-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runner-groups-enterprise"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-group-enterprise"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a self-hosted runner group for an enterprise",
        "description": "Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.\n\nYou must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/update-self-hosted-runner-group-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the runner group.",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Visibility of a runner group. You can select all organizations or select individual organizations.",
                    "type": "string",
                    "enum": [
                      "selected",
                      "all"
                    ],
                    "default": "all"
                  },
                  "allows_public_repositories": {
                    "description": "Whether the runner group can be used by `public` repositories.",
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "name": "Expensive hardware runners",
                    "visibility": "selected"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runner-groups-enterprise"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-group-update-enterprise"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a self-hosted runner group from an enterprise",
        "description": "Deletes a self-hosted runner group for an enterprise.\n\nYou must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/delete-self-hosted-runner-group-from-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners": {
      "get": {
        "summary": "List self-hosted runners in a group for an enterprise",
        "description": "Lists the self-hosted runners that are in a specific enterprise group.\n\nYou must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/list-self-hosted-runners-in-group-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "runners": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/runner"
                      }
                    }
                  },
                  "required": [
                    "total_count",
                    "runners"
                  ]
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "put": {
        "summary": "Set self-hosted runners in a group for an enterprise",
        "description": "Replaces the list of self-hosted runners that are part of an enterprise runner group.\n\nYou must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/set-self-hosted-runners-in-group-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "runners": {
                    "description": "List of runner IDs to add to the runner group.",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "description": "Unique identifier of the runner."
                    }
                  }
                },
                "required": [
                  "runners"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "runners": [
                      9,
                      2
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
      "put": {
        "summary": "Add a self-hosted runner to a group for an enterprise",
        "description": "Adds a self-hosted runner to a runner group configured in an enterprise.\n\nYou must authenticate using an access token with the `manage_runners:enterprise`\nscope to use this endpoint.",
        "operationId": "enterprise-admin/add-self-hosted-runner-to-group-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          },
          {
            "$ref": "#/components/parameters/runner-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a self-hosted runner from a group for an enterprise",
        "description": "Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.\n\nYou must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          },
          {
            "$ref": "#/components/parameters/runner-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/runners": {
      "get": {
        "summary": "List self-hosted runners for an enterprise",
        "description": "Lists all self-hosted runners configured for an enterprise.\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/list-self-hosted-runners-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runners-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "runners": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/runner"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runners"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/runners/downloads": {
      "get": {
        "summary": "List runner applications for an enterprise",
        "description": "Lists binaries for the runner application that you can download and run.\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/list-runner-applications-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-runner-applications-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/runner-application"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-application-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runners"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/runners/registration-token": {
      "post": {
        "summary": "Create a registration token for an enterprise",
        "description": "Returns a token that you can pass to the `config` script. The token expires after one hour.\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n\n#### Example using registration token\n\nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN\n```",
        "operationId": "enterprise-admin/create-registration-token-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-registration-token-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          }
        ],
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authentication-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authentication-token"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runners"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/runners/remove-token": {
      "post": {
        "summary": "Create a remove token for an enterprise",
        "description": "Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.\n\n#### Example using remove token\n\nTo remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this\nendpoint.\n\n```\n./config.sh remove --token TOKEN\n```",
        "operationId": "enterprise-admin/create-remove-token-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-remove-token-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          }
        ],
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authentication-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authentication-token-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runners"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/actions/runners/{runner_id}": {
      "get": {
        "summary": "Get a self-hosted runner for an enterprise",
        "description": "Gets a specific self-hosted runner configured in an enterprise.\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/get-self-hosted-runner-for-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/runner-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runner"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runners"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a self-hosted runner from an enterprise",
        "description": "Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nYou must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.",
        "operationId": "enterprise-admin/delete-self-hosted-runner-from-enterprise",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/runner-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "enabledForGitHubApps": false,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runners"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/enterprises/{enterprise}/audit-log": {
      "get": {
        "summary": "Get the audit log for an enterprise",
        "operationId": "enterprise-admin/get-audit-log",
        "description": "Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/enterprise"
          },
          {
            "$ref": "#/components/parameters/audit-log-phrase"
          },
          {
            "$ref": "#/components/parameters/audit-log-after"
          },
          {
            "$ref": "#/components/parameters/audit-log-before"
          },
          {
            "$ref": "#/components/parameters/audit-log-order"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per-page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/audit-log-event"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/audit-log"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "audit-log"
        },
        "x-octokit": {
          "changes": [
            {
              "type": "OPERATION",
              "date": "2021-04-30",
              "before": {
                "operationId": "audit-log/get-audit-log"
              }
            }
          ],
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/installation/repositories": {
      "get": {
        "summary": "List repositories accessible to the app installation",
        "description": "List repositories that an app installation can access.\n\nYou must use an [installation access token](https://docs.github.com/github-ae@latest/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/list-repos-accessible-to-installation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#list-repositories-accessible-to-the-app-installation"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "repositories"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/repository"
                      }
                    },
                    "repository_selection": {
                      "type": "string",
                      "example": "selected"
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-paginated-2"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "apps",
          "subcategory": "installations"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/issues": {
      "get": {
        "summary": "List issues assigned to the authenticated user",
        "description": "List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you.\n\n\n**Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/github-ae@latest/rest/reference/pulls#list-pull-requests)\" endpoint.",
        "tags": [
          "issues"
        ],
        "operationId": "issues/list",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/issues#list-issues-assigned-to-the-authenticated-user"
        },
        "parameters": [
          {
            "name": "filter",
            "description": "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "assigned",
                "created",
                "mentioned",
                "subscribed",
                "repos",
                "all"
              ],
              "default": "assigned"
            }
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "name": "sort",
            "description": "What to sort results by.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            }
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "name": "collab",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "orgs",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "owned",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pulls",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-with-repo-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "issues",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/meta": {
      "get": {
        "summary": "Get GitHub AE meta information",
        "description": "Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://docs.github.com/github-ae@latest/articles/about-github-s-ip-addresses/).\"\n\nThe values shown in the documentation's response are example values. You must always query the API directly to get the latest values.\n\n**Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.",
        "tags": [
          "meta"
        ],
        "operationId": "meta/get",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/meta#get-github-meta-information"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api-overview"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/api-overview"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "meta",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "summary": "List notifications for the authenticated user",
        "description": "List all notifications for the current user, sorted by most recently updated.",
        "tags": [
          "activity"
        ],
        "operationId": "activity/list-notifications-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/activity#list-notifications-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/all"
          },
          {
            "$ref": "#/components/parameters/participating"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/before"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "name": "per_page",
            "description": "The number of results per page (max 50).",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/thread"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/thread-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "activity",
          "subcategory": "notifications"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/notifications/threads/{thread_id}": {
      "get": {
        "summary": "Get a thread",
        "description": "Gets information about a notification thread.",
        "tags": [
          "activity"
        ],
        "operationId": "activity/get-thread",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/activity#get-a-thread"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/thread-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/thread"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/thread"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "activity",
          "subcategory": "notifications"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}": {
      "patch": {
        "summary": "Update an organization",
        "description": "**Parameter Deprecation Notice:** GitHub AE will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n\nEnables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.",
        "tags": [
          "orgs"
        ],
        "operationId": "orgs/update",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/orgs#update-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "Billing email address. This address is not publicized."
                  },
                  "company": {
                    "type": "string",
                    "description": "The company name."
                  },
                  "email": {
                    "type": "string",
                    "description": "The publicly visible email address."
                  },
                  "twitter_username": {
                    "type": "string",
                    "description": "The Twitter username of the company."
                  },
                  "location": {
                    "type": "string",
                    "description": "The location."
                  },
                  "name": {
                    "type": "string",
                    "description": "The shorthand name of the company."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the company."
                  },
                  "has_organization_projects": {
                    "type": "boolean",
                    "description": "Whether an organization can use organization projects."
                  },
                  "has_repository_projects": {
                    "type": "boolean",
                    "description": "Whether repositories that belong to the organization can use repository projects."
                  },
                  "default_repository_permission": {
                    "type": "string",
                    "description": "Default permission level members have for organization repositories.",
                    "enum": [
                      "read",
                      "write",
                      "admin",
                      "none"
                    ],
                    "default": "read"
                  },
                  "members_can_create_repositories": {
                    "type": "boolean",
                    "description": "Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.",
                    "default": true
                  },
                  "members_can_create_internal_repositories": {
                    "type": "boolean",
                    "description": "Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github-ae@latest/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation."
                  },
                  "members_can_create_private_repositories": {
                    "type": "boolean",
                    "description": "Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github-ae@latest/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation."
                  },
                  "members_can_create_public_repositories": {
                    "type": "boolean",
                    "description": "Whether organization members can create public repositories, which are visible to anyone. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github-ae@latest/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation."
                  },
                  "members_allowed_repository_creation_type": {
                    "type": "string",
                    "description": "Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.",
                    "enum": [
                      "all",
                      "private",
                      "none"
                    ]
                  },
                  "members_can_create_pages": {
                    "type": "boolean",
                    "description": "Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.",
                    "default": true
                  },
                  "members_can_create_public_pages": {
                    "type": "boolean",
                    "description": "Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.",
                    "default": true
                  },
                  "members_can_create_private_pages": {
                    "type": "boolean",
                    "description": "Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.",
                    "default": true
                  },
                  "members_can_fork_private_repositories": {
                    "type": "boolean",
                    "description": "Whether organization members can fork private organization repositories.",
                    "default": false
                  },
                  "web_commit_signoff_required": {
                    "type": "boolean",
                    "description": "Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.",
                    "default": false
                  },
                  "blog": {
                    "type": "string",
                    "example": "\"http://github.blog\""
                  },
                  "advanced_security_enabled_for_new_repositories": {
                    "type": "boolean",
                    "description": "Whether GitHub Advanced Security is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/github-ae@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."
                  },
                  "dependabot_alerts_enabled_for_new_repositories": {
                    "type": "boolean",
                    "description": "Whether Dependabot alerts is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/github-ae@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."
                  },
                  "dependabot_security_updates_enabled_for_new_repositories": {
                    "type": "boolean",
                    "description": "Whether Dependabot security updates is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/github-ae@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."
                  },
                  "dependency_graph_enabled_for_new_repositories": {
                    "type": "boolean",
                    "description": "Whether dependency graph is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/github-ae@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."
                  },
                  "secret_scanning_enabled_for_new_repositories": {
                    "type": "boolean",
                    "description": "Whether secret scanning is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/github-ae@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."
                  },
                  "secret_scanning_push_protection_enabled_for_new_repositories": {
                    "type": "boolean",
                    "description": "Whether secret scanning push protection is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/github-ae@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request."
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "billing_email": "mona@github.com",
                    "company": "GitHub",
                    "email": "mona@github.com",
                    "twitter_username": "github",
                    "location": "San Francisco",
                    "name": "github",
                    "description": "GitHub, the company.",
                    "default_repository_permission": "read",
                    "members_can_create_repositories": true,
                    "members_allowed_repository_creation_type": "all"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization-full"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-full"
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/validation-error"
                    },
                    {
                      "$ref": "#/components/schemas/validation-error-simple"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "orgs",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/actions/permissions/repositories": {
      "get": {
        "summary": "List selected repositories enabled for GitHub Actions in an organization",
        "description": "Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.",
        "operationId": "actions/list-selected-repositories-enabled-github-actions-organization",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "repositories"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/repository"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-paginated"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "actions",
          "subcategory": "permissions"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/actions/runner-groups": {
      "get": {
        "summary": "List self-hosted runner groups for an organization",
        "description": "Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/list-self-hosted-runner-groups-for-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "runner_groups"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "runner_groups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/runner-groups-org"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-groups-org"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "post": {
        "summary": "Create a self-hosted runner group for an organization",
        "description": "Creates a new self-hosted runner group for an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/create-self-hosted-runner-group-for-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the runner group.",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.",
                    "type": "string",
                    "enum": [
                      "selected",
                      "all",
                      "private"
                    ],
                    "default": "all"
                  },
                  "selected_repository_ids": {
                    "description": "List of repository IDs that can access the runner group.",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "description": "Unique identifier of the repository."
                    }
                  },
                  "runners": {
                    "description": "List of runner IDs to add to the runner group.",
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "description": "Unique identifier of the runner."
                    }
                  },
                  "allows_public_repositories": {
                    "description": "Whether the runner group can be used by `public` repositories.",
                    "type": "boolean",
                    "default": false
                  },
                  "restricted_to_workflows": {
                    "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
                    "type": "boolean",
                    "default": false
                  },
                  "selected_workflows": {
                    "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Name of workflow the runner group should be allowed to run. Note that a ref, tag, or long SHA is required.",
                      "example": "octo-org/octo-repo/.github/workflows/deploy.yaml@main"
                    }
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "name": "Expensive hardware runners",
                    "visibility": "selected",
                    "selected_repository_ids": [
                      32,
                      91
                    ],
                    "runners": [
                      9,
                      2
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runner-groups-org"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-group"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/orgs/{org}/actions/runner-groups/{runner_group_id}": {
      "get": {
        "summary": "Get a self-hosted runner group for an organization",
        "description": "Gets a specific self-hosted runner group for an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/get-self-hosted-runner-group-for-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runner-groups-org"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-group-item"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a self-hosted runner group for an organization",
        "description": "Updates the `name` and `visibility` of a self-hosted runner group in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/update-self-hosted-runner-group-for-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the runner group.",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.",
                    "type": "string",
                    "enum": [
                      "selected",
                      "all",
                      "private"
                    ]
                  },
                  "allows_public_repositories": {
                    "description": "Whether the runner group can be used by `public` repositories.",
                    "type": "boolean",
                    "default": false
                  },
                  "restricted_to_workflows": {
                    "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
                    "type": "boolean",
                    "default": false
                  },
                  "selected_workflows": {
                    "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Name of workflow the runner group should be allowed to run. Note that a ref, tag, or long SHA is required.",
                      "example": "octo-org/octo-repo/.github/workflows/deploy.yaml@main"
                    }
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "name": "Expensive hardware runners",
                    "visibility": "selected"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runner-groups-org"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-group"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a self-hosted runner group from an organization",
        "description": "Deletes a self-hosted runner group for an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/delete-self-hosted-runner-group-from-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
      "put": {
        "summary": "Add a self-hosted runner to a group for an organization",
        "description": "Adds a self-hosted runner to a runner group configured in an organization.\n\nYou must authenticate using an access token with the `admin:org`\nscope to use this endpoint.",
        "operationId": "actions/add-self-hosted-runner-to-group-for-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/runner-group-id"
          },
          {
            "$ref": "#/components/parameters/runner-id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": true,
          "category": "actions",
          "subcategory": "self-hosted-runner-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/orgs/{org}/actions/runners/registration-token": {
      "post": {
        "summary": "Create a registration token for an organization",
        "description": "Returns a token that you can pass to the `config` script. The token expires after one hour.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\n#### Example using registration token\n\nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```",
        "tags": [
          "actions"
        ],
        "operationId": "actions/create-registration-token-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-registration-token-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authentication-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authentication-token"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "self-hosted-runners"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/actions/runners/remove-token": {
      "post": {
        "summary": "Create a remove token for an organization",
        "description": "Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\n#### Example using remove token\n\nTo remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this\nendpoint.\n\n```\n./config.sh remove --token TOKEN\n```",
        "tags": [
          "actions"
        ],
        "operationId": "actions/create-remove-token-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-remove-token-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authentication-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authentication-token-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "self-hosted-runners"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/actions/secrets/{secret_name}": {
      "put": {
        "summary": "Create or update an organization secret",
        "description": "Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to\nuse this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require('libsodium-wrappers')\nconst secret = 'plain-text-secret' // replace with the secret you want to encrypt\nconst key = 'base64-encoded-public-key' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n  public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n  return b64encode(encrypted).decode(\"utf-8\")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\nvar publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire \"rbnacl\"\nrequire \"base64\"\n\nkey = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt(\"my_secret\")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```",
        "tags": [
          "actions"
        ],
        "operationId": "actions/create-or-update-org-secret",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#create-or-update-an-organization-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/secret-name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "encrypted_value": {
                    "type": "string",
                    "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/github-ae@latest/rest/reference/actions#get-an-organization-public-key) endpoint.",
                    "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
                  },
                  "key_id": {
                    "type": "string",
                    "description": "ID of the key you used to encrypt the secret."
                  },
                  "visibility": {
                    "type": "string",
                    "description": "Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.",
                    "enum": [
                      "all",
                      "private",
                      "selected"
                    ]
                  },
                  "selected_repository_ids": {
                    "type": "array",
                    "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/github-ae@latest/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/github-ae@latest/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/github-ae@latest/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "visibility"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "encrypted_value": "c2VjcmV0",
                    "key_id": "012345678912345678",
                    "visibility": "selected",
                    "selected_repository_ids": [
                      1296269,
                      1296280
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response when creating a secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/empty-object"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              }
            }
          },
          "204": {
            "description": "Response when updating a secret"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "secrets"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/actions/secrets/{secret_name}/repositories": {
      "get": {
        "summary": "List selected repositories for an organization secret",
        "description": "Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/list-selected-repos-for-org-secret",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-selected-repositories-for-an-organization-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/secret-name"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per-page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "repositories"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/minimal-repository"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/public-repository-paginated"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "secrets"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/audit-log": {
      "get": {
        "summary": "Get the audit log for an organization",
        "description": "Gets the audit log for an organization. For more information, see \"[Reviewing the audit log for your organization](https://docs.github.com/github-ae@latest/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization).\"\n\nThis endpoint is available for organizations on GitHub Enterprise Cloud. To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.\n\nBy default, the response includes up to 30 events from the past three months. Use the `phrase` parameter to filter results and retrieve older events. For example, use the `phrase` parameter with the `created` qualifier to filter events based on when the events occurred. For more information, see \"[Reviewing the audit log for your organization](https://docs.github.com/github-ae@latest/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).\"\n\nUse pagination to retrieve fewer or more than 30 events. For more information, see \"[Resources in the REST API](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#pagination).\"",
        "operationId": "orgs/get-audit-log",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/orgs#get-audit-log"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/audit-log-phrase"
          },
          {
            "$ref": "#/components/parameters/audit-log-after"
          },
          {
            "$ref": "#/components/parameters/audit-log-before"
          },
          {
            "$ref": "#/components/parameters/audit-log-order"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/audit-log-event"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/audit-log"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": true,
          "category": "orgs",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/orgs/{org}/code-scanning/alerts": {
      "get": {
        "summary": "List code scanning alerts for an organization",
        "description": "Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see \"[Managing security managers in your organization](https://docs.github.com/github-ae@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n\nTo use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.\n\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `security_events` read permission to use this endpoint.",
        "tags": [
          "code-scanning"
        ],
        "operationId": "code-scanning/list-alerts-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/code-scanning#list-code-scanning-alerts-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/tool-name"
          },
          {
            "$ref": "#/components/parameters/tool-guid"
          },
          {
            "$ref": "#/components/parameters/pagination-before"
          },
          {
            "$ref": "#/components/parameters/pagination-after"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "name": "state",
            "description": "If specified, only code scanning alerts with this state will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/code-scanning-alert-state"
            }
          },
          {
            "name": "sort",
            "description": "The property by which to sort the results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/code-scanning-organization-alert-items"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-scanning-organization-alert-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "code-scanning",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/external-group/{group_id}": {
      "get": {
        "summary": "Get an external group",
        "description": "Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.\n\nYou can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github-ae@latest/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/external-idp-group-info-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/teams#external-idp-group-info-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/group-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external-group"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/external-group"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": true,
          "category": "teams",
          "subcategory": "external-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/orgs/{org}/external-groups": {
      "get": {
        "summary": "List external groups in an organization",
        "description": "Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub AE generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see \"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\"\n\nYou can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github-ae@latest/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/list-external-idp-groups-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/teams#list-external-idp-groups-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "name": "page",
            "description": "Page token",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "display_name",
            "description": "Limits the list to groups containing the text in the group name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external-groups"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/external-groups"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?per_page=2&page=url-encoded-next-page-token>; rel=\"next\"",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": true,
          "category": "teams",
          "subcategory": "external-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/orgs/{org}/installation": {
      "get": {
        "summary": "Get an organization installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://docs.github.com/github-ae@latest/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/get-org-installation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/installation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installation"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/installations": {
      "get": {
        "summary": "List app installations for an organization",
        "description": "Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.",
        "tags": [
          "orgs"
        ],
        "operationId": "orgs/list-app-installations",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/orgs#list-app-installations-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "installations"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "installations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/installation"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installation-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "orgs",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/issues": {
      "get": {
        "summary": "List organization issues assigned to the authenticated user",
        "description": "List issues in an organization assigned to the authenticated user.\n\n**Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/github-ae@latest/rest/reference/pulls#list-pull-requests)\" endpoint.",
        "tags": [
          "issues"
        ],
        "operationId": "issues/list-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "name": "filter",
            "description": "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "assigned",
                "created",
                "mentioned",
                "subscribed",
                "repos",
                "all"
              ],
              "default": "assigned"
            }
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "name": "sort",
            "description": "What to sort results by.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            }
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-with-repo-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "issues",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/migrations": {
      "get": {
        "summary": "List organization migrations",
        "description": "Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).\n\nA list of `repositories` is only returned for export migrations.",
        "tags": [
          "migrations"
        ],
        "operationId": "migrations/list-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/migrations/orgs#list-organization-migrations"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "name": "exclude",
            "description": "Exclude attributes from the API response to improve performance",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "description": "Allowed values that can be passed to the exclude param.",
                "enum": [
                  "repositories"
                ],
                "example": "repositories",
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/migration"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration-with-short-org-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "migrations",
          "subcategory": "orgs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "post": {
        "summary": "Start an organization migration",
        "description": "Initiates the generation of a migration archive.",
        "tags": [
          "migrations"
        ],
        "operationId": "migrations/start-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/migrations/orgs#start-an-organization-migration"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repositories": {
                    "type": "array",
                    "description": "A list of arrays indicating which repositories should be migrated.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "lock_repositories": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data.",
                    "default": false
                  },
                  "exclude_metadata": {
                    "type": "boolean",
                    "description": "Indicates whether metadata should be excluded and only git source should be included for the migration.",
                    "default": false
                  },
                  "exclude_git_data": {
                    "type": "boolean",
                    "description": "Indicates whether the repository git data should be excluded from the migration.",
                    "default": false
                  },
                  "exclude_attachments": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).",
                    "default": false
                  },
                  "exclude_releases": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether releases should be excluded from the migration (to reduce migration archive file size).",
                    "default": false
                  },
                  "exclude_owner_projects": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether projects owned by the organization or users should be excluded. from the migration.",
                    "default": false
                  },
                  "org_metadata_only": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).",
                    "default": false
                  },
                  "exclude": {
                    "type": "array",
                    "description": "Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `\"repositories\"`.",
                    "items": {
                      "type": "string",
                      "enum": [
                        "repositories"
                      ]
                    }
                  }
                },
                "required": [
                  "repositories"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "repositories": [
                      "github/Hello-World"
                    ],
                    "lock_repositories": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/migration"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration-with-short-org-2"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "migrations",
          "subcategory": "orgs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/migrations/{migration_id}": {
      "get": {
        "summary": "Get an organization migration status",
        "description": "Fetches the status of a migration.\n\nThe `state` of a migration can be one of the following values:\n\n*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.",
        "tags": [
          "migrations"
        ],
        "operationId": "migrations/get-status-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/migrations/orgs#get-an-organization-migration-status"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/migration-id"
          },
          {
            "name": "exclude",
            "description": "Exclude attributes from the API response to improve performance",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "description": "Allowed values that can be passed to the exclude param.",
                "enum": [
                  "repositories"
                ],
                "example": "repositories",
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/migration"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration-with-short-org"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "migrations",
          "subcategory": "orgs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/migrations/{migration_id}/repositories": {
      "get": {
        "summary": "List repositories in an organization migration",
        "description": "List all the repositories for this organization migration.",
        "tags": [
          "migrations"
        ],
        "operationId": "migrations/list-repos-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/migrations/orgs#list-repositories-in-an-organization-migration"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/migration-id"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "migrations",
          "subcategory": "orgs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/repos": {
      "get": {
        "summary": "List organization repositories",
        "description": "Lists repositories for the specified organization.\n\n**Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/github-ae@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#list-organization-repositories"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "name": "type",
            "description": "Specifies the types of repositories you want returned. `internal` is not yet supported when a GitHub App calls this endpoint with an installation access token.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "private",
                "forks",
                "sources",
                "member",
                "internal"
              ]
            }
          },
          {
            "name": "sort",
            "description": "The property to sort the results by.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "pushed",
                "full_name"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "post": {
        "summary": "Create an organization repository",
        "description": "Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://docs.github.com/github-ae@latest/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.\n*   `repo` scope to create a private repository",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-in-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#create-an-organization-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the repository."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the repository."
                  },
                  "homepage": {
                    "type": "string",
                    "description": "A URL with more information about the repository."
                  },
                  "private": {
                    "type": "boolean",
                    "description": "Whether the repository is private.",
                    "default": false
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The visibility of the repository. **Note**: For GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see \"[Creating an internal repository](https://docs.github.com/github-ae@latest/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\" in the GitHub Help documentation.  \nThe `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.",
                    "enum": [
                      "public",
                      "private",
                      "internal"
                    ]
                  },
                  "has_issues": {
                    "type": "boolean",
                    "description": "Either `true` to enable issues for this repository or `false` to disable them.",
                    "default": true
                  },
                  "has_projects": {
                    "type": "boolean",
                    "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                    "default": true
                  },
                  "has_wiki": {
                    "type": "boolean",
                    "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
                    "default": true
                  },
                  "has_downloads": {
                    "description": "Whether downloads are enabled.",
                    "default": true,
                    "type": "boolean",
                    "example": true
                  },
                  "is_template": {
                    "type": "boolean",
                    "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
                    "default": false
                  },
                  "team_id": {
                    "type": "integer",
                    "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization."
                  },
                  "auto_init": {
                    "type": "boolean",
                    "description": "Pass `true` to create an initial commit with empty README.",
                    "default": false
                  },
                  "gitignore_template": {
                    "type": "string",
                    "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\"."
                  },
                  "license_template": {
                    "type": "string",
                    "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/github-ae@latest/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\"."
                  },
                  "allow_squash_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
                    "default": true
                  },
                  "allow_merge_commit": {
                    "type": "boolean",
                    "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
                    "default": true
                  },
                  "allow_rebase_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
                    "default": true
                  },
                  "allow_auto_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.",
                    "default": false
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**",
                    "default": false
                  },
                  "use_squash_pr_title_as_default": {
                    "type": "boolean",
                    "description": "Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
                    "default": false,
                    "deprecated": true
                  },
                  "squash_merge_commit_title": {
                    "type": "string",
                    "enum": [
                      "PR_TITLE",
                      "COMMIT_OR_PR_TITLE"
                    ],
                    "description": "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
                  },
                  "squash_merge_commit_message": {
                    "type": "string",
                    "enum": [
                      "PR_BODY",
                      "COMMIT_MESSAGES",
                      "BLANK"
                    ],
                    "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
                  },
                  "merge_commit_title": {
                    "type": "string",
                    "enum": [
                      "PR_TITLE",
                      "MERGE_MESSAGE"
                    ],
                    "description": "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
                  },
                  "merge_commit_message": {
                    "type": "string",
                    "enum": [
                      "PR_BODY",
                      "PR_TITLE",
                      "BLANK"
                    ],
                    "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "name": "Hello-World",
                    "description": "This is your first repository",
                    "homepage": "https://github.com",
                    "private": false,
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/external-groups": {
      "patch": {
        "summary": "Update the connection between an external group and a team",
        "description": "Creates a connection between a team and an external group.  Only one external group can be linked to a team.\n\nYou can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see \"[GitHub's products](https://docs.github.com/github-ae@latest/github/getting-started-with-github/githubs-products)\" in the GitHub Help documentation.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/link-external-idp-group-to-team-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/teams#link-external-idp-group-team-connection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team-slug"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group_id": {
                    "type": "integer",
                    "description": "External Group Id",
                    "example": 1
                  }
                },
                "required": [
                  "group_id"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "group_id": 123
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/external-group"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/external-group"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": false,
          "category": "teams",
          "subcategory": "external-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove the connection between an external group and a team",
        "description": "Deletes a connection between a team and an external group.\n\nYou can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github-ae@latest/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/unlink-external-idp-group-from-team-for-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/teams#unlink-external-idp-group-team-connection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team-slug"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "x-github": {
          "githubCloudOnly": true,
          "enabledForGitHubApps": false,
          "category": "teams",
          "subcategory": "external-groups"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/repos": {
      "get": {
        "summary": "List team repositories",
        "description": "Lists a team's repositories visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/list-repos-in-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/teams#list-team-repositories"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team-slug"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "teams",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
      "get": {
        "summary": "Check team permissions for a repository",
        "description": "Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.\n\nIf a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/check-permissions-for-repo-in-org",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/teams/#check-team-permissions-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team-slug"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "Alternative response with repository permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-repository"
                },
                "examples": {
                  "alternative-response-with-repository-permissions": {
                    "$ref": "#/components/examples/team-repository-alternative-response-with-repository-permissions"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Response if team has permission for the repository. This is the response when the repository media type hasn't been provded in the Accept header."
          },
          "404": {
            "description": "Not Found if team does not have permission for the repository"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "teams",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/rate_limit": {
      "get": {
        "summary": "Get rate limit status for the authenticated user",
        "description": "**Note:** Accessing this endpoint does not count against your REST API rate limit.\n\n**Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.",
        "tags": [
          "rate-limit"
        ],
        "operationId": "rate-limit/get",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/rate-limit#get-rate-limit-status-for-the-authenticated-user"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rate-limit-overview"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/rate-limit-overview"
                  }
                }
              }
            },
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/x-rate-limit-limit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/x-rate-limit-remaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/x-rate-limit-reset"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "rate-limit",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "summary": "Get a repository",
        "description": "The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.\n\n**Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/github-ae@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#get-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/full-repository"
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/full-repository-default-response"
                  }
                }
              }
            }
          },
          "301": {
            "$ref": "#/components/responses/moved_permanently"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a repository",
        "description": "**Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/github-ae@latest/rest/reference/repos#replace-all-repository-topics) endpoint.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/update",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/repos/repos#update-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the repository."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the repository."
                  },
                  "homepage": {
                    "type": "string",
                    "description": "A URL with more information about the repository."
                  },
                  "private": {
                    "type": "boolean",
                    "description": "Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/github-ae@latest/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
                    "default": false
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The visibility of the repository.",
                    "enum": [
                      "public",
                      "private",
                      "internal"
                    ]
                  },
                  "has_issues": {
                    "type": "boolean",
                    "description": "Either `true` to enable issues for this repository or `false` to disable them.",
                    "default": true
                  },
                  "has_projects": {
                    "type": "boolean",
                    "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                    "default": true
                  },
                  "has_wiki": {
                    "type": "boolean",
                    "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
                    "default": true
                  },
                  "is_template": {
                    "type": "boolean",
                    "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
                    "default": false
                  },
                  "default_branch": {
                    "type": "string",
                    "description": "Updates the default branch for this repository."
                  },
                  "allow_squash_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
                    "default": true
                  },
                  "allow_merge_commit": {
                    "type": "boolean",
                    "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
                    "default": true
                  },
                  "allow_rebase_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
                    "default": true
                  },
                  "allow_auto_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.",
                    "default": false
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
                    "default": false
                  },
                  "allow_update_branch": {
                    "type": "boolean",
                    "description": "Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.",
                    "default": false
                  },
                  "use_squash_pr_title_as_default": {
                    "type": "boolean",
                    "description": "Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.",
                    "default": false,
                    "deprecated": true
                  },
                  "squash_merge_commit_title": {
                    "type": "string",
                    "enum": [
                      "PR_TITLE",
                      "COMMIT_OR_PR_TITLE"
                    ],
                    "description": "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
                  },
                  "squash_merge_commit_message": {
                    "type": "string",
                    "enum": [
                      "PR_BODY",
                      "COMMIT_MESSAGES",
                      "BLANK"
                    ],
                    "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
                  },
                  "merge_commit_title": {
                    "type": "string",
                    "enum": [
                      "PR_TITLE",
                      "MERGE_MESSAGE"
                    ],
                    "description": "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
                  },
                  "merge_commit_message": {
                    "type": "string",
                    "enum": [
                      "PR_BODY",
                      "PR_TITLE",
                      "BLANK"
                    ],
                    "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
                  },
                  "archived": {
                    "type": "boolean",
                    "description": "Whether to archive this repository. **Note**: You cannot unarchive repositories through the API.",
                    "default": false
                  },
                  "allow_forking": {
                    "type": "boolean",
                    "description": "Either `true` to allow private forks, or `false` to prevent private forks.",
                    "default": false
                  },
                  "web_commit_signoff_required": {
                    "type": "boolean",
                    "description": "Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.",
                    "default": false
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "name": "Hello-World",
                    "description": "This is your first repository",
                    "homepage": "https://github.com",
                    "private": true,
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/full-repository"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/full-repository"
                  }
                }
              }
            }
          },
          "307": {
            "$ref": "#/components/responses/temporary_redirect"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/artifacts": {
      "get": {
        "summary": "List artifacts for a repository",
        "description": "Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/list-artifacts-for-repo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-artifacts-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "artifacts"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "artifacts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/artifact"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/artifact-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "artifacts"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/jobs/{job_id}": {
      "get": {
        "summary": "Get a job for a workflow run",
        "description": "Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/get-job-for-workflow-run",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-job-for-a-workflow-run"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/job-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/job"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-jobs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runners/registration-token": {
      "post": {
        "summary": "Create a registration token for a repository",
        "description": "Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate\nusing an access token with the `repo` scope to use this endpoint.\n\n#### Example using registration token\n \nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN\n```",
        "tags": [
          "actions"
        ],
        "operationId": "actions/create-registration-token-for-repo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-registration-token-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authentication-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authentication-token"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "self-hosted-runners"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runners/remove-token": {
      "post": {
        "summary": "Create a remove token for a repository",
        "description": "Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\n\n#### Example using remove token\n \nTo remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.\n\n```\n./config.sh remove --token TOKEN\n```",
        "tags": [
          "actions"
        ],
        "operationId": "actions/create-remove-token-for-repo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#create-a-remove-token-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authentication-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authentication-token-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "self-hosted-runners"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs": {
      "get": {
        "summary": "List workflow runs for a repository",
        "description": "Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/list-workflow-runs-for-repo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-workflow-runs-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/actor"
          },
          {
            "$ref": "#/components/parameters/workflow-run-branch"
          },
          {
            "$ref": "#/components/parameters/event"
          },
          {
            "$ref": "#/components/parameters/workflow-run-status"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/created"
          },
          {
            "$ref": "#/components/parameters/exclude-pull-requests"
          },
          {
            "$ref": "#/components/parameters/workflow-run-check-suite-id"
          },
          {
            "$ref": "#/components/parameters/workflow-run-head-sha"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "workflow_runs"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "workflow_runs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/workflow-run"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow-run-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-runs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}": {
      "get": {
        "summary": "Get a workflow run",
        "description": "Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/get-workflow-run",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-workflow-run"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run-id"
          },
          {
            "$ref": "#/components/parameters/exclude-pull-requests"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow-run"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow-run"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-runs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}": {
      "get": {
        "summary": "Get a workflow run attempt",
        "description": "Gets a specific workflow run attempt. Anyone with read access to the repository\ncan use this endpoint. If the repository is private you must use an access token\nwith the `repo` scope. GitHub Apps must have the `actions:read` permission to\nuse this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/get-workflow-run-attempt",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#get-a-workflow-run-attempt"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run-id"
          },
          {
            "$ref": "#/components/parameters/attempt-number"
          },
          {
            "$ref": "#/components/parameters/exclude-pull-requests"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow-run"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow-run"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-runs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs": {
      "get": {
        "summary": "List jobs for a workflow run attempt",
        "description": "Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#parameters).",
        "tags": [
          "actions"
        ],
        "operationId": "actions/list-jobs-for-workflow-run-attempt",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-jobs-for-a-workflow-run-attempt"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run-id"
          },
          {
            "$ref": "#/components/parameters/attempt-number"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "jobs"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "jobs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/job"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/job-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-jobs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
      "get": {
        "summary": "List jobs for a workflow run",
        "description": "Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#parameters).",
        "tags": [
          "actions"
        ],
        "operationId": "actions/list-jobs-for-workflow-run",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-jobs-for-a-workflow-run"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run-id"
          },
          {
            "name": "filter",
            "description": "Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "latest",
                "all"
              ],
              "default": "latest"
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "jobs"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "jobs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/job"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/job-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-jobs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun": {
      "post": {
        "summary": "Re-run a workflow",
        "description": "Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/re-run-workflow",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#re-run-a-workflow"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run-id"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "nullable": true
              },
              "examples": {
                "default": {
                  "value": null
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/empty-object"
                },
                "examples": {
                  "default": {
                    "value": null
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "actions",
          "subcategory": "workflow-runs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
      "get": {
        "summary": "List workflow runs for a workflow",
        "description": "List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.",
        "tags": [
          "actions"
        ],
        "operationId": "actions/list-workflow-runs",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/actions#list-workflow-runs"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/workflow-id"
          },
          {
            "$ref": "#/components/parameters/actor"
          },
          {
            "$ref": "#/components/parameters/workflow-run-branch"
          },
          {
            "$ref": "#/components/parameters/event"
          },
          {
            "$ref": "#/components/parameters/workflow-run-status"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/created"
          },
          {
            "$ref": "#/components/parameters/exclude-pull-requests"
          },
          {
            "$ref": "#/components/parameters/workflow-run-check-suite-id"
          },
          {
            "$ref": "#/components/parameters/workflow-run-head-sha"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "workflow_runs"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "workflow_runs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/workflow-run"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow-run-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "actions",
          "subcategory": "workflow-runs"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/autolinks": {
      "get": {
        "summary": "List all autolinks of a repository",
        "description": "This returns a list of autolinks configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-autolinks",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/repos/autolinks#list-all-autolinks-of-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/autolink"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/autolink-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "autolinks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "post": {
        "summary": "Create an autolink reference for a repository",
        "description": "Users with admin access to the repository can create an autolink.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-autolink",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/repos/autolinks#create-an-autolink-reference-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key_prefix": {
                    "type": "string",
                    "description": "The prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit."
                  },
                  "url_template": {
                    "type": "string",
                    "description": "The URL must contain `<num>` for the reference number."
                  },
                  "is_alphanumeric": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters."
                  }
                },
                "required": [
                  "key_prefix",
                  "url_template"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "key_prefix": "TICKET-",
                    "url_template": "https://example.com/TICKET?query=<num>",
                    "is_alphanumeric": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/autolink"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/autolink"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/autolinks/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "autolinks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/autolinks/{autolink_id}": {
      "get": {
        "summary": "Get an autolink reference of a repository",
        "description": "This returns a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-autolink",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/repos/autolinks#get-an-autolink-reference-of-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/autolink-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/autolink"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/autolink"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "autolinks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/branches": {
      "get": {
        "summary": "List branches",
        "description": "",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-branches",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/branches/branches#list-branches"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "protected",
            "description": "Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/short-branch"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/short-branch-with-protection-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "branches"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}": {
      "get": {
        "summary": "Get a branch",
        "description": "",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-branch",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/branches/branches#get-a-branch"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/branch"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch-with-protection"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/branch-get"
                  }
                }
              }
            }
          },
          "301": {
            "$ref": "#/components/responses/moved_permanently"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "branches"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection": {
      "get": {
        "summary": "Get branch protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github-ae@latest/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-branch-protection",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/branches/branch-protection#get-branch-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/branch"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch-protection"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/branch-protection"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "branches",
          "subcategory": "branch-protection"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "put": {
        "summary": "Update branch protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github-ae@latest/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nProtecting a branch requires admin or owner permissions to the repository.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n\n**Note**: The list of users, apps, and teams in total is limited to 100 items.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/update-branch-protection",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/branches/branch-protection#update-branch-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/branch"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "required_status_checks": {
                    "type": "object",
                    "description": "Require status checks to pass before merging. Set to `null` to disable.",
                    "nullable": true,
                    "properties": {
                      "strict": {
                        "type": "boolean",
                        "description": "Require branches to be up to date before merging."
                      },
                      "contexts": {
                        "type": "array",
                        "deprecated": true,
                        "description": "**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n",
                        "items": {
                          "type": "string"
                        }
                      },
                      "checks": {
                        "type": "array",
                        "description": "The list of status checks to require in order to merge into this branch.",
                        "items": {
                          "type": "object",
                          "required": [
                            "context"
                          ],
                          "properties": {
                            "context": {
                              "type": "string",
                              "description": "The name of the required check"
                            },
                            "app_id": {
                              "type": "integer",
                              "description": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status."
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "strict",
                      "contexts"
                    ]
                  },
                  "enforce_admins": {
                    "type": "boolean",
                    "description": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
                    "nullable": true
                  },
                  "required_pull_request_reviews": {
                    "type": "object",
                    "description": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
                    "nullable": true,
                    "properties": {
                      "dismissal_restrictions": {
                        "type": "object",
                        "description": "Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                        "properties": {
                          "users": {
                            "type": "array",
                            "description": "The list of user `login`s with dismissal access",
                            "items": {
                              "type": "string"
                            }
                          },
                          "teams": {
                            "type": "array",
                            "description": "The list of team `slug`s with dismissal access",
                            "items": {
                              "type": "string"
                            }
                          },
                          "apps": {
                            "type": "array",
                            "description": "The list of app `slug`s with dismissal access",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "dismiss_stale_reviews": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit."
                      },
                      "require_code_owner_reviews": {
                        "type": "boolean",
                        "description": "Blocks merging pull requests until [code owners](https://docs.github.com/github-ae@latest/articles/about-code-owners/) review them."
                      },
                      "required_approving_review_count": {
                        "type": "integer",
                        "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers."
                      },
                      "bypass_pull_request_allowances": {
                        "type": "object",
                        "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
                        "properties": {
                          "users": {
                            "type": "array",
                            "description": "The list of user `login`s allowed to bypass pull request requirements.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "teams": {
                            "type": "array",
                            "description": "The list of team `slug`s allowed to bypass pull request requirements.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "apps": {
                            "type": "array",
                            "description": "The list of app `slug`s allowed to bypass pull request requirements.",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "restrictions": {
                    "type": "object",
                    "description": "Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
                    "nullable": true,
                    "properties": {
                      "users": {
                        "type": "array",
                        "description": "The list of user `login`s with push access",
                        "items": {
                          "type": "string"
                        }
                      },
                      "teams": {
                        "type": "array",
                        "description": "The list of team `slug`s with push access",
                        "items": {
                          "type": "string"
                        }
                      },
                      "apps": {
                        "type": "array",
                        "description": "The list of app `slug`s with push access",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "users",
                      "teams"
                    ]
                  },
                  "required_linear_history": {
                    "type": "boolean",
                    "description": "Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://docs.github.com/github-ae@latest/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation."
                  },
                  "allow_force_pushes": {
                    "type": "boolean",
                    "description": "Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github-ae@latest/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\"",
                    "nullable": true
                  },
                  "allow_deletions": {
                    "type": "boolean",
                    "description": "Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github-ae@latest/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation."
                  },
                  "block_creations": {
                    "type": "boolean",
                    "description": "If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`."
                  },
                  "required_conversation_resolution": {
                    "type": "boolean",
                    "description": "Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`."
                  }
                },
                "required": [
                  "required_status_checks",
                  "enforce_admins",
                  "required_pull_request_reviews",
                  "restrictions"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "required_status_checks": {
                      "strict": true,
                      "contexts": [
                        "continuous-integration/travis-ci"
                      ]
                    },
                    "enforce_admins": true,
                    "required_pull_request_reviews": {
                      "dismissal_restrictions": {
                        "users": [
                          "octocat"
                        ],
                        "teams": [
                          "justice-league"
                        ]
                      },
                      "dismiss_stale_reviews": true,
                      "require_code_owner_reviews": true,
                      "required_approving_review_count": 2,
                      "bypass_pull_request_allowances": {
                        "users": [
                          "octocat"
                        ],
                        "teams": [
                          "justice-league"
                        ]
                      }
                    },
                    "restrictions": {
                      "users": [
                        "octocat"
                      ],
                      "teams": [
                        "justice-league"
                      ],
                      "apps": [
                        "super-ci"
                      ]
                    },
                    "required_linear_history": true,
                    "allow_force_pushes": true,
                    "allow_deletions": true,
                    "block_creations": true,
                    "required_conversation_resolution": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protected-branch"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/branch-protection-update"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed_simple"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "branches",
          "subcategory": "branch-protection"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
      "get": {
        "summary": "Get pull request review protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github-ae@latest/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-pull-request-review-protection",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/branches/branch-protection#get-pull-request-review-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/branch"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protected-branch-pull-request-review"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/protected-branch-pull-request-review"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "branches",
          "subcategory": "branch-protection"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "patch": {
        "summary": "Update pull request review protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github-ae@latest/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/update-pull-request-review-protection",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/branches/branch-protection#update-pull-request-review-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/branch"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dismissal_restrictions": {
                    "type": "object",
                    "description": "Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                    "properties": {
                      "users": {
                        "type": "array",
                        "description": "The list of user `login`s with dismissal access",
                        "items": {
                          "type": "string"
                        }
                      },
                      "teams": {
                        "type": "array",
                        "description": "The list of team `slug`s with dismissal access",
                        "items": {
                          "type": "string"
                        }
                      },
                      "apps": {
                        "type": "array",
                        "description": "The list of app `slug`s with dismissal access",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "dismiss_stale_reviews": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit."
                  },
                  "require_code_owner_reviews": {
                    "type": "boolean",
                    "description": "Blocks merging pull requests until [code owners](https://docs.github.com/github-ae@latest/articles/about-code-owners/) have reviewed."
                  },
                  "required_approving_review_count": {
                    "type": "integer",
                    "description": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers."
                  },
                  "bypass_pull_request_allowances": {
                    "type": "object",
                    "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
                    "properties": {
                      "users": {
                        "type": "array",
                        "description": "The list of user `login`s allowed to bypass pull request requirements.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "teams": {
                        "type": "array",
                        "description": "The list of team `slug`s allowed to bypass pull request requirements.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "apps": {
                        "type": "array",
                        "description": "The list of app `slug`s allowed to bypass pull request requirements.",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "dismissal_restrictions": {
                      "users": [
                        "octocat"
                      ],
                      "teams": [
                        "justice-league"
                      ],
                      "apps": [
                        "octoapp"
                      ]
                    },
                    "bypass_pull_request_allowances": {
                      "users": [
                        "octocat"
                      ],
                      "teams": [
                        "justice-league"
                      ],
                      "apps": [
                        "octoapp"
                      ]
                    },
                    "dismiss_stale_reviews": true,
                    "require_code_owner_reviews": true,
                    "required_approving_review_count": 2
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protected-branch-pull-request-review"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/protected-branch-pull-request-review"
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "branches",
          "subcategory": "branch-protection"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/check-suites": {
      "post": {
        "summary": "Create a check suite",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nBy default, check suites are automatically created when you create a [check run](https://docs.github.com/github-ae@latest/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Update repository preferences for check suites](https://docs.github.com/github-ae@latest/rest/reference/checks#update-repository-preferences-for-check-suites)\". Your GitHub App must have the `checks:write` permission to create check suites.",
        "tags": [
          "checks"
        ],
        "operationId": "checks/create-suite",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/checks#create-a-check-suite"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "head_sha": {
                    "type": "string",
                    "description": "The sha of the head commit."
                  }
                },
                "required": [
                  "head_sha"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response when the suite already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check-suite"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-suite"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Response when the suite was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check-suite"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-suite"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "checks",
          "subcategory": "suites"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/check-suites/preferences": {
      "patch": {
        "summary": "Update repository preferences for check suites",
        "description": "Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/github-ae@latest/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.",
        "tags": [
          "checks"
        ],
        "operationId": "checks/set-suites-preferences",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/checks#update-repository-preferences-for-check-suites"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auto_trigger_checks": {
                    "type": "array",
                    "description": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "app_id": {
                          "type": "integer",
                          "description": "The `id` of the GitHub App."
                        },
                        "setting": {
                          "type": "boolean",
                          "description": "Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.",
                          "default": true
                        }
                      },
                      "required": [
                        "app_id",
                        "setting"
                      ]
                    }
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "auto_trigger_checks": [
                      {
                        "app_id": 4,
                        "setting": false
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check-suite-preference"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-suite-preference"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "checks",
          "subcategory": "suites"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}": {
      "get": {
        "summary": "Get a check suite",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nGets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.",
        "tags": [
          "checks"
        ],
        "operationId": "checks/get-suite",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/checks#get-a-check-suite"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/check-suite-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check-suite"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-suite"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "checks",
          "subcategory": "suites"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/code-scanning/alerts": {
      "get": {
        "summary": "List code scanning alerts for a repository",
        "description": "Lists code scanning alerts.\n\nTo use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.\n\nGitHub Apps must have the `security_events` read\npermission to use this endpoint.\n\nThe response includes a `most_recent_instance` object.\nThis provides details of the most recent instance of this alert\nfor the default branch (or for the specified Git reference if you used `ref` in the request).",
        "tags": [
          "code-scanning"
        ],
        "operationId": "code-scanning/list-alerts-for-repo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/tool-name"
          },
          {
            "$ref": "#/components/parameters/tool-guid"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/git-ref"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "name": "sort",
            "description": "The property by which to sort the results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            }
          },
          {
            "name": "state",
            "description": "If specified, only code scanning alerts with this state will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/code-scanning-alert-state"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/code-scanning-alert-items"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-scanning-alert-items"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "403": {
            "$ref": "#/components/responses/code_scanning_forbidden_read"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "code-scanning",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
      "get": {
        "summary": "Get a code scanning alert",
        "description": "Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.",
        "tags": [
          "code-scanning"
        ],
        "operationId": "code-scanning/get-alert",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/code-scanning#get-a-code-scanning-alert"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/alert-number"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/code-scanning-alert"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-scanning-alert"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "403": {
            "$ref": "#/components/responses/code_scanning_forbidden_read"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "code-scanning",
          "subcategory": null
        },
        "x-octokit": {
          "changes": [
            {
              "type": "PARAMETER",
              "date": "2020-09-17",
              "parameter": "alert_number",
              "before": {
                "name": "alert_id"
              }
            }
          ],
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a code scanning alert",
        "description": "Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.",
        "operationId": "code-scanning/update-alert",
        "tags": [
          "code-scanning"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/code-scanning#update-a-code-scanning-alert"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/alert-number"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "$ref": "#/components/schemas/code-scanning-alert-set-state"
                  },
                  "dismissed_reason": {
                    "$ref": "#/components/schemas/code-scanning-alert-dismissed-reason"
                  }
                },
                "required": [
                  "state"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "state": "dismissed",
                    "dismissed_reason": "false positive",
                    "dismissed_comment": "This alert is not actually correct, because there's a sanitizer included in the library."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/code-scanning-alert"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-scanning-alert-dismissed"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/code_scanning_forbidden_write"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "code-scanning"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/code-scanning/sarifs": {
      "post": {
        "summary": "Upload an analysis as SARIF data",
        "description": "Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.\n\nThere are two places where you can upload code scanning results.\n - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see \"[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\"\n - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see \"[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\"\n\nYou must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:\n\n```\ngzip -c analysis-data.sarif | base64 -w0\n```\n<br>\nSARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above these values. For some objects there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.\nTo get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries.\n\n| **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |\n|----------------------------------|:------------------:|----------------------------------------------------------------------------------|\n| Runs per file                    |         15         |                                                                                  |\n| Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |\n| Rules per run                    |       25,000       |                                                                                  |\n| Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |\n| Location per result\t             |       1,000        | Only 100 locations will be included.                                             |\n\n\nThe `202 Accepted` response includes an `id` value.\nYou can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.\nFor more information, see \"[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload).\"",
        "operationId": "code-scanning/upload-sarif",
        "tags": [
          "code-scanning"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/code-scanning#upload-an-analysis-as-sarif-data"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commit_sha": {
                    "$ref": "#/components/schemas/code-scanning-analysis-commit-sha"
                  },
                  "ref": {
                    "$ref": "#/components/schemas/code-scanning-ref"
                  },
                  "sarif": {
                    "$ref": "#/components/schemas/code-scanning-analysis-sarif-file"
                  },
                  "checkout_uri": {
                    "description": "The base directory used in the analysis, as it appears in the SARIF file.\nThis property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.",
                    "example": "file:///github/workspace/",
                    "type": "string",
                    "format": "uri"
                  },
                  "started_at": {
                    "description": "The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "tool_name": {
                    "description": "The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.",
                    "type": "string"
                  }
                },
                "required": [
                  "commit_sha",
                  "ref",
                  "sarif"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "commit_sha": "4b6472266afd7b471e86085a6659e8c7f2b119da",
                    "ref": "refs/heads/master",
                    "sarif": "H4sICMLGdF4AA2V4YW1wbGUuc2FyaWYAvVjdbts2FL7PUxDCijaA/CM7iRNfLkPXYgHSNstumlzQ0pHFVCI1korjFgH2ONtr7Ul2KFmy/mOn6QIkjsjDw0/nfN85NL8dEGL9pNwAImqRObECrWM1H40kXQ2XTAfJIlEgXcE1cD10RTQSVDE10K4aKSqZP1AxuKOIKg1ydJU60jSfSh8Hk6EzHA/vlOCWbfa7B6kYPpj90rlsWCZcmbHP5Bs+4oAWIjQD2SMOeJLh2vIQDnIaQerqXHjw8YIgxohybxAyDsS4cAPKsp03K4RcUs6+Up2D+JXpd8mibKIQN9fM/aMCdbyBujGSSQgVxJtx5qX2d2qUcIweQhEuDQf3GBO6CKHkogx/N3MVCKl/AeVKFuf4y5ubsMGDTj1ep+5I7sgmLIpxtU38hLtmMRGSuCFVyip5eKzs5ydh+LztVL6f2m6oih1BkYiuyQIIJWodxVpERPj4sEiWBNNH8EWT0DMG8EAjzKVHXCrB4FkPu/F64NMk1OeC+2yZSNoBOoR7CC0EzYWGbm+xFDFIzbI011+cLjfZtyJkmMZfumAh02uL3NpV2y+MZ6RAjxibyKrNxxJcVjANSb4eBGwZ1M0KsuyR2poLr5rMl8vaDSeVn6eTWEO2j2xIEcmhwlTKNOi4GMOI8gfuZYkvJ7b4v5Tiumyz7RnHeodFzpS8ASIZCH/AYdWi2z3sG8JtFxJ6fF9yR9CdifBr9Pd6d5V2+zbJKjjCFGGmsHuYFy2ytJq9tUxcLSRSQecppOGKrpUxYfxefMEFK+wOGa4hudQByBVT0L+EKtyACxnRsABhEx1QjVDs1KNI9MbpnhqfE45B6FJvu3hRu5VRU9MhZLmK7fqkKyQSTHNoyMqUFMqXCV3CwAeqEwmVokraK8IuBaGvHjQ0gMYrKjnjyw7uk9uD8tgmsBbFMPnU1bV2ZhkJNkuolUiWys3UPWzs5aaIUz9TBe8zMb+6+nT+6fLy91dlE3xzeDDT4zYszb0bW6NjJd0Rvn2EnLvWLFSdKPpBzInzfRgu8ETyMcH8nIfMnJCeC2PyfTA+UKngcnGH7Hw2hGkVQs5YlIRCtdWZYQ4/73es2JlxkfViOEIhoWJq5Oo6UBBfiKIqFBWhiE3jJGbFwVoxBHTRSuIS67sMeplei24X20shLjG+8gqbKC/bESiNMC+wd5q5id0yeS7CJEqXzmrTWNq3k05l84P6f4/bEmXFJjI0fIt1BGQssUnUDkBYeVhE5TqPnMH3jqogDcP0zKcTgLPTMSzOjhbjuVOmW23l1fYNStulfo6sXlFsGLhbDy5RECPRYGCTgOj2bd4nUQEivEd0H7KKYxqnEhFohuur3a3UPskbH/+Yg0+M5P2MHRJu3ziHh3Z2NCrWt3XF1rWTw8Ne/pfbWYXnDSE0SNZQQt1i18q7te2vOhu7ehWuvVyeu0wbLZi24mhoo6aOOTltzG/lgdVvVoXQq5V+pewkFIzL8fjEcadT55jOjpzFzHuOTtDNrMkJPMVQDd7F09RID72O/UPZ0tmctqZ7kWX6EmSZnDpP8GU67SXM8XE3YSrxbKsx6UReZ4y6n/FVZfJjs9Z7stma75W5yQtkzjk5eSJxk1lv4o7+j8TlhaJ2lsKWZO6lruDPBLib3x5ZN/KGWzZ+pn///evv7OOf4iIBv3oY9L/l1wiJ9p0Tc+F1zZnOE9NxXWEus6IQhr5pMfoqxi8WPsuu0azsns4UC6WzNzHIzbeEx4P/AJ3SefgcFAAA"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/code-scanning-sarifs-receipt"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-scanning-sarif-upload"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request if the sarif field is invalid"
          },
          "403": {
            "$ref": "#/components/responses/code_scanning_forbidden_write"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "413": {
            "description": "Payload Too Large if the sarif field is too large"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "code-scanning"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators": {
      "get": {
        "summary": "List repository collaborators",
        "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\nOrganization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.\n\nTeam members will include the members of child teams.\n\nYou must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this\nendpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this\nendpoint.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-collaborators",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/collaborators/collaborators#list-repository-collaborators"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "affiliation",
            "description": "Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "outside",
                "direct",
                "all"
              ],
              "default": "all"
            }
          },
          {
            "name": "permission",
            "description": "Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pull",
                "triage",
                "push",
                "maintain",
                "admin"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/collaborator"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/collaborator-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "collaborators"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators/{username}": {
      "put": {
        "summary": "Add a repository collaborator",
        "description": "This endpoint triggers [notifications](https://docs.github.com/github-ae@latest/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/github-ae@latest/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.\n\nAdding an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/github-ae@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"\n\nFor more information on permission levels, see \"[Repository permission levels for an organization](https://docs.github.com/github-ae@latest/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:\n\n```\nCannot assign {member} permission of {role name}\n```\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs).\"\n\nThe invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/github-ae@latest/rest/reference/repos#invitations).\n\n**Updating an existing collaborator's permission level**\n\nThe endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.\n\n**Rate limits**\n\nYou are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/add-collaborator",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/collaborators/collaborators#add-a-repository-collaborator"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permission": {
                    "type": "string",
                    "description": "The permission to grant the collaborator. **Only valid on organization-owned repositories.**",
                    "default": "push"
                  }
                }
              },
              "examples": {
                "new-invitation-is-created": {
                  "summary": "Add a collaborator with triage permissions",
                  "value": {
                    "permission": "triage"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response when a new invitation is created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository-invitation"
                },
                "examples": {
                  "new-invitation-is-created": {
                    "$ref": "#/components/examples/repository-invitation-response-when-a-new-invitation-is-created"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Response when:\n- an existing collaborator is added as a collaborator\n- an organization member is added as an individual collaborator\n- an existing team member (whose team is also a repository collaborator) is added as an individual collaborator"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "triggersNotification": true,
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "collaborators"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators/{username}/permission": {
      "get": {
        "summary": "Get repository permissions for a user",
        "description": "Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-collaborator-permission-level",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/collaborators/collaborators#get-repository-permissions-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "if user has admin permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository-collaborator-permission"
                },
                "examples": {
                  "response-if-user-has-admin-permissions": {
                    "$ref": "#/components/examples/repository-collaborator-permission-response-if-user-has-admin-permissions"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "collaborators"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
      "post": {
        "summary": "Create reaction for a commit comment",
        "description": "Create a reaction to a [commit comment](https://docs.github.com/github-ae@latest/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.",
        "tags": [
          "reactions"
        ],
        "operationId": "reactions/create-for-commit-comment",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/reactions#create-reaction-for-a-commit-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment-id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The [reaction type](https://docs.github.com/github-ae@latest/rest/reference/reactions#reaction-types) to add to the commit comment.",
                    "enum": [
                      "+1",
                      "-1",
                      "laugh",
                      "confused",
                      "heart",
                      "hooray",
                      "rocket",
                      "eyes"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "content": "heart"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reaction exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Reaction created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction"
                  }
                }
              }
            }
          },
          "415": {
            "$ref": "#/components/responses/preview_header_missing"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "reactions",
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://docs.github.com/github-ae@latest/rest/reference/reactions) reactions."
            }
          ]
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
      "get": {
        "summary": "List pull requests associated with a commit",
        "description": "Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-pull-requests-associated-with-commit",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/commits/commits#list-pull-requests-associated-with-a-commit"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/commit-sha"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pull-request-simple"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-simple-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "commits"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/check-suites": {
      "get": {
        "summary": "List check suites for a Git reference",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nLists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.",
        "tags": [
          "checks"
        ],
        "operationId": "checks/list-suites-for-ref",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/checks#list-check-suites-for-a-git-reference"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "ref",
            "description": "ref parameter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true
          },
          {
            "name": "app_id",
            "description": "Filters check suites by GitHub App `id`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "$ref": "#/components/parameters/check-name"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "check_suites"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "check_suites": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/check-suite"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-suite-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "checks",
          "subcategory": "suites"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/status": {
      "get": {
        "summary": "Get the combined status for a specific reference",
        "description": "Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-combined-status-for-ref",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/commits/statuses#get-the-combined-status-for-a-specific-reference"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "ref",
            "description": "ref parameter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/combined-commit-status"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/combined-commit-status"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "commits",
          "subcategory": "statuses"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/events": {
      "get": {
        "summary": "List repository events",
        "description": "**Note**: This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.\n",
        "tags": [
          "activity"
        ],
        "operationId": "activity/list-repo-events",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/activity#list-repository-events"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                },
                "examples": {
                  "200-response": {
                    "$ref": "#/components/examples/repo-events-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "activity",
          "subcategory": "events"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/forks": {
      "get": {
        "summary": "List forks",
        "description": "",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-forks",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#list-forks"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "sort",
            "description": "The sort order. `stargazers` will sort by star count.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "newest",
                "oldest",
                "stargazers",
                "watchers"
              ],
              "default": "newest"
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items-2"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "forks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "post": {
        "summary": "Create a fork",
        "description": "Create a fork for the authenticated user.\n\n**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub AE Support](https://support.github.com/contact?tags=dotcom-rest-api).\n\n**Note**: Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-fork",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#create-a-fork"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "organization": {
                    "type": "string",
                    "description": "Optional parameter to specify the organization name if forking into an organization."
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "organization": "octocat",
                    "name": "Hello-World",
                    "default_branch_only": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/full-repository"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/full-repository"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "forks"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/installation": {
      "get": {
        "summary": "Get a repository installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/github-ae@latest/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/get-repo-installation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/installation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installation"
                  }
                }
              }
            }
          },
          "301": {
            "$ref": "#/components/responses/moved_permanently"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/invitations": {
      "get": {
        "summary": "List repository invitations",
        "description": "When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-invitations",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/collaborators/invitations#list-repository-invitations"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/repository-invitation"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-invitation-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "collaborators",
          "subcategory": "invitations"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/invitations/{invitation_id}": {
      "patch": {
        "summary": "Update a repository invitation",
        "description": "",
        "tags": [
          "repos"
        ],
        "operationId": "repos/update-invitation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/collaborators/invitations#update-a-repository-invitation"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/invitation-id"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "type": "string",
                    "description": "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.",
                    "enum": [
                      "read",
                      "write",
                      "maintain",
                      "triage",
                      "admin"
                    ]
                  }
                }
              },
              "examples": {
                "default": {
                  "summary": "Example request body",
                  "value": {
                    "permissions": "write"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository-invitation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-invitation"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "collaborators",
          "subcategory": "invitations"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues": {
      "get": {
        "summary": "List repository issues",
        "description": "List issues in a repository. Only open issues will be listed.\n\n**Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/github-ae@latest/rest/reference/pulls#list-pull-requests)\" endpoint.",
        "tags": [
          "issues"
        ],
        "operationId": "issues/list-for-repo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/issues#list-repository-issues"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "milestone",
            "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "name": "assignee",
            "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creator",
            "description": "The user that created the issue.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mentioned",
            "description": "A user that's mentioned in the issue.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "name": "sort",
            "description": "What to sort results by.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            }
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "301": {
            "$ref": "#/components/responses/moved_permanently"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "issues",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "post": {
        "summary": "Create an issue",
        "description": "Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/github-ae@latest/articles/disabling-issues/), the API returns a `410 Gone` status.\n\nThis endpoint triggers [notifications](https://docs.github.com/github-ae@latest/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/github-ae@latest/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.",
        "tags": [
          "issues"
        ],
        "operationId": "issues/create",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/issues#create-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ],
                    "description": "The title of the issue."
                  },
                  "body": {
                    "type": "string",
                    "description": "The contents of the issue."
                  },
                  "assignee": {
                    "type": "string",
                    "description": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_",
                    "nullable": true
                  },
                  "milestone": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer",
                        "description": "The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._"
                      }
                    ],
                    "nullable": true
                  },
                  "labels": {
                    "type": "array",
                    "description": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string",
                              "nullable": true
                            },
                            "color": {
                              "type": "string",
                              "nullable": true
                            }
                          }
                        }
                      ]
                    }
                  },
                  "assignees": {
                    "type": "array",
                    "description": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "title"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "title": "Found a bug",
                    "body": "I'm having a problem with this.",
                    "assignees": [
                      "octocat"
                    ],
                    "milestone": 1,
                    "labels": [
                      "bug"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "410": {
            "$ref": "#/components/responses/gone"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "triggersNotification": true,
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "issues",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/events": {
      "get": {
        "summary": "List issue events for a repository",
        "description": "",
        "tags": [
          "issues"
        ],
        "operationId": "issues/list-events-for-repo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/issues#list-issue-events-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue-event"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-event-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "issues",
          "subcategory": "events"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/events/{event_id}": {
      "get": {
        "summary": "Get an issue event",
        "description": "",
        "tags": [
          "issues"
        ],
        "operationId": "issues/get-event",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/issues#get-an-issue-event"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue-event"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-event"
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "410": {
            "$ref": "#/components/responses/gone"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "issues",
          "subcategory": "events"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}": {
      "get": {
        "summary": "Get an issue",
        "description": "The API returns a [`301 Moved Permanently` status](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was\n[transferred](https://docs.github.com/github-ae@latest/articles/transferring-an-issue-to-another-repository/) to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\nto the [`issues`](https://docs.github.com/github-ae@latest/webhooks/event-payloads/#issues) webhook.\n\n**Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/github-ae@latest/rest/reference/pulls#list-pull-requests)\" endpoint.",
        "tags": [
          "issues"
        ],
        "operationId": "issues/get",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/issues#get-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue-number"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue"
                  }
                }
              }
            }
          },
          "301": {
            "$ref": "#/components/responses/moved_permanently"
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "410": {
            "$ref": "#/components/responses/gone"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "issues",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "patch": {
        "summary": "Update an issue",
        "description": "Issue owners and users with push access can edit an issue.",
        "tags": [
          "issues"
        ],
        "operationId": "issues/update",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/issues#update-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue-number"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ],
                    "description": "The title of the issue.",
                    "nullable": true
                  },
                  "body": {
                    "type": "string",
                    "description": "The contents of the issue.",
                    "nullable": true
                  },
                  "assignee": {
                    "type": "string",
                    "nullable": true,
                    "description": "Username to assign to this issue. **This field is deprecated.**"
                  },
                  "state": {
                    "type": "string",
                    "description": "The open or closed state of the issue.",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "state_reason": {
                    "type": "string",
                    "enum": [
                      "completed",
                      "not_planned",
                      "reopened"
                    ],
                    "nullable": true,
                    "description": "The reason for the state change. Ignored unless `state` is changed.",
                    "example": "not_planned"
                  },
                  "milestone": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer",
                        "description": "The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped."
                      }
                    ],
                    "nullable": true
                  },
                  "labels": {
                    "type": "array",
                    "description": "Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string",
                              "nullable": true
                            },
                            "color": {
                              "type": "string",
                              "nullable": true
                            }
                          }
                        }
                      ]
                    }
                  },
                  "assignees": {
                    "type": "array",
                    "description": "Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "title": "Found a bug",
                    "body": "I'm having a problem with this.",
                    "assignees": [
                      "octocat"
                    ],
                    "milestone": 1,
                    "state": "open",
                    "labels": [
                      "bug"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue"
                  }
                }
              }
            }
          },
          "301": {
            "$ref": "#/components/responses/moved_permanently"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "410": {
            "$ref": "#/components/responses/gone"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "issues",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
      "post": {
        "summary": "Add assignees to an issue",
        "description": "Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.",
        "tags": [
          "issues"
        ],
        "operationId": "issues/add-assignees",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/issues#add-assignees-to-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue-number"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assignees": {
                    "type": "array",
                    "description": "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "assignees": [
                      "hubot",
                      "other_user"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "issues",
          "subcategory": "assignees"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/keys": {
      "get": {
        "summary": "List deploy keys",
        "description": "",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-deploy-keys",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/deploy-keys#list-deploy-keys"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/deploy-key"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deploy-key-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "deploy-keys"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "post": {
        "summary": "Create a deploy key",
        "description": "You can create a read-only deploy key.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-deploy-key",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/deploy-keys#create-a-deploy-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "A name for the key."
                  },
                  "key": {
                    "type": "string",
                    "description": "The contents of the key."
                  },
                  "read_only": {
                    "type": "boolean",
                    "description": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://docs.github.com/github-ae@latest/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://docs.github.com/github-ae@latest/articles/permission-levels-for-a-user-account-repository/).\""
                  }
                },
                "required": [
                  "key"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "title": "octocat@octomac",
                    "key": "ssh-rsa AAA...",
                    "read_only": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy-key"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deploy-key"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/keys/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "deploy-keys"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/keys/{key_id}": {
      "get": {
        "summary": "Get a deploy key",
        "description": "",
        "tags": [
          "repos"
        ],
        "operationId": "repos/get-deploy-key",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/deploy-keys#get-a-deploy-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/key-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy-key"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deploy-key"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "deploy-keys"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/notifications": {
      "get": {
        "summary": "List repository notifications for the authenticated user",
        "description": "Lists all notifications for the current user in the specified repository.",
        "tags": [
          "activity"
        ],
        "operationId": "activity/list-repo-notifications-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/activity#list-repository-notifications-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/all"
          },
          {
            "$ref": "#/components/parameters/participating"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/before"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/thread"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/thread-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "activity",
          "subcategory": "notifications"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls": {
      "get": {
        "summary": "List pull requests",
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github-ae@latest/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "tags": [
          "pulls"
        ],
        "operationId": "pulls/list",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/pulls#list-pull-requests"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "state",
            "description": "Either `open`, `closed`, or `all` to filter by state.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "name": "head",
            "description": "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "base",
            "description": "Filter pulls by base branch name. Example: `gh-pages`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "description": "What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "popularity",
                "long-running"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pull-request-simple"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-simple-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "pulls",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "post": {
        "summary": "Create a pull request",
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github-ae@latest/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n\nThis endpoint triggers [notifications](https://docs.github.com/github-ae@latest/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/github-ae@latest/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\" for details.",
        "tags": [
          "pulls"
        ],
        "operationId": "pulls/create",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/pulls#create-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the new pull request. Required unless `issue` is specified."
                  },
                  "head": {
                    "type": "string",
                    "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`."
                  },
                  "base": {
                    "type": "string",
                    "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository."
                  },
                  "body": {
                    "type": "string",
                    "description": "The contents of the pull request."
                  },
                  "maintainer_can_modify": {
                    "type": "boolean",
                    "description": "Indicates whether [maintainers can modify](https://docs.github.com/github-ae@latest/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request."
                  },
                  "draft": {
                    "type": "boolean",
                    "description": "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://docs.github.com/github-ae@latest/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more."
                  },
                  "issue": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1,
                    "description": "An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified."
                  }
                },
                "required": [
                  "head",
                  "base"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "title": "Amazing new feature",
                    "body": "Please pull these awesome changes in!",
                    "head": "octocat:new-feature",
                    "base": "master"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "triggersNotification": true,
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "pulls",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
      "post": {
        "summary": "Create a review comment for a pull request",
        "description": "\nCreates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://docs.github.com/github-ae@latest/rest/reference/issues#create-an-issue-comment).\" We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.\n\nThe `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.\n\n**Note:** The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n\nThis endpoint triggers [notifications](https://docs.github.com/github-ae@latest/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/github-ae@latest/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.",
        "tags": [
          "pulls"
        ],
        "operationId": "pulls/create-review-comment",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/pulls#create-a-review-comment-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull-number"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The text of the review comment."
                  },
                  "commit_id": {
                    "type": "string",
                    "description": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`."
                  },
                  "path": {
                    "type": "string",
                    "description": "The relative path to the file that necessitates a comment."
                  },
                  "position": {
                    "type": "integer",
                    "description": "**This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.",
                    "deprecated": true,
                    "x-github": {
                      "deprecationDate": "2022-11-01"
                    }
                  },
                  "side": {
                    "type": "string",
                    "description": "In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://docs.github.com/github-ae@latest/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.",
                    "enum": [
                      "LEFT",
                      "RIGHT"
                    ]
                  },
                  "line": {
                    "type": "integer",
                    "description": "The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to."
                  },
                  "start_line": {
                    "type": "integer",
                    "description": "**Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/github-ae@latest/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation."
                  },
                  "start_side": {
                    "type": "string",
                    "description": "**Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/github-ae@latest/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.",
                    "enum": [
                      "LEFT",
                      "RIGHT",
                      "side"
                    ]
                  },
                  "in_reply_to": {
                    "type": "integer",
                    "example": 2,
                    "description": "The ID of the review comment to reply to. To find the ID of a review comment with [\"List review comments on a pull request\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored."
                  }
                },
                "required": [
                  "body",
                  "commit_id",
                  "path",
                  "line"
                ]
              },
              "examples": {
                "example-for-a-multi-line-comment": {
                  "summary": "Example for a multi-line comment",
                  "value": {
                    "body": "Great stuff!",
                    "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "path": "file1.txt",
                    "start_line": 1,
                    "start_side": "RIGHT",
                    "line": 2,
                    "side": "RIGHT"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review-comment"
                },
                "examples": {
                  "example-for-a-multi-line-comment": {
                    "$ref": "#/components/examples/pull-request-review-comment-example-for-a-multi-line-comment"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "triggersNotification": true,
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "pulls",
          "subcategory": "comments"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases": {
      "post": {
        "summary": "Create a release",
        "description": "Users with push access to the repository can create a release.\n\nThis endpoint triggers [notifications](https://docs.github.com/github-ae@latest/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/github-ae@latest/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-release",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/releases/releases#create-a-release"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_name": {
                    "type": "string",
                    "description": "The name of the tag."
                  },
                  "target_commitish": {
                    "type": "string",
                    "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the release."
                  },
                  "body": {
                    "type": "string",
                    "description": "Text describing the contents of the tag."
                  },
                  "draft": {
                    "type": "boolean",
                    "description": "`true` to create a draft (unpublished) release, `false` to create a published one.",
                    "default": false
                  },
                  "prerelease": {
                    "type": "boolean",
                    "description": "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
                    "default": false
                  }
                },
                "required": [
                  "tag_name"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "tag_name": "v1.0.0",
                    "target_commitish": "master",
                    "name": "v1.0.0",
                    "body": "Description of the release",
                    "draft": false,
                    "prerelease": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/release"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/releases/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "triggersNotification": true,
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "releases"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{release_id}": {
      "patch": {
        "summary": "Update a release",
        "description": "Users with push access to the repository can edit a release.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/update-release",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#update-a-release"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/release-id"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_name": {
                    "type": "string",
                    "description": "The name of the tag."
                  },
                  "target_commitish": {
                    "type": "string",
                    "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the release."
                  },
                  "body": {
                    "type": "string",
                    "description": "Text describing the contents of the tag."
                  },
                  "draft": {
                    "type": "boolean",
                    "description": "`true` makes the release a draft, and `false` publishes the release."
                  },
                  "prerelease": {
                    "type": "boolean",
                    "description": "`true` to identify the release as a prerelease, `false` to identify the release as a full release."
                  }
                }
              },
              "examples": {
                "default": {
                  "value": {
                    "tag_name": "v1.0.0",
                    "target_commitish": "master",
                    "name": "v1.0.0",
                    "body": "Description of the release",
                    "draft": false,
                    "prerelease": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/release"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": "releases"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{release_id}/reactions": {
      "get": {
        "summary": "List reactions for a release",
        "description": "List the reactions to a [release](https://docs.github.com/github-ae@latest/rest/reference/repos#releases).",
        "tags": [
          "reactions"
        ],
        "operationId": "reactions/list-for-release",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/reactions/#list-reactions-for-a-release"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/release-id"
          },
          {
            "name": "content",
            "description": "Returns a single [reaction type](https://docs.github.com/github-ae@latest/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "laugh",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reaction"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "415": {
            "$ref": "#/components/responses/preview_header_missing"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "reactions",
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\nTo access the API you must provide a custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types) in the `Accept` header:\n```shell\napplication/vnd.github.squirrel-girl-preview\n```\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://docs.github.com/github-ae@latest/rest/reference/reactions) reactions."
            }
          ]
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/secret-scanning/alerts": {
      "get": {
        "summary": "List secret scanning alerts for a repository",
        "description": "Lists secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.",
        "tags": [
          "secret-scanning"
        ],
        "operationId": "secret-scanning/list-alerts-for-repo",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/secret-scanning-alert-state"
          },
          {
            "$ref": "#/components/parameters/secret-scanning-alert-secret-type"
          },
          {
            "$ref": "#/components/parameters/secret-scanning-alert-resolution"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per-page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/secret-scanning-alert"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/secret-scanning-alert-list"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Repository is public or secret scanning is disabled for the repository"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "secret-scanning",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": {
      "get": {
        "summary": "Get a secret scanning alert",
        "description": "Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.",
        "tags": [
          "secret-scanning"
        ],
        "operationId": "secret-scanning/get-alert",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/secret-scanning#get-a-secret-scanning-alert"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/alert-number"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/secret-scanning-alert"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/secret-scanning-alert-open"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "404": {
            "description": "Repository is public, or secret scanning is disabled for the repository, or the resource is not found"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "secret-scanning",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a secret scanning alert",
        "description": "Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.",
        "operationId": "secret-scanning/update-alert",
        "tags": [
          "secret-scanning"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/secret-scanning#update-a-secret-scanning-alert"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/alert-number"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "$ref": "#/components/schemas/secret-scanning-alert-state"
                  },
                  "resolution": {
                    "$ref": "#/components/schemas/secret-scanning-alert-resolution"
                  },
                  "resolution_comment": {
                    "$ref": "#/components/schemas/secret-scanning-alert-resolution-comment"
                  }
                },
                "required": [
                  "state"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "state": "resolved",
                    "resolution": "false_positive"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/secret-scanning-alert"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/secret-scanning-alert-resolved"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, resolution comment is invalid or the resolution was not changed."
          },
          "404": {
            "description": "Repository is public, or secret scanning is disabled for the repository, or the resource is not found"
          },
          "422": {
            "description": "State does not match the resolution or resolution comment"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "enabledForGitHubApps": true,
          "githubCloudOnly": false,
          "category": "secret-scanning"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/transfer": {
      "post": {
        "summary": "Transfer a repository",
        "description": "A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/github-ae@latest/articles/about-repository-transfers/).",
        "tags": [
          "repos"
        ],
        "operationId": "repos/transfer",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#transfer-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_owner": {
                    "type": "string",
                    "description": "The username or organization name the repository will be transferred to."
                  },
                  "team_ids": {
                    "type": "array",
                    "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "new_owner"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "new_owner": "github",
                    "team_ids": [
                      12,
                      345
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/minimal-repository"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/repos/{template_owner}/{template_repo}/generate": {
      "post": {
        "summary": "Create a repository using a template",
        "description": "Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/github-ae@latest/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://docs.github.com/github-ae@latest/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.\n*   `repo` scope to create a private repository",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-using-template",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#create-a-repository-using-a-template"
        },
        "parameters": [
          {
            "name": "template_owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner": {
                    "type": "string",
                    "description": "The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the new repository."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the new repository."
                  },
                  "include_all_branches": {
                    "type": "boolean",
                    "description": "Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.",
                    "default": false
                  },
                  "private": {
                    "type": "boolean",
                    "description": "Either `true` to create a new private repository or `false` to create a new public one.",
                    "default": false
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "default": {
                  "value": {
                    "owner": "octocat",
                    "name": "Hello-World",
                    "description": "This is your first repository",
                    "include_all_branches": false,
                    "private": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-3"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "repos",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/search/code": {
      "get": {
        "summary": "Search code",
        "description": "Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/github-ae@latest/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n\n`q=addClass+in:file+language:js+repo:jquery/jquery`\n\nThis query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n\n#### Considerations for code search\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\nlanguage:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.\n\nThis endpoint requires you to authenticate and limits you to 10 requests per minute.",
        "tags": [
          "search"
        ],
        "operationId": "search/code",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/search#search-code"
        },
        "parameters": [
          {
            "name": "q",
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub AE. The REST API supports the same qualifiers as the web interface for GitHub AE. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/github-ae@latest/rest/reference/search#constructing-a-search-query). See \"[Searching code](https://docs.github.com/github-ae@latest/search-github/searching-on-github/searching-code)\" for a detailed list of qualifiers.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "deprecated": true,
            "description": "**This field is deprecated.** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub AE search infrastructure. Default: [best match](https://docs.github.com/github-ae@latest/rest/reference/search#ranking-search-results)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "indexed"
              ]
            }
          },
          {
            "name": "order",
            "description": "**This field is deprecated.** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. ",
            "in": "query",
            "deprecated": true,
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ],
              "default": "desc"
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "incomplete_results",
                    "items"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "incomplete_results": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/code-search-result-item"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-search-result-item-paginated"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "search",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/search/commits": {
      "get": {
        "summary": "Search commits",
        "description": "Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\nmetadata](https://docs.github.com/github-ae@latest/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n`q=repo:octocat/Spoon-Knife+css`",
        "tags": [
          "search"
        ],
        "operationId": "search/commits",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/search#search-commits"
        },
        "parameters": [
          {
            "name": "q",
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub AE. The REST API supports the same qualifiers as the web interface for GitHub AE. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/github-ae@latest/rest/reference/search#constructing-a-search-query). See \"[Searching commits](https://docs.github.com/github-ae@latest/search-github/searching-on-github/searching-commits)\" for a detailed list of qualifiers.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "description": "Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/github-ae@latest/rest/reference/search#ranking-search-results)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "author-date",
                "committer-date"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "incomplete_results",
                    "items"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "incomplete_results": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/commit-search-result-item"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/commit-search-result-item-paginated"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "search",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/search/issues": {
      "get": {
        "summary": "Search issues and pull requests",
        "description": "Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\nsearch results, see [Text match metadata](https://docs.github.com/github-ae@latest/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\n`q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n\nThis query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.\n\n**Note:** For [user-to-server](https://docs.github.com/github-ae@latest/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see \"[Searching only issues or pull requests](https://docs.github.com/github-ae@latest/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).\"",
        "tags": [
          "search"
        ],
        "operationId": "search/issues-and-pull-requests",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/search#search-issues-and-pull-requests"
        },
        "parameters": [
          {
            "name": "q",
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub AE. The REST API supports the same qualifiers as the web interface for GitHub AE. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/github-ae@latest/rest/reference/search#constructing-a-search-query). See \"[Searching issues and pull requests](https://docs.github.com/github-ae@latest/search-github/searching-on-github/searching-issues-and-pull-requests)\" for a detailed list of qualifiers.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "description": "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/github-ae@latest/rest/reference/search#ranking-search-results)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "comments",
                "reactions",
                "reactions-+1",
                "reactions--1",
                "reactions-smile",
                "reactions-thinking_face",
                "reactions-heart",
                "reactions-tada",
                "interactions",
                "created",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "incomplete_results",
                    "items"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "incomplete_results": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/issue-search-result-item"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-search-result-item-paginated"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          },
          "503": {
            "$ref": "#/components/responses/service_unavailable"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "search",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/teams/{team_id}/repos": {
      "get": {
        "summary": "List team repositories (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/github-ae@latest/rest/reference/teams#list-team-repositories) endpoint.",
        "tags": [
          "teams"
        ],
        "operationId": "teams/list-repos-legacy",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/teams/#list-team-repositories-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/team-id"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "removalDate": "2021-02-01",
          "deprecationDate": "2020-01-21",
          "category": "teams",
          "subcategory": null
        },
        "deprecated": true,
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/teams/{team_id}/repos/{owner}/{repo}": {
      "get": {
        "summary": "Check team permissions for a repository (Legacy)",
        "description": "**Note**: Repositories inherited through a parent team will also be checked.\n\n**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/github-ae@latest/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types/) via the `Accept` header:",
        "tags": [
          "teams"
        ],
        "operationId": "teams/check-permissions-for-repo-legacy",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/teams/#check-team-permissions-for-a-repository-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/team-id"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "Alternative response with extra repository information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-repository"
                },
                "examples": {
                  "alternative-response-with-extra-repository-information": {
                    "$ref": "#/components/examples/team-repository-alternative-response-with-extra-repository-information"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Response if repository is managed by this team"
          },
          "404": {
            "description": "Not Found if repository is not managed by this team"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "removalDate": "2021-02-01",
          "deprecationDate": "2020-01-21",
          "category": "teams",
          "subcategory": null
        },
        "deprecated": true,
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/user/installations": {
      "get": {
        "summary": "List app installations accessible to the user access token",
        "description": "Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/github-ae@latest/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/list-installations-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "You can find the permissions for the installation under the `permissions` key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "installations"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "installations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/installation"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-installation-for-auth-user-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": "installations"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/user/installations/{installation_id}/repositories": {
      "get": {
        "summary": "List repositories accessible to the user access token",
        "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/github-ae@latest/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe access the user has to each repository is included in the hash under the `permissions` key.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/list-installation-repos-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#list-repositories-accessible-to-the-user-access-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/installation-id"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "The access the user has to each repository is included in the hash under the `permissions` key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "total_count",
                    "repositories"
                  ],
                  "properties": {
                    "total_count": {
                      "type": "integer"
                    },
                    "repository_selection": {
                      "type": "string"
                    },
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/repository"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": "installations"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/user/issues": {
      "get": {
        "summary": "List user account issues assigned to the authenticated user",
        "description": "List issues across owned and member repositories assigned to the authenticated user.\n\n**Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/github-ae@latest/rest/reference/pulls#list-pull-requests)\" endpoint.",
        "tags": [
          "issues"
        ],
        "operationId": "issues/list-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user"
        },
        "parameters": [
          {
            "name": "filter",
            "description": "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "assigned",
                "created",
                "mentioned",
                "subscribed",
                "repos",
                "all"
              ],
              "default": "assigned"
            }
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "name": "sort",
            "description": "What to sort results by.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            }
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-with-repo-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "issues",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/user/migrations": {
      "get": {
        "summary": "List user migrations",
        "description": "Lists all migrations a user has started.",
        "tags": [
          "migrations"
        ],
        "operationId": "migrations/list-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/migrations/users#list-user-migrations"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/migration"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "migrations",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "post": {
        "summary": "Start a user migration",
        "description": "Initiates the generation of a user migration archive.",
        "tags": [
          "migrations"
        ],
        "operationId": "migrations/start-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/migrations/users#start-a-user-migration"
        },
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "lock_repositories": {
                    "description": "Lock the repositories being migrated at the start of the migration",
                    "example": true,
                    "readOnly": false,
                    "type": "boolean"
                  },
                  "exclude_metadata": {
                    "description": "Indicates whether metadata should be excluded and only git source should be included for the migration.",
                    "example": true,
                    "readOnly": false,
                    "type": "boolean"
                  },
                  "exclude_git_data": {
                    "description": "Indicates whether the repository git data should be excluded from the migration.",
                    "example": true,
                    "readOnly": false,
                    "type": "boolean"
                  },
                  "exclude_attachments": {
                    "description": "Do not include attachments in the migration",
                    "example": true,
                    "readOnly": false,
                    "type": "boolean"
                  },
                  "exclude_releases": {
                    "description": "Do not include releases in the migration",
                    "example": true,
                    "readOnly": false,
                    "type": "boolean"
                  },
                  "exclude_owner_projects": {
                    "description": "Indicates whether projects owned by the organization or users should be excluded.",
                    "example": true,
                    "readOnly": false,
                    "type": "boolean"
                  },
                  "org_metadata_only": {
                    "type": "boolean",
                    "example": true,
                    "description": "Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).",
                    "default": false
                  },
                  "exclude": {
                    "description": "Exclude attributes from the API response to improve performance",
                    "example": [
                      "repositories"
                    ],
                    "readOnly": false,
                    "type": "array",
                    "items": {
                      "description": "Allowed values that can be passed to the exclude param.",
                      "enum": [
                        "repositories"
                      ],
                      "example": "repositories",
                      "type": "string"
                    }
                  },
                  "repositories": {
                    "type": "array",
                    "items": {
                      "description": "Repository path, owner and name",
                      "example": "acme/widgets",
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "repositories"
                ],
                "type": "object"
              },
              "examples": {
                "default": {
                  "value": {
                    "repositories": [
                      "octocat/Hello-World"
                    ],
                    "lock_repositories": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/migration"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration-2"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "migrations",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/user/migrations/{migration_id}/repositories": {
      "get": {
        "summary": "List repositories for a user migration",
        "description": "Lists all the repositories for this user migration.",
        "tags": [
          "migrations"
        ],
        "operationId": "migrations/list-repos-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/migrations/users#list-repositories-for-a-user-migration"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/migration-id"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "migrations",
          "subcategory": "users"
        },
        "x-octokit": {
          "changes": [
            {
              "type": "OPERATION",
              "date": "2021-10-05",
              "before": {
                "operationId": "migrations/list-repos-for-user"
              }
            }
          ],
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/user/repos": {
      "get": {
        "summary": "List repositories for the authenticated user",
        "description": "Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#list-repositories-for-the-authenticated-user"
        },
        "parameters": [
          {
            "name": "visibility",
            "description": "Limit results to repositories with the specified visibility.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "internal",
                "private"
              ],
              "default": "all"
            }
          },
          {
            "name": "affiliation",
            "description": "Comma-separated list of values. Can include:  \n * `owner`: Repositories that are owned by the authenticated user.  \n * `collaborator`: Repositories that the user has been added to as a collaborator.  \n * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "owner,collaborator,organization_member"
            }
          },
          {
            "name": "type",
            "description": "Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "owner",
                "internal",
                "private",
                "member"
              ],
              "default": "all"
            }
          },
          {
            "name": "sort",
            "description": "The property to short the results by.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "pushed",
                "full_name"
              ],
              "default": "full_name"
            }
          },
          {
            "name": "direction",
            "description": "The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/since-repo-date"
          },
          {
            "$ref": "#/components/parameters/before-repo-date"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-items-default-response"
                  }
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "repos",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      },
      "post": {
        "summary": "Create a repository for the authenticated user",
        "description": "Creates a new repository for the authenticated user.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://docs.github.com/github-ae@latest/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.\n*   `repo` scope to create a private repository.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/create-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#create-a-repository-for-the-authenticated-user"
        },
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the repository.",
                    "type": "string",
                    "example": "Team Environment"
                  },
                  "description": {
                    "description": "A short description of the repository.",
                    "type": "string"
                  },
                  "homepage": {
                    "description": "A URL with more information about the repository.",
                    "type": "string"
                  },
                  "private": {
                    "description": "Whether the repository is private.",
                    "default": false,
                    "type": "boolean"
                  },
                  "has_issues": {
                    "description": "Whether issues are enabled.",
                    "default": true,
                    "type": "boolean",
                    "example": true
                  },
                  "has_projects": {
                    "description": "Whether projects are enabled.",
                    "default": true,
                    "type": "boolean",
                    "example": true
                  },
                  "has_wiki": {
                    "description": "Whether the wiki is enabled.",
                    "default": true,
                    "type": "boolean",
                    "example": true
                  },
                  "has_discussions": {
                    "description": "Whether discussions are enabled.",
                    "default": false,
                    "type": "boolean",
                    "example": true
                  },
                  "team_id": {
                    "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
                    "type": "integer"
                  },
                  "auto_init": {
                    "description": "Whether the repository is initialized with a minimal README.",
                    "default": false,
                    "type": "boolean"
                  },
                  "gitignore_template": {
                    "description": "The desired language or platform to apply to the .gitignore.",
                    "example": "Haskell",
                    "type": "string"
                  },
                  "license_template": {
                    "description": "The license keyword of the open source license for this repository.",
                    "example": "mit",
                    "type": "string"
                  },
                  "allow_squash_merge": {
                    "description": "Whether to allow squash merges for pull requests.",
                    "default": true,
                    "type": "boolean",
                    "example": true
                  },
                  "allow_merge_commit": {
                    "description": "Whether to allow merge commits for pull requests.",
                    "default": true,
                    "type": "boolean",
                    "example": true
                  },
                  "allow_rebase_merge": {
                    "description": "Whether to allow rebase merges for pull requests.",
                    "default": true,
                    "type": "boolean",
                    "example": true
                  },
                  "allow_auto_merge": {
                    "description": "Whether to allow Auto-merge to be used on pull requests.",
                    "default": false,
                    "type": "boolean",
                    "example": false
                  },
                  "delete_branch_on_merge": {
                    "description": "Whether to delete head branches when pull requests are merged",
                    "default": false,
                    "type": "boolean",
                    "example": false
                  },
                  "squash_merge_commit_title": {
                    "type": "string",
                    "enum": [
                      "PR_TITLE",
                      "COMMIT_OR_PR_TITLE"
                    ],
                    "description": "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit)."
                  },
                  "squash_merge_commit_message": {
                    "type": "string",
                    "enum": [
                      "PR_BODY",
                      "COMMIT_MESSAGES",
                      "BLANK"
                    ],
                    "description": "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message."
                  },
                  "merge_commit_title": {
                    "type": "string",
                    "enum": [
                      "PR_TITLE",
                      "MERGE_MESSAGE"
                    ],
                    "description": "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name)."
                  },
                  "merge_commit_message": {
                    "type": "string",
                    "enum": [
                      "PR_BODY",
                      "PR_TITLE",
                      "BLANK"
                    ],
                    "description": "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message."
                  },
                  "has_downloads": {
                    "description": "Whether downloads are enabled.",
                    "default": true,
                    "type": "boolean",
                    "example": true
                  },
                  "is_template": {
                    "description": "Whether this repository acts as a template that can be used to generate new repositories.",
                    "default": false,
                    "type": "boolean",
                    "example": true
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              },
              "examples": {
                "default": {
                  "value": {
                    "name": "Hello-World",
                    "description": "This is your first repo!",
                    "homepage": "https://github.com",
                    "private": false,
                    "is_template": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "422": {
            "$ref": "#/components/responses/validation_failed"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "repos",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/user/repository_invitations": {
      "get": {
        "summary": "List repository invitations for the authenticated user",
        "description": "When authenticating as a user, this endpoint will list all currently open repository invitations for that user.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-invitations-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/repository-invitation"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-invitation-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "collaborators",
          "subcategory": "invitations"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/user/starred": {
      "get": {
        "summary": "List repositories starred by the authenticated user",
        "description": "Lists repositories the authenticated user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.",
        "tags": [
          "activity"
        ],
        "operationId": "activity/list-repos-starred-by-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/activity#list-repositories-starred-by-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/sort-starred"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/repository"
                  }
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/repository-items-default-response"
                  }
                }
              },
              "application/vnd.github.v3.star+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/starred-repository"
                  }
                },
                "examples": {
                  "alternative-response-with-star-creation-timestamps": {
                    "$ref": "#/components/examples/starred-repository-items-alternative-response-with-star-creation-timestamps"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "activity",
          "subcategory": "starring"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/user/subscriptions": {
      "get": {
        "summary": "List repositories watched by the authenticated user",
        "description": "Lists repositories the authenticated user is watching.",
        "tags": [
          "activity"
        ],
        "operationId": "activity/list-watched-repos-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/activity#list-repositories-watched-by-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          },
          "304": {
            "$ref": "#/components/responses/not_modified"
          },
          "401": {
            "$ref": "#/components/responses/requires_authentication"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "activity",
          "subcategory": "watching"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/users/{username}/events": {
      "get": {
        "summary": "List events for the authenticated user",
        "description": "If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.",
        "tags": [
          "activity"
        ],
        "operationId": "activity/list-events-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/activity#list-events-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/user-events-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "activity",
          "subcategory": "events"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/users/{username}/events/orgs/{org}": {
      "get": {
        "summary": "List organization events for the authenticated user",
        "description": "This is the user's organization dashboard. You must be authenticated as the user to view this.",
        "tags": [
          "activity"
        ],
        "operationId": "activity/list-org-events-for-authenticated-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/activity#list-organization-events-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/user-org-events-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "activity",
          "subcategory": "events"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/users/{username}/installation": {
      "get": {
        "summary": "Get a user installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find the user’s installation information.\n\nYou must use a [JWT](https://docs.github.com/github-ae@latest/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "tags": [
          "apps"
        ],
        "operationId": "apps/get-user-installation",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#get-a-user-installation-for-the-authenticated-app"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/installation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installation"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "apps",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/users/{username}/repos": {
      "get": {
        "summary": "List repositories for a user",
        "description": "Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.",
        "tags": [
          "repos"
        ],
        "operationId": "repos/list-for-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/repos#list-repositories-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "name": "type",
            "description": "Limit results to repositories of the specified type.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "owner",
                "member"
              ],
              "default": "owner"
            }
          },
          {
            "name": "sort",
            "description": "The property to sort the results by.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "pushed",
                "full_name"
              ],
              "default": "full_name"
            }
          },
          {
            "name": "direction",
            "description": "The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "repos",
          "subcategory": null
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/users/{username}/subscriptions": {
      "get": {
        "summary": "List repositories watched by a user",
        "description": "Lists repositories a user is watching.",
        "tags": [
          "activity"
        ],
        "operationId": "activity/list-repos-watched-by-user",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/activity#list-repositories-watched-by-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per-page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/link"
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "activity",
          "subcategory": "watching"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "changed"
            }
          }
        }
      }
    },
    "/users/{username}/suspended": {
      "put": {
        "summary": "Suspend a user",
        "description": "If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/github-ae@latest/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.\n\nYou can suspend any user account except your own.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs).\"",
        "operationId": "enterprise-admin/suspend-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "The reason the user is being suspended. This message will be logged in the [audit log](https://docs.github.com/github-ae@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to \"Suspended via API by _SITE\\_ADMINISTRATOR_\", where _SITE\\_ADMINISTRATOR_ is the person who performed the action."
                  }
                }
              },
              "examples": {
                "reason": {
                  "value": {
                    "reason": "Suspended during leave of absence."
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      },
      "delete": {
        "summary": "Unsuspend a user",
        "description": "If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/github-ae@latest/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.",
        "operationId": "enterprise-admin/unsuspend-user",
        "tags": [
          "enterprise-admin"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#unsuspend-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "The reason the user is being unsuspended. This message will be logged in the [audit log](https://docs.github.com/github-ae@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to \"Unsuspended via API by _SITE\\_ADMINISTRATOR_\", where _SITE\\_ADMINISTRATOR_ is the person who performed the action."
                  }
                }
              },
              "examples": {
                "reason": {
                  "value": {
                    "reason": "Unsuspended after leave of absence."
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "enterprise-admin",
          "subcategory": "users"
        },
        "x-octokit": {
          "diff": {
            "api.github.com": {
              "type": "added"
            }
          }
        }
      }
    }
  },
  "x-webhooks": {
    "branch-protection-rule-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to branch protection rules. For more information, see \"[About protected branches](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches).\" For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#branchprotectionrule) or \"[Branch protection](https://docs.github.com/github-ae@latest/rest/branches/branch-protection)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Administration\" repository permission",
        "description": "A branch protection rule was created.",
        "operationId": "branch-protection-rule/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#branch-protection-rule"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-branch-protection-rule-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "branch-protection-rule",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "branch-protection-rule-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to branch protection rules. For more information, see \"[About protected branches](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches).\" For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#branchprotectionrule) or \"[Branch protection](https://docs.github.com/github-ae@latest/rest/branches/branch-protection)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Administration\" repository permission.",
        "description": "A branch protection rule was deleted.",
        "operationId": "branch-protection-rule/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#branch-protection-rule"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-branch-protection-rule-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "branch-protection-rule",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "branch-protection-rule-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to branch protection rules. For more information, see \"[About protected branches](https://docs.github.com/github-ae@latest/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches).\" For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#branchprotectionrule) or \"[Branch protection](https://docs.github.com/github-ae@latest/rest/branches/branch-protection)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Administration\" repository permission.",
        "description": "A branch protection rule was edited.",
        "operationId": "branch-protection-rule/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#branch-protection-rule"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-branch-protection-rule-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "branch-protection-rule",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "check-run-completed": {
      "post": {
        "summary": "This event occurs when there is activity relating to a check run. For information about check runs, see \"[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api).\" For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or \"[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)\" in the REST API documentation.\n\nFor activity relating to check suites, use the `check-suite` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Checks\" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the \"Checks\" permission. GitHub Apps with write-level access for the \"Checks\" permission are automatically subscribed to this webhook event.\n\nRepository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.\n\n**Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.",
        "description": "A check run was completed, and a conclusion is available.",
        "operationId": "check-run/completed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#check_run"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-run-completed"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/check-run-completed"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-run-completed-form-encoded"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/check-run-completed-form-encoded"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "check_run",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "check-run-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a check run. For information about check runs, see \"[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api).\" For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or \"[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)\" in the REST API documentation.\n\nFor activity relating to check suites, use the `check-suite` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Checks\" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the \"Checks\" permission. GitHub Apps with write-level access for the \"Checks\" permission are automatically subscribed to this webhook event.\n\nRepository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.\n\n**Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.",
        "description": "A new check run was created.",
        "operationId": "check-run/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#check_run"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-run-created"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/check-run-created"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-run-created-form-encoded"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/check-run-created-form-encoded"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "check_run",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "check-run-requested-action": {
      "post": {
        "summary": "This event occurs when there is activity relating to a check run. For information about check runs, see \"[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api).\" For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or \"[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)\" in the REST API documentation.\n\nFor activity relating to check suites, use the `check-suite` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Checks\" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the \"Checks\" permission. GitHub Apps with write-level access for the \"Checks\" permission are automatically subscribed to this webhook event.\n\nRepository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.\n\n**Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.",
        "description": "A check run completed, and someone requested a followup action that your app provides. Only the GitHub App someone requests to perform an action will receive the `requested_action` payload. For more information, see \"[Creating CI tests with the Checks API](https://docs.github.com/github-ae@latest/developers/apps/guides/creating-ci-tests-with-the-checks-api).\"",
        "operationId": "check-run/requested-action",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#check_run"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-run-requested-action"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/check-run-requested-action"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-run-requested-action-form-encoded"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/check-run-requested-action-form-encoded"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "check_run",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "check-run-rerequested": {
      "post": {
        "summary": "This event occurs when there is activity relating to a check run. For information about check runs, see \"[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api).\" For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checkrun) or \"[Check Runs](https://docs.github.com/github-ae@latest/rest/checks/runs)\" in the REST API documentation.\n\nFor activity relating to check suites, use the `check-suite` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Checks\" repository permission. To receive the `rerequested` and `requested_action` event types, the app must have at least write-level access for the \"Checks\" permission. GitHub Apps with write-level access for the \"Checks\" permission are automatically subscribed to this webhook event.\n\nRepository and organization webhooks only receive payloads for the `created` and `completed` event types in repositories.\n\n**Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.",
        "description": "Someone requested to re-run a check run. Only the GitHub App that someone requests to re-run the check will receive the `rerequested` payload.",
        "operationId": "check-run/rerequested",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#check_run"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-run-rerequested"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/check-run-rerequested"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-run-rerequested-form-encoded"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/check-run-rerequested-form-encoded"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "check_run",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "check-suite-completed": {
      "post": {
        "summary": "This event occurs when there is activity relating to a check suite. For information about check suites, see \"[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api).\" For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checksuite) or \"[Check Suites](https://docs.github.com/github-ae@latest/rest/checks/suites)\" in the REST API documentation.\n\nFor activity relating to check runs, use the `check_run` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Checks\" permission. To receive the `requested` and `rerequested` event types, the app must have at lease write-level access for the \"Checks\" permission. GitHub Apps with write-level access for the \"Checks\" permission are automatically subscribed to this webhook event.\n\nRepository and organization webhooks only receive payloads for the `completed` event types in repositories.\n\n**Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.",
        "description": "All check runs in a check suite have completed, and a conclusion is available.",
        "operationId": "check-suite/completed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#check-suite"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-suite-completed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "check-suite",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "check-suite-requested": {
      "post": {
        "summary": "This event occurs when there is activity relating to a check suite. For information about check suites, see \"[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api).\" For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checksuite) or \"[Check Suites](https://docs.github.com/github-ae@latest/rest/checks/suites)\" in the REST API documentation.\n\nFor activity relating to check runs, use the `check_run` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Checks\" permission. To receive the `requested` and `rerequested` event types, the app must have at lease write-level access for the \"Checks\" permission. GitHub Apps with write-level access for the \"Checks\" permission are automatically subscribed to this webhook event.\n\nRepository and organization webhooks only receive payloads for the `completed` event types in repositories.\n\n**Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.",
        "description": "Someone requested to run a check suite. By default, check suites are automatically created when you create a check run. For more information, see [the GraphQL API documentation for creating a check run](https://docs.github.com/github-ae@latest/graphql/reference/mutations#createcheckrun) or \"[Create a check run](https://docs.github.com/github-ae@latest/rest/checks/runs#create-a-check-run)\" in the REST API documentation.",
        "operationId": "check-suite/requested",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#check-suite"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-suite-requested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "check-suite",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "check-suite-rerequested": {
      "post": {
        "summary": "This event occurs when there is activity relating to a check suite. For information about check suites, see \"[Getting started with the Checks API](https://docs.github.com/github-ae@latest/rest/guides/getting-started-with-the-checks-api).\" For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#checksuite) or \"[Check Suites](https://docs.github.com/github-ae@latest/rest/checks/suites)\" in the REST API documentation.\n\nFor activity relating to check runs, use the `check_run` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Checks\" permission. To receive the `requested` and `rerequested` event types, the app must have at lease write-level access for the \"Checks\" permission. GitHub Apps with write-level access for the \"Checks\" permission are automatically subscribed to this webhook event.\n\nRepository and organization webhooks only receive payloads for the `completed` event types in repositories.\n\n**Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.",
        "description": "Someone requested to re-run the check runs in a check suite. For more information, see [the GraphQL API documentation for creating a check suite](https://docs.github.com/github-ae@latest/graphql/reference/mutations#createchecksuite) or \"[Create a check suite](https://docs.github.com/github-ae@latest/rest/checks/suites#create-a-check-suite)\" in the REST API documentation.",
        "operationId": "check-suite/rerequested",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#check-suite"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-check-suite-rerequested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "check-suite",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "code-scanning-alert-appeared-in-branch": {
      "post": {
        "summary": "This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \"[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\" and \"[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\" For information about the API to manage code scanning, see \"[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Code scanning alerts\" repository permission.",
        "description": "A previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.",
        "operationId": "code-scanning-alert/appeared-in-branch",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#code-scanning-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-code-scanning-alert-appeared-in-branch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "code-scanning-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "code-scanning-alert-closed-by-user": {
      "post": {
        "summary": "This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \"[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\" and \"[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\" For information about the API to manage code scanning, see \"[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Code scanning alerts\" repository permission.",
        "description": "Someone closed a code scanning alert.",
        "operationId": "code-scanning-alert/closed-by-user",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#code-scanning-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-code-scanning-alert-closed-by-user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "code-scanning-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "code-scanning-alert-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \"[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\" and \"[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\" For information about the API to manage code scanning, see \"[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Code scanning alerts\" repository permission.",
        "description": "A code scanning alert was created in a repository.",
        "operationId": "code-scanning-alert/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#code-scanning-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-code-scanning-alert-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "code-scanning-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "code-scanning-alert-fixed": {
      "post": {
        "summary": "This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \"[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\" and \"[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\" For information about the API to manage code scanning, see \"[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Code scanning alerts\" repository permission.",
        "description": "A code scanning alert was fixed in a branch by a commit.",
        "operationId": "code-scanning-alert/fixed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#code-scanning-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-code-scanning-alert-fixed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "code-scanning-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "code-scanning-alert-reopened": {
      "post": {
        "summary": "This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \"[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\" and \"[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\" For information about the API to manage code scanning, see \"[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Code scanning alerts\" repository permission.",
        "description": "A previously fixed code scanning alert reappeared in a branch.",
        "operationId": "code-scanning-alert/reopened",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#code-scanning-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-code-scanning-alert-reopened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "code-scanning-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "code-scanning-alert-reopened-by-user": {
      "post": {
        "summary": "This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \"[About code scanning](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\" and \"[About code scanning alerts](https://docs.github.com/github-ae@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\" For information about the API to manage code scanning, see \"[Code scanning](https://docs.github.com/github-ae@latest/rest/code-scanning)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Code scanning alerts\" repository permission.",
        "description": "Someone reopened a code scanning alert.",
        "operationId": "code-scanning-alert/reopened-by-user",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#code-scanning-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-code-scanning-alert-reopened-by-user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "code-scanning-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "commit-comment-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to commit comments. For more information about commit comments, see \"[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request).\" For information about the APIs to manage commit comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#commitcomment) or \"[Commit comments](https://docs.github.com/github-ae@latest/rest/commits/comments)\" in the REST API documentation.\n\nFor activity relating to comments on pull request reviews, use the `pull_request_review_comment` event. For activity relating to issue comments, use the `issue_comment` event. For activity relating to discussion comments, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "description": "Someone commented on a commit.",
        "operationId": "commit-comment/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#commit-comment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-commit-comment-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "commit-comment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "create": {
      "post": {
        "summary": "This event occurs when a Git branch or tag is created.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.\n\n**Note**: This event will not occur when more than three tags are created at once.",
        "operationId": "create",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#create"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-create"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "create",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "delete": {
      "post": {
        "summary": "This event occurs when a Git branch or tag is deleted.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.\n\n**Note**: This event will not occur when more than three tags are deleted at once.",
        "operationId": "delete",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#delete"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-delete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "delete",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "dependabot-alert-auto-dismissed": {
      "post": {
        "summary": "This event occurs when there is activity relating to Dependabot alerts.\n\nFor more information about Dependabot alerts, see \"[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\" For information about the API to manage Dependabot alerts, see \"[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Dependabot alerts\" repository permission.\n\n**Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.",
        "description": "A Dependabot alert was automatically closed.",
        "operationId": "dependabot-alert/auto-dismissed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/webhooks-and-events/webhooks/webhook-events-and-payloads#dependabot-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-dependabot-alert-auto-dismissed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "dependabot-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "dependabot-alert-auto-reopened": {
      "post": {
        "summary": "This event occurs when there is activity relating to Dependabot alerts.\n\nFor more information about Dependabot alerts, see \"[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\" For information about the API to manage Dependabot alerts, see \"[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Dependabot alerts\" repository permission.\n\n**Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.",
        "description": "A Dependabot alert was automatically reopened.",
        "operationId": "dependabot-alert/auto-reopened",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/webhooks-and-events/webhooks/webhook-events-and-payloads#dependabot-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-dependabot-alert-auto-reopened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "dependabot-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "dependabot-alert-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to Dependabot alerts.\n\nFor more information about Dependabot alerts, see \"[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\" For information about the API to manage Dependabot alerts, see \"[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Dependabot alerts\" repository permission.\n\n**Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.",
        "description": "A manifest file change introduced a vulnerable dependency, or a GitHub Security Advisory was published and an existing dependency was found to be vulnerable.",
        "operationId": "dependabot-alert/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#dependabot-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-dependabot-alert-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "dependabot-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "dependabot-alert-dismissed": {
      "post": {
        "summary": "This event occurs when there is activity relating to Dependabot alerts.\n\nFor more information about Dependabot alerts, see \"[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\" For information about the API to manage Dependabot alerts, see \"[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Dependabot alerts\" repository permission.\n\n**Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.",
        "description": "A Dependabot alert was manually closed.",
        "operationId": "dependabot-alert/dismissed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#dependabot-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-dependabot-alert-dismissed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "dependabot-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "dependabot-alert-fixed": {
      "post": {
        "summary": "This event occurs when there is activity relating to Dependabot alerts.\n\nFor more information about Dependabot alerts, see \"[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\" For information about the API to manage Dependabot alerts, see \"[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Dependabot alerts\" repository permission.\n\n**Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.",
        "description": "A manifest file change removed a vulnerability.",
        "operationId": "dependabot-alert/fixed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#dependabot-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-dependabot-alert-fixed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "dependabot-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "dependabot-alert-reintroduced": {
      "post": {
        "summary": "This event occurs when there is activity relating to Dependabot alerts.\n\nFor more information about Dependabot alerts, see \"[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\" For information about the API to manage Dependabot alerts, see \"[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Dependabot alerts\" repository permission.\n\n**Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.",
        "description": "A manifest file change introduced a vulnerable dependency that had previously been fixed.",
        "operationId": "dependabot-alert/reintroduced",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#dependabot-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-dependabot-alert-reintroduced"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "dependabot-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "dependabot-alert-reopened": {
      "post": {
        "summary": "This event occurs when there is activity relating to Dependabot alerts.\n\nFor more information about Dependabot alerts, see \"[About Dependabot alerts](https://docs.github.com/github-ae@latest/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\" For information about the API to manage Dependabot alerts, see \"[Dependabot alerts](https://docs.github.com/github-ae@latest/rest/dependabot/alerts)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Dependabot alerts\" repository permission.\n\n**Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.",
        "description": "A Dependabot alert was manually reopened.",
        "operationId": "dependabot-alert/reopened",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#dependabot-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-dependabot-alert-reopened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "dependabot-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "deploy-key-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to deploy keys. For more information, see \"[Managing deploy keys](https://docs.github.com/github-ae@latest/developers/overview/managing-deploy-keys).\" For information about the APIs to manage deploy keys, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deploykey) or \"[Deploy keys](https://docs.github.com/github-ae@latest/rest/deploy-keys)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Deployments\" repository permission.",
        "description": "A deploy key was created.",
        "operationId": "deploy-key/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#deploy-key"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-deploy-key-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "deploy-key",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "deploy-key-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to deploy keys. For more information, see \"[Managing deploy keys](https://docs.github.com/github-ae@latest/developers/overview/managing-deploy-keys).\" For information about the APIs to manage deploy keys, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deploykey) or \"[Deploy keys](https://docs.github.com/github-ae@latest/rest/deploy-keys)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Deployments\" repository permission.",
        "description": "A deploy key was deleted.",
        "operationId": "deploy-key/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#deploy-key"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-deploy-key-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "deploy-key",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "deployment-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to deployments. For more information, see \"[About deployments](https://docs.github.com/github-ae@latest/actions/deployment/about-deployments).\" For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deployment) or \"[Deployments](https://docs.github.com/github-ae@latest/rest/deployments/deployments)\" in the REST API documentation.\n\nFor activity relating to deployment status, use the `deployment_status` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Deployments\" repository permission.",
        "description": "A deployment was created.",
        "operationId": "deployment/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#deployment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-deployment-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "deployment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "deployment-protection-rule-requested": {
      "post": {
        "summary": "This event occurs when there is activity relating to deployment protection rules. For more information, see \"[Using environments for deployment](https://docs.github.com/github-ae@latest/actions/deployment/targeting-different-environments/using-environments-for-deployment#environment-protection-rules).\" For information about the API to manage deployment protection rules, see [the REST API documentation](https://docs.github.com/github-ae@latest/rest/deployments/environments).\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Deployments\" repository permission.",
        "description": "A deployment protection rule was requested for an environment.",
        "operationId": "deployment-protection-rule/requested",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#deployment_protection_rule"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-deployment-protection-rule-requested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "deployment-protection-rule",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "deployment-status-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to deployment statuses. For more information, see \"[About deployments](https://docs.github.com/github-ae@latest/actions/deployment/about-deployments).\" For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#deployment) or \"[Deployments](https://docs.github.com/github-ae@latest/rest/deployments/deployments)\" in the REST API documentation.\n\nFor activity relating to deployment creation, use the `deployment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Deployments\" repository permission.",
        "description": "A new deployment status was created.",
        "operationId": "deployment-status/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#deployment-status"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-deployment-status-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "deployment-status",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-answered": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A comment on the discussion was marked as the answer.",
        "operationId": "discussion/answered",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-answered"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-category-changed": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "The category of a discussion was changed.",
        "operationId": "discussion/category-changed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-category-changed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-comment-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a discussion as opposed to comments on a discussion, use the `discussion` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A comment on a discussion was created.",
        "operationId": "discussion-comment/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion-comment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-comment-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion-comment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-comment-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a discussion as opposed to comments on a discussion, use the `discussion` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A comment on a discussion was deleted.",
        "operationId": "discussion-comment/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion-comment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-comment-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion-comment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-comment-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a discussion as opposed to comments on a discussion, use the `discussion` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A comment on a discussion was edited.",
        "operationId": "discussion-comment/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion-comment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-comment-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion-comment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A discussion was created.",
        "operationId": "discussion/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A discussion was deleted.",
        "operationId": "discussion/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "The title or body on a discussion was edited, or the category of the discussion was changed.",
        "operationId": "discussion/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-labeled": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A label was added to a discussion.",
        "operationId": "discussion/labeled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-labeled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-locked": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A discussion was locked.",
        "operationId": "discussion/locked",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-locked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-pinned": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A discussion was pinned.",
        "operationId": "discussion/pinned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-pinned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-transferred": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A discussion was transferred to another repository.",
        "operationId": "discussion/transferred",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-transferred"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-unanswered": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A comment on the discussion was unmarked as the answer.",
        "operationId": "discussion/unanswered",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-unanswered"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-unlabeled": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A label was removed from a discussion.",
        "operationId": "discussion/unlabeled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-unlabeled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-unlocked": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A discussion was unlocked.",
        "operationId": "discussion/unlocked",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-unlocked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "discussion-unpinned": {
      "post": {
        "summary": "This event occurs when there is activity relating to a discussion. For more information about discussions, see \"[GitHub Discussions](https://docs.github.com/github-ae@latest/discussions).\" For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#discussion).\n\nFor activity relating to a comment on a discussion, use the `discussion_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Discussions\" repository permission.\n\n**Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.",
        "description": "A discussion was unpinned.",
        "operationId": "discussion/unpinned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-discussion-unpinned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "discussion",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "fork": {
      "post": {
        "summary": "This event occurs when someone forks a repository. For more information, see \"[Fork a repo](https://docs.github.com/github-ae@latest/get-started/quickstart/fork-a-repo).\" For information about the API to manage forks, see \"[Forks](https://docs.github.com/github-ae@latest/rest/repos/forks)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "operationId": "fork",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#fork"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-fork"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "fork",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "github-app-authorization-revoked": {
      "post": {
        "summary": "This event occurs when a user revokes their authorization of a GitHub App. For more information, see \"[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\" For information about the API to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or \"[Apps](https://docs.github.com/github-ae@latest/rest/apps)\" in the REST API documentation.\n\nA GitHub App receives this webhook by default and cannot unsubscribe from this event.\n\nAnyone can revoke their authorization of a GitHub App from their [GitHub account settings page](https://github.com/settings/apps/authorizations). Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the `401 Bad Credentials` error. For details about user-to-server requests, which require GitHub App authorization, see \"[Identifying and authorizing users for GitHub Apps](https://docs.github.com/github-ae@latest/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/).\"",
        "description": "Someone revoked their authorization of a GitHub App.",
        "operationId": "github-app-authorization/revoked",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#github-app-authorization"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-github-app-authorization-revoked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "github-app-authorization",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "gollum": {
      "post": {
        "summary": "This event occurs when someone creates or updates a wiki page. For more information, see \"[About wikis](https://docs.github.com/github-ae@latest/communities/documenting-your-project-with-wikis/about-wikis).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "operationId": "gollum",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#gollum"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-gollum"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "gollum",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "installation-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.\n\nFor more information about GitHub Apps, see \"[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\" For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or \"[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)\" in the REST API documentation.",
        "description": "Someone installed a GitHub App on a user or organization account.",
        "operationId": "installation/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-installation-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "installation",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "installation-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.\n\nFor more information about GitHub Apps, see \"[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\" For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or \"[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)\" in the REST API documentation.",
        "description": "Someone uninstalled a GitHub App from their user or organization account.",
        "operationId": "installation/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-installation-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "installation",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "installation-new-permissions-accepted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.\n\nFor more information about GitHub Apps, see \"[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\" For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or \"[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)\" in the REST API documentation.",
        "description": "Someone granted new permissions to a GitHub App.",
        "operationId": "installation/new-permissions-accepted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-installation-new-permissions-accepted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "installation",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "installation-repositories-added": {
      "post": {
        "summary": "This event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.\n\nFor more information about GitHub Apps, see \"[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\" For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or \"[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)\" in the REST API documentation.",
        "description": "A GitHub App installation was granted access to one or more repositories.",
        "operationId": "installation-repositories/added",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation-repositories"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-installation-repositories-added"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "installation-repositories",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "installation-repositories-removed": {
      "post": {
        "summary": "This event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.\n\nFor more information about GitHub Apps, see \"[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\" For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or \"[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)\" in the REST API documentation.",
        "description": "Access to one or more repositories was revoked for a GitHub App installation.",
        "operationId": "installation-repositories/removed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation-repositories"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-installation-repositories-removed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "installation-repositories",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "installation-suspend": {
      "post": {
        "summary": "This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.\n\nFor more information about GitHub Apps, see \"[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\" For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or \"[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)\" in the REST API documentation.",
        "description": "Someone blocked access by a GitHub App to their user or organization account.",
        "operationId": "installation/suspend",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-installation-suspend"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "installation",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "installation-target-renamed": {
      "post": {
        "summary": "This event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see \"[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\" For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or \"[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)\" in the REST API documentation.",
        "description": "Somebody renamed the user or organization account that a GitHub App is installed on.",
        "operationId": "installation-target/renamed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation-target"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-installation-target-renamed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "installation-target",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "installation-unsuspend": {
      "post": {
        "summary": "This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.\n\nFor more information about GitHub Apps, see \"[About apps](https://docs.github.com/github-ae@latest/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\" For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#app) or \"[Apps](https://docs.github.com/github-ae@latest/rest/reference/apps)\" in the REST API documentation.",
        "description": "A GitHub App that was blocked from accessing a user or organization account was given access the account again.",
        "operationId": "installation/unsuspend",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-installation-unsuspend"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "installation",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "issue-comment-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)\" and \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issuecomment) or \"[Issue comments](https://docs.github.com/github-ae@latest/rest/issues/comments)\" in the REST API documentation.\n\nFor activity relating to an issue as opposed to comments on an issue, use the `issue` event. For activity related to pull request reviews or pull request review comments, use the `pull_request_review` or `pull_request_review_comment` events. For more information about the different types of pull request comments, see \"[Working with comments](https://docs.github.com/github-ae@latest/rest/guides/working-with-comments).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" or \"Pull requests\" repository permissions.",
        "description": "A comment on an issue or pull request was created.",
        "operationId": "issue-comment/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issue-comment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issue-comment-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issue-comment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issue-comment-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)\" and \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issuecomment) or \"[Issue comments](https://docs.github.com/github-ae@latest/rest/issues/comments)\" in the REST API documentation.\n\nFor activity relating to an issue as opposed to comments on an issue, use the `issue` event. For activity related to pull request reviews or pull request review comments, use the `pull_request_review` or `pull_request_review_comment` events. For more information about the different types of pull request comments, see \"[Working with comments](https://docs.github.com/github-ae@latest/rest/guides/working-with-comments).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" or \"Pull requests\" repository permissions.",
        "description": "A comment on an issue or pull request was deleted.",
        "operationId": "issue-comment/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issue-comment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issue-comment-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issue-comment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issue-comment-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues)\" and \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issuecomment) or \"[Issue comments](https://docs.github.com/github-ae@latest/rest/issues/comments)\" in the REST API documentation.\n\nFor activity relating to an issue as opposed to comments on an issue, use the `issue` event. For activity related to pull request reviews or pull request review comments, use the `pull_request_review` or `pull_request_review_comment` events. For more information about the different types of pull request comments, see \"[Working with comments](https://docs.github.com/github-ae@latest/rest/guides/working-with-comments).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" or \"Pull requests\" repository permissions.",
        "description": "A comment on an issue or pull request was edited.",
        "operationId": "issue-comment/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issue-comment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issue-comment-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issue-comment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-assigned": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "An issue was assigned to a user.",
        "operationId": "issues/assigned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-assigned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-closed": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "An issue was closed.",
        "operationId": "issues/closed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-closed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "An issue was deleted.",
        "operationId": "issues/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-demilestoned": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "An issue was removed from a milestone.",
        "operationId": "issues/demilestoned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-demilestoned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "The title or body on an issue was edited.",
        "operationId": "issues/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-labeled": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "A label was added to an issue.",
        "operationId": "issues/labeled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-labeled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-locked": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "Conversation on an issue was locked. For more information, see \"[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations).\"",
        "operationId": "issues/locked",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-locked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-milestoned": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "An issue was added to a milestone.",
        "operationId": "issues/milestoned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-milestoned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-opened": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "An issue was created. When a closed issue is reopened, the action will be `reopened` instead.",
        "operationId": "issues/opened",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-opened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-pinned": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "An issue was pinned to a repository. For more information, see \"[Pinning an issue to your repository](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository).\"",
        "operationId": "issues/pinned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-pinned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-reopened": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "A closed issue was reopened.",
        "operationId": "issues/reopened",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-reopened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-transferred": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "An issue was transferred to another repository. For more information, see \"[Transferring an issue to another repository](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository).\"",
        "operationId": "issues/transferred",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-transferred"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-unassigned": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "A user was unassigned from an issue.",
        "operationId": "issues/unassigned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-unassigned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-unlabeled": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "A label was removed from an issue.",
        "operationId": "issues/unlabeled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-unlabeled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-unlocked": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "Conversation on an issue was locked. For more information, see \"[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations).\"",
        "operationId": "issues/unlocked",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-unlocked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "issues-unpinned": {
      "post": {
        "summary": "This event occurs when there is activity relating to an issue. For more information about issues, see \"[About issues](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/about-issues).\" For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#issue) or \"[Issues](https://docs.github.com/github-ae@latest/rest/issues)\" in the REST API documentation.\n\nFor activity relating to a comment on an issue, use the `issue_comment` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" repository permission.",
        "description": "An issue was unpinned from a repository. For more information, see \"[Pinning an issue to your repository](https://docs.github.com/github-ae@latest/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository).\"",
        "operationId": "issues/unpinned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-issues-unpinned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "issues",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "label-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to labels. For more information, see \"[Managing labels](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/managing-labels).\" For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#label) or \"[Labels](https://docs.github.com/github-ae@latest/rest/issues/labels)\" in the REST API documentation.\n\nIf you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the `labeled` or `unlabeled` action type for the `issues`, `pull_request`, or `discussion` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "A label was created.",
        "operationId": "label/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#label"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-label-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "label",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "label-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to labels. For more information, see \"[Managing labels](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/managing-labels).\" For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#label) or \"[Labels](https://docs.github.com/github-ae@latest/rest/issues/labels)\" in the REST API documentation.\n\nIf you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the `labeled` or `unlabeled` action type for the `issues`, `pull_request`, or `discussion` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "A label was deleted.",
        "operationId": "label/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#label"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-label-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "label",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "label-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to labels. For more information, see \"[Managing labels](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/managing-labels).\" For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#label) or \"[Labels](https://docs.github.com/github-ae@latest/rest/issues/labels)\" in the REST API documentation.\n\nIf you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the `labeled` or `unlabeled` action type for the `issues`, `pull_request`, or `discussion` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "A label's name, description, or color was changed.",
        "operationId": "label/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#label"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-label-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "label",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "member-added": {
      "post": {
        "summary": "This event occurs when there is activity relating to collaborators in a repository. For more information, see \"[Adding outside collaborators to repositories in your organization](https://docs.github.com/github-ae@latest/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization).\" For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repositorycollaboratorconnection) or \"[Collaborators](https://docs.github.com/github-ae@latest/rest/collaborators/collaborators)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "A GitHub user accepted an invitation to a repository.",
        "operationId": "member/added",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#member"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-member-added"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "member",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "member-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to collaborators in a repository. For more information, see \"[Adding outside collaborators to repositories in your organization](https://docs.github.com/github-ae@latest/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization).\" For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repositorycollaboratorconnection) or \"[Collaborators](https://docs.github.com/github-ae@latest/rest/collaborators/collaborators)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "Permissions were changed for a collaborator on a repository.",
        "operationId": "member/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#member"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-member-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "member",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "member-removed": {
      "post": {
        "summary": "This event occurs when there is activity relating to collaborators in a repository. For more information, see \"[Adding outside collaborators to repositories in your organization](https://docs.github.com/github-ae@latest/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization).\" For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repositorycollaboratorconnection) or \"[Collaborators](https://docs.github.com/github-ae@latest/rest/collaborators/collaborators)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "A collaborator was removed from a repository.",
        "operationId": "member/removed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#member"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-member-removed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "member",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "membership-added": {
      "post": {
        "summary": "This event occurs when there is activity relating to team membership. For more information, see \"[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams).\" For more information about the APIs to manage team memberships, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#team) or \"[Team members](https://docs.github.com/github-ae@latest/rest/teams/members)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "An organization member was added to a team.",
        "operationId": "membership/added",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-membership-added"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "membership",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "membership-removed": {
      "post": {
        "summary": "This event occurs when there is activity relating to team membership. For more information, see \"[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams).\" For more information about the API to manage team memberships, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#team) or \"[Team members](https://docs.github.com/github-ae@latest/rest/teams/members)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "An organization member was removed from a team.",
        "operationId": "membership/removed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-membership-removed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "membership",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "meta-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a webhook itself.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Meta\" app permission.",
        "description": "The webhook was deleted.",
        "operationId": "meta/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#meta"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-meta-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "meta",
          "supported-webhook-types": [
            "marketplace",
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "milestone-closed": {
      "post": {
        "summary": "This event occurs when there is activity relating to milestones. For more information, see \"[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones).\" For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or \"[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)\" in the REST API documentation.\n\nIf you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" or \"Pull requests\" repository permissions.",
        "description": "A milestone was closed.",
        "operationId": "milestone/closed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#milestone"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-milestone-closed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "milestone",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "milestone-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to milestones. For more information, see \"[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones).\" For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or \"[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)\" in the REST API documentation.\n\nIf you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" or \"Pull requests\" repository permissions.",
        "description": "A milestone was created.",
        "operationId": "milestone/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#milestone"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-milestone-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "milestone",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "milestone-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to milestones. For more information, see \"[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones).\" For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or \"[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)\" in the REST API documentation.\n\nIf you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" or \"Pull requests\" repository permissions.",
        "description": "A milestone was deleted.",
        "operationId": "milestone/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#milestone"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-milestone-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "milestone",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "milestone-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to milestones. For more information, see \"[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones).\" For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or \"[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)\" in the REST API documentation.\n\nIf you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" or \"Pull requests\" repository permissions.",
        "description": "A milestone was edited.",
        "operationId": "milestone/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#milestone"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-milestone-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "milestone",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "milestone-opened": {
      "post": {
        "summary": "This event occurs when there is activity relating to milestones. For more information, see \"[About milestones](https://docs.github.com/github-ae@latest/issues/using-labels-and-milestones-to-track-work/about-milestones).\" For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#milestone) or \"[Milestones](https://docs.github.com/github-ae@latest/rest/issues/milestones)\" in the REST API documentation.\n\nIf you want to receive an event when an issue or pull request is added to or removed from a milestone, use the `milestoned` or `demilestoned` action type for the `issues` or `pull_request` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Issues\" or \"Pull requests\" repository permissions.",
        "description": "A milestone was opened.",
        "operationId": "milestone/opened",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#milestone"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-milestone-opened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "milestone",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "organization-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to an organization and its members. For more information, see \"[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations).\" For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or \"[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)\" in the REST API documentation.\n\nIf you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "An organization was deleted.",
        "operationId": "organization/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#organization"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-organization-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "organization",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "organization-member-added": {
      "post": {
        "summary": "This event occurs when there is activity relating to an organization and its members. For more information, see \"[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations).\" For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or \"[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)\" in the REST API documentation.\n\nIf you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "A member accepted an invitation to join an organization.",
        "operationId": "organization/member-added",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#organization"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-organization-member-added"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "organization",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "organization-member-invited": {
      "post": {
        "summary": "This event occurs when there is activity relating to an organization and its members. For more information, see \"[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations).\" For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or \"[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)\" in the REST API documentation.\n\nIf you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "A member was invited to join the organization.",
        "operationId": "organization/member-invited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#organization"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-organization-member-invited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "organization",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "organization-member-removed": {
      "post": {
        "summary": "This event occurs when there is activity relating to an organization and its members. For more information, see \"[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations).\" For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or \"[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)\" in the REST API documentation.\n\nIf you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "A member was removed from the organization.",
        "operationId": "organization/member-removed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#organization"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-organization-member-removed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "organization",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "organization-renamed": {
      "post": {
        "summary": "This event occurs when there is activity relating to an organization and its members. For more information, see \"[About organizations](https://docs.github.com/github-ae@latest/organizations/collaborating-with-groups-in-organizations/about-organizations).\" For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#organization) or \"[Organizations](https://docs.github.com/github-ae@latest/rest/orgs)\" in the REST API documentation.\n\nIf you want to receive an event when a non-member is blocked or unblocked from an organization, use the `org_block` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "The name of an organization was changed.",
        "operationId": "organization/renamed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#organization"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-organization-renamed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "organization",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "package-published": {
      "post": {
        "summary": "This event occurs when there is activity relating to GitHub Packages. For more information, see \"[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages).\" For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or \"[Packages](https://docs.github.com/github-ae@latest/rest/packages)\" in the REST API documentation.\n\nTo install this event on a GitHub App, the app must have at least read-level access for the \"Packages\" repository permission.",
        "description": "A package was published to a registry.",
        "operationId": "package/published",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#package"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-package-published"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "package",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "package-updated": {
      "post": {
        "summary": "This event occurs when there is activity relating to GitHub Packages. For more information, see \"[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages).\" For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or \"[Packages](https://docs.github.com/github-ae@latest/rest/packages)\" in the REST API documentation.\n\nTo install this event on a GitHub App, the app must have at least read-level access for the \"Packages\" repository permission.",
        "description": "A previously published package was updated.",
        "operationId": "package/updated",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#package"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-package-updated"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "package",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "page-build": {
      "post": {
        "summary": "This event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see \"[Configuring a publishing source for your GitHub Pages site](https://docs.github.com/github-ae@latest/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site).\" For information about the API to manage GitHub Pages, see \"[Pages](https://docs.github.com/github-ae@latest/rest/pages)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pages\" repository permission.",
        "operationId": "page-build",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#page-build"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-page-build"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "page-build",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "ping": {
      "post": {
        "summary": "This event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.",
        "operationId": "ping",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#ping"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-ping"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/ping"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/webhook-ping-form-encoded"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/ping-form-encoded"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "ping",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app",
            "business",
            "marketplace"
          ]
        }
      }
    },
    "project-card-converted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a card on a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A note in a classic project was converted to an issue.",
        "operationId": "project-card/converted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project-card"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-card-converted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project-card",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-card-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a card on a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A card was added to a classic project.",
        "operationId": "project-card/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project-card"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-card-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project-card",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-card-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a card on a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A card on a classic project was deleted.",
        "operationId": "project-card/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project-card"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-card-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project-card",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-card-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to a card on a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A note on a classic project was edited.",
        "operationId": "project-card/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project-card"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-card-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project-card",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-card-moved": {
      "post": {
        "summary": "This event occurs when there is activity relating to a card on a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a project or a column on a project, use the `project` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A card on a classic project was moved to another column or to another position in its column.",
        "operationId": "project-card/moved",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project-card"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-card-moved"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project-card",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-closed": {
      "post": {
        "summary": "This event occurs when there is activity relating to a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A classic project was closed.",
        "operationId": "project/closed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-closed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-column-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a column on a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A column was added to a classic project.",
        "operationId": "project-column/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project-column"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-column-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project-column",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-column-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a column on a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A column was deleted from a classic project.",
        "operationId": "project-column/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project-column"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-column-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project-column",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-column-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to a column on a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "The name of a column on a classic project was changed.",
        "operationId": "project-column/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project-column"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-column-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project-column",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-column-moved": {
      "post": {
        "summary": "This event occurs when there is activity relating to a column on a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a project or a card on a project, use the `project` and `project_card` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A column was moved to a new position on a classic project.",
        "operationId": "project-column/moved",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project-column"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-column-moved"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project-column",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A classic project was created.",
        "operationId": "project/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A classic project was deleted.",
        "operationId": "project/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "The name or description of a classic project was changed.",
        "operationId": "project/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "project-reopened": {
      "post": {
        "summary": "This event occurs when there is activity relating to a classic project. For more information, see \"[About projects (classic)](https://docs.github.com/github-ae@latest/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\" For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#project) or \"[Projects (classic)](https://docs.github.com/github-ae@latest/rest/projects)\" in the REST API documentation.\n\nFor activity relating to a card or column on a project, use the `project_card` and `project_column` event. For activity relating to Projects instead of Projects (classic), use the `projects_v2` event instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" repository or organization permission.",
        "description": "A classic project was closed.",
        "operationId": "project/reopened",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#project"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-project-reopened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "project",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "projects-v2-closed": {
      "post": {
        "summary": "This event occurs when there is activity relating to an organization-level project. For more information, see \"[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\" For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).\n\nFor activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" organization permission.\n\n**Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).",
        "description": "A project in the organization was closed.",
        "operationId": "projects-v2/closed",
        "externalDocs": {
          "url": ""
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "project-v2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-projects-v2-project-closed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "projects_v2",
          "supported-webhook-types": [
            "organization"
          ]
        }
      }
    },
    "projects-v2-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to an organization-level project. For more information, see \"[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\" For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).\n\nFor activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" organization permission.\n\n**Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).",
        "description": "A project in the organization was created.",
        "operationId": "projects-v2/created",
        "externalDocs": {
          "url": ""
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "project-v2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-projects-v2-project-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "projects_v2",
          "supported-webhook-types": [
            "organization"
          ]
        }
      }
    },
    "projects-v2-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to an organization-level project. For more information, see \"[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\" For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).\n\nFor activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" organization permission.\n\n**Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).",
        "description": "A project in the organization was deleted.",
        "operationId": "projects-v2/deleted",
        "externalDocs": {
          "url": ""
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "project-v2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-projects-v2-project-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "projects_v2",
          "supported-webhook-types": [
            "organization"
          ]
        }
      }
    },
    "projects-v2-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to an organization-level project. For more information, see \"[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\" For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).\n\nFor activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" organization permission.\n\n**Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).",
        "description": "The title, description, or README of a project in the organization was changed.",
        "operationId": "projects-v2/edited",
        "externalDocs": {
          "url": ""
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "project-v2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-projects-v2-project-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "projects_v2",
          "supported-webhook-types": [
            "organization"
          ]
        }
      }
    },
    "projects-v2-reopened": {
      "post": {
        "summary": "This event occurs when there is activity relating to an organization-level project. For more information, see \"[About Projects](https://docs.github.com/github-ae@latest/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\" For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#projectv2).\n\nFor activity relating to a item on a project, use the `projects_v2_item` event. For activity relating to Projects (classic), use the `project`, project_card`, and `project_column` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Projects\" organization permission.\n\n**Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).",
        "description": "A project in the organization was reopened.",
        "operationId": "projects-v2/reopened",
        "externalDocs": {
          "url": ""
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "project-v2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-projects-v2-project-reopened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "projects_v2",
          "supported-webhook-types": [
            "organization"
          ]
        }
      }
    },
    "public": {
      "post": {
        "summary": "This event occurs when repository visibility changes from private to public. For more information, see \"[Setting repository visibility](https://docs.github.com/github-ae@latest/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/setting-repository-visibility).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "operationId": "public",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#public"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-public"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "public",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-assigned": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A pull request was assigned to a user.",
        "operationId": "pull-request/assigned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-assigned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-auto-merge-disabled": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "Auto merge was disabled for a pull request. For more information, see \"[Automatically merging a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request).\"",
        "operationId": "pull-request/auto-merge-disabled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-auto-merge-disabled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-auto-merge-enabled": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "Auto merge was enabled for a pull request. For more information, see \"[Automatically merging a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request).\"",
        "operationId": "pull-request/auto-merge-enabled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-auto-merge-enabled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-closed": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A pull request was closed. If `merged` is false in the webhook payload, the pull request was closed with unmerged commits. If `merged` is true in the webhook payload, the pull request was merged.",
        "operationId": "pull-request/closed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-closed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-converted-to-draft": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A pull request was converted to a draft. For more information, see \"[Changing the stage of a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request).\"",
        "operationId": "pull-request/converted-to-draft",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-converted-to-draft"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-demilestoned": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A pull request was removed from a milestone.",
        "operationId": "pull-request/demilestoned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-demilestoned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-edited": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "The title or body of a pull request was edited.",
        "operationId": "pull-request/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-labeled": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A label was added to a pull request.",
        "operationId": "pull-request/labeled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-labeled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-locked": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "Conversation on a pull request was locked. For more information, see \"[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations).\"",
        "operationId": "pull-request/locked",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-locked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-milestoned": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A pull request was added to a milestone.",
        "operationId": "pull-request/milestoned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-milestoned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-opened": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A pull request was created",
        "operationId": "pull-request/opened",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-opened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-ready-for-review": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A draft pull request was marked as ready for review. For more information, see \"[Changing the stage of a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request).\"",
        "operationId": "pull-request/ready-for-review",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-ready-for-review"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-reopened": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments,or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A previously closed pull request was reopened.",
        "operationId": "pull-request/reopened",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-reopened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-review-comment-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see \"[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request).\" For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewcomment) or \"[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request comments, or pull request review threads, use the `pull_request_review`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A comment on a pull request diff was created.",
        "operationId": "pull-request-review-comment/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request-review-comment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-review-comment-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request-review-comment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-review-comment-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see \"[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request).\" For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewcomment) or \"[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request comments, or pull request review threads, use the `pull_request_review`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A comment on a pull request diff was deleted.",
        "operationId": "pull-request-review-comment/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request-review-comment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-review-comment-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request-review-comment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-review-comment-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see \"[Commenting on a pull request](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request).\" For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewcomment) or \"[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request comments, or pull request review threads, use the `pull_request_review`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "The content of a comment on a pull request diff was changed.",
        "operationId": "pull-request-review-comment/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request-review-comment"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-review-comment-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request-review-comment",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-review-dismissed": {
      "post": {
        "summary": "This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see \"[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews).\" For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreview) or \"[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)\" in the REST API documentation.\n\nFor activity related to pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A review on a pull request was dismissed.",
        "operationId": "pull-request-review/dismissed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request-review"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-review-dismissed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request-review",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-review-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see \"[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews).\" For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreview) or \"[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)\" in the REST API documentation.\n\nFor activity related to pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "The body comment on a pull request review was edited.",
        "operationId": "pull-request-review/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request-review"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-review-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request-review",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-review-request-removed": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A request for review by a person or team was removed from a pull request.",
        "operationId": "pull-request/review-request-removed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-review-request-removed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-review-requested": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "Review by a person or team was requested for a pull request. For more information, see \"[Requesting a pull request review](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review).\"",
        "operationId": "pull-request/review-requested",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-review-requested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-review-submitted": {
      "post": {
        "summary": "This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see \"[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews).\" For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreview) or \"[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)\" in the REST API documentation.\n\nFor activity related to pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A review on a pull request was submitted.",
        "operationId": "pull-request-review/submitted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request-review"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-review-submitted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request-review",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-review-thread-resolved": {
      "post": {
        "summary": "This event occurs when there is activity relating to a comment thread on a pull request. For more information, see \"[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews).\" For information about the APIs to manage pull request review comment threads, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewthread) or \"[Pull request reviews](https://docs.github.com/github-ae@latest/rest/pulls/reviews)\" in the REST API documentation.\n\nFor activity related to pull request review comments, pull request comments, or pull request reviews, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A comment thread on a pull request was marked as resolved.",
        "operationId": "pull-request-review-thread/resolved",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request-review-thread"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-review-thread-resolved"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request-review-thread",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-review-thread-unresolved": {
      "post": {
        "summary": "This event occurs when there is activity relating to a comment thread on a pull request. For more information, see \"[About pull request reviews](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews).\" For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequestreviewthread) or \"[Pull request review comments](https://docs.github.com/github-ae@latest/rest/pulls/comments)\" in the REST API documentation.\n\nFor activity related to pull request review comments, pull request comments, or pull request reviews, use the `pull_request_review_comment`, `issue_comment`, or `pull_request_review` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A previously resolved comment thread on a pull request was marked as unresolved.",
        "operationId": "pull-request-review-thread/unresolved",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request-review-thread"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-review-thread-unresolved"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request-review-thread",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-synchronize": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A pull request's head branch was updated. For example, the head branch was updated from the base branch or new commits were pushed to the head branch.",
        "operationId": "pull-request/synchronize",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-synchronize"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-unassigned": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A user was unassigned from a pull request.",
        "operationId": "pull-request/unassigned",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-unassigned"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-unlabeled": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "A label was removed from a pull request.",
        "operationId": "pull-request/unlabeled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-unlabeled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "pull-request-unlocked": {
      "post": {
        "summary": "This event occurs when there is activity on a pull request. For more information, see \"[About pull requests](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\" For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#pullrequest) or \"[Pulls](https://docs.github.com/github-ae@latest/rest/pulls/pulls)\" in the REST API documentation.\n\nFor activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the `pull_request_review`, `pull_request_review_comment`, `issue_comment`, or `pull_request_review_thread` events instead.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Pull requests\" repository permission.",
        "description": "Conversation on a pull request was unlocked. For more information, see \"[Locking conversations](https://docs.github.com/github-ae@latest/communities/moderating-comments-and-conversations/locking-conversations).\"",
        "operationId": "pull-request/unlocked",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull-request"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-pull-request-unlocked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "pull-request",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "push": {
      "post": {
        "summary": "This event occurs when a commit or tag is pushed.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.\n\n**Note**: An event will not be created when more than three tags are pushed at once.",
        "operationId": "push",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-push"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "push",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "registry-package-published": {
      "post": {
        "summary": "This event occurs when there is activity relating to GitHub Packages. For more information, see \"[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages).\" For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or \"[Packages](https://docs.github.com/github-ae@latest/rest/packages)\" in the REST API documentation.\n\nTo install this event on a GitHub App, the app must have at least read-level access for the \"Packages\" repository permission.\n\n**Note**: GitHub recommends that you use the newer `package` event instead.",
        "description": "A package was published to a registry.",
        "operationId": "registry-package/published",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#registry-package"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-registry-package-published"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "registry-package",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "registry-package-updated": {
      "post": {
        "summary": "This event occurs when there is activity relating to GitHub Packages. For more information, see \"[Introduction to GitHub Packages](https://docs.github.com/github-ae@latest/packages/learn-github-packages/introduction-to-github-packages).\" For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#package) or \"[Packages](https://docs.github.com/github-ae@latest/rest/packages)\" in the REST API documentation.\n\nTo install this event on a GitHub App, the app must have at least read-level access for the \"Packages\" repository permission.\n\n**Note**: GitHub recommends that you use the newer `package` event instead",
        "description": "A package that was previously published to a registry was updated.",
        "operationId": "registry-package/updated",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#registry-package"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-registry-package-updated"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "registry-package",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "release-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to releases. For more information, see \"[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases).\" For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or \"[Releases](https://docs.github.com/github-ae@latest/rest/releases)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "description": "A draft was saved, or a release or pre-release was published without previously being saved as a draft.",
        "operationId": "release/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#release"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-release-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "release",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "release-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to releases. For more information, see \"[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases).\" For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or \"[Releases](https://docs.github.com/github-ae@latest/rest/packages)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "description": "A release, pre-release, or draft release was deleted.",
        "operationId": "release/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#release"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-release-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "release",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "release-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to releases. For more information, see \"[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases).\" For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or \"[Releases](https://docs.github.com/github-ae@latest/rest/packages)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "description": "The details of a release, pre-release, or draft release were edited. For more information, see \"[Managing releases in a repository](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/managing-releases-in-a-repository#editing-a-release).\"",
        "operationId": "release/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#release"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-release-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "release",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "release-prereleased": {
      "post": {
        "summary": "This event occurs when there is activity relating to releases. For more information, see \"[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases).\" For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or \"[Releases](https://docs.github.com/github-ae@latest/rest/packages)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "description": "A release was created and identified as a pre-release. A pre-release is a release that is not ready for production and may be unstable.",
        "operationId": "release/prereleased",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#release"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-release-prereleased"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "release",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "release-published": {
      "post": {
        "summary": "This event occurs when there is activity relating to releases. For more information, see \"[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases).\" For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or \"[Releases](https://docs.github.com/github-ae@latest/rest/packages)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "description": "A release, pre-release, or draft of a release was published.",
        "operationId": "release/published",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#release"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-release-published"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "release",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "release-released": {
      "post": {
        "summary": "This event occurs when there is activity relating to releases. For more information, see \"[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases).\" For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or \"[Releases](https://docs.github.com/github-ae@latest/rest/packages)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "description": "A release was published, or a pre-release was changed to a release.",
        "operationId": "release/released",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#release"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-release-released"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "release",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "release-unpublished": {
      "post": {
        "summary": "This event occurs when there is activity relating to releases. For more information, see \"[About releases](https://docs.github.com/github-ae@latest/repositories/releasing-projects-on-github/about-releases).\" For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#release) or \"[Releases](https://docs.github.com/github-ae@latest/rest/packages)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "description": "A release or pre-release was unpublished.",
        "operationId": "release/unpublished",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#release"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-release-unpublished"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "release",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "repository-anonymous-access-disabled": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "Someone disabled anonymous Git read access to the repository. For more information, see \"[Enabling anonymous Git read access for a repository](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/enabling-anonymous-git-read-access-for-a-repository).\"",
        "operationId": "repository/anonymous-access-disabled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#enterprise"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-anonymous-access-disabled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "app",
            "business",
            "organization",
            "repository"
          ]
        }
      }
    },
    "repository-anonymous-access-enabled": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "Someone enabled anonymous Git read access to the repository. For more information, see \"[Enabling anonymous Git read access for a repository](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/enabling-anonymous-git-read-access-for-a-repository).\"",
        "operationId": "repository/anonymous-access-enabled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#enterprise"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-anonymous-access-enabled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "app",
            "business",
            "organization",
            "repository"
          ]
        }
      }
    },
    "repository-archived": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "A repository was archived.",
        "operationId": "repository/archived",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-archived"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "repository-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "A repository was created.",
        "operationId": "repository/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "repository-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "A repository was deleted. GitHub Apps and repository webhooks will not receive this event.",
        "operationId": "repository/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "repository-dispatch-sample.collected": {
      "post": {
        "summary": "This event occurs when a GitHub App sends a `POST` request to `/repos/{owner}/{repo}/dispatches`. For more information, see [the REST API documentation for creating a repository dispatch event](https://docs.github.com/github-ae@latest/rest/repos/repos#create-a-repository-dispatch-event).\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "description": "The `event_type` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body.",
        "operationId": "repository-dispatch/sample.collected",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository-dispatch"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-dispatch-sample"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository-dispatch",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "repository-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "The topics, default branch, description, or homepage of a repository was changed.",
        "operationId": "repository/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "repository-privatized": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "The visibility of a repository was changed to `private`.",
        "operationId": "repository/privatized",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-privatized"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "repository-publicized": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "The visibility of a repository was changed to `public`.",
        "operationId": "repository/publicized",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-publicized"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "repository-renamed": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "The name of a repository was changed.",
        "operationId": "repository/renamed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-renamed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "repository-transferred": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "Ownership of the repository was transferred to a user or organization account. This event is only sent to the account where the ownership is transferred. To receive the `repository.transferred` event, the new owner account must have the GitHub App installed, and the App must be subscribed to \"Repository\" events.",
        "operationId": "repository/transferred",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-transferred"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "repository-unarchived": {
      "post": {
        "summary": "This event occurs when there is activity relating to repositories. For more information, see \"[About repositories](https://docs.github.com/github-ae@latest/repositories/creating-and-managing-repositories/about-repositories).\" For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#repository) or \"[Repositories](https://docs.github.com/github-ae@latest/rest/repos)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "A previously archived repository was unarchived.",
        "operationId": "repository/unarchived",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-repository-unarchived"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "repository",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "secret-scanning-alert-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see \"[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning).\" For information about the API to manage secret scanning alerts, see \"[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)\" in the REST API documentation.\n\nFor activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Secret scanning alerts\" repository permission.",
        "description": "A secret scanning alert was created.",
        "operationId": "secret-scanning-alert/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#secret-scanning-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-secret-scanning-alert-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "secret-scanning-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "secret-scanning-alert-location-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to the locations of a secret in a secret scanning alert.\n\nFor more information about secret scanning, see \"[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning).\" For information about the API to manage secret scanning alerts, see \"[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)\" in the REST API documentation.\n\nFor activity relating to secret scanning alerts, use the `secret_scanning_alert` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Secret scanning alerts\" repository permission.",
        "description": "A new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.",
        "operationId": "secret-scanning-alert-location/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#secret_scanning_alert_location"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-secret-scanning-alert-location-created"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/secret-scanning-alert-location-created"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/webhook-secret-scanning-alert-location-created-form-encoded"
              },
              "examples": {
                "default": {
                  "$ref": "#/components/examples/secret-scanning-alert-location-created-form-encoded"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": true,
          "category": "webhooks",
          "subcategory": "secret_scanning_alert_location",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "secret-scanning-alert-reopened": {
      "post": {
        "summary": "This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see \"[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning).\" For information about the API to manage secret scanning alerts, see \"[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)\" in the REST API documentation.\n\nFor activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Secret scanning alerts\" repository permission.",
        "description": "A previously closed secret scanning alert was reopened.",
        "operationId": "secret-scanning-alert/reopened",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#secret-scanning-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-secret-scanning-alert-reopened"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "secret-scanning-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "secret-scanning-alert-resolved": {
      "post": {
        "summary": "This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see \"[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning).\" For information about the API to manage secret scanning alerts, see \"[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)\" in the REST API documentation.\n\nFor activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Secret scanning alerts\" repository permission.",
        "description": "A secret scanning alert was closed.",
        "operationId": "secret-scanning-alert/resolved",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#secret-scanning-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-secret-scanning-alert-resolved"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "secret-scanning-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "secret-scanning-alert-revoked": {
      "post": {
        "summary": "This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see \"[About secret scanning](https://docs.github.com/github-ae@latest/code-security/secret-scanning/about-secret-scanning).\" For information about the API to manage secret scanning alerts, see \"[Secret scanning](https://docs.github.com/github-ae@latest/rest/secret-scanning)\" in the REST API documentation.\n\nFor activity relating to secret scanning alert locations, use the `secret_scanning_alert_location` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Secret scanning alerts\" repository permission.",
        "description": "A secret scanning alert was marked as revoked.",
        "operationId": "secret-scanning-alert/revoked",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#secret-scanning-alert"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-secret-scanning-alert-revoked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "secret-scanning-alert",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "security-and-analysis": {
      "post": {
        "summary": "This event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see \"[GitHub security features](https://docs.github.com/github-ae@latest/code-security/getting-started/github-security-features).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Administration\" repository permission.",
        "operationId": "security-and-analysis",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#security-and-analysis"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-security-and-analysis"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "security-and-analysis",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "sponsorship-cancelled": {
      "post": {
        "summary": "This event occurs when there is activity relating to a sponsorship listing. For more information, see \"[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\" For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).\n\nYou can only create a sponsorship webhook on GitHub.com. For more information, see \"[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\"",
        "description": "A sponsorship was cancelled and the last billing cycle has ended.\n\nThis event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.",
        "operationId": "sponsorship/cancelled",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#sponsorship"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-sponsorship-cancelled"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "sponsorship",
          "supported-webhook-types": [
            "sponsors_listing"
          ]
        }
      }
    },
    "sponsorship-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to a sponsorship listing. For more information, see \"[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\" For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).\n\nYou can only create a sponsorship webhook on GitHub.com. For more information, see \"[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\"",
        "description": "A sponsor created a sponsorship for a sponsored account. This event occurs once the payment is successfully processed.",
        "operationId": "sponsorship/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#sponsorship"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-sponsorship-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "sponsorship",
          "supported-webhook-types": [
            "sponsors_listing"
          ]
        }
      }
    },
    "sponsorship-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to a sponsorship listing. For more information, see \"[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\" For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).\n\nYou can only create a sponsorship webhook on GitHub.com. For more information, see \"[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\"",
        "description": "A monthly sponsor changed who can see their sponsorship. If you recognize your sponsors publicly, you may want to update your sponsor recognition to reflect the change when this event occurs.",
        "operationId": "sponsorship/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#sponsorship"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-sponsorship-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "sponsorship",
          "supported-webhook-types": [
            "sponsors_listing"
          ]
        }
      }
    },
    "sponsorship-pending-cancellation": {
      "post": {
        "summary": "This event occurs when there is activity relating to a sponsorship listing. For more information, see \"[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\" For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).\n\nYou can only create a sponsorship webhook on GitHub.com. For more information, see \"[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\"",
        "description": "A sponsor scheduled a cancellation for their sponsorship. The cancellation will become effective on their next billing date.\n\nThis event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.",
        "operationId": "sponsorship/pending-cancellation",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#sponsorship"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-sponsorship-pending-cancellation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "sponsorship",
          "supported-webhook-types": [
            "sponsors_listing"
          ]
        }
      }
    },
    "sponsorship-pending-tier-change": {
      "post": {
        "summary": "This event occurs when there is activity relating to a sponsorship listing. For more information, see \"[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\" For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).\n\nYou can only create a sponsorship webhook on GitHub.com. For more information, see \"[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\"",
        "description": "A sponsor scheduled a downgrade to a lower sponsorship tier. The new tier will become effective on their next billing date.",
        "operationId": "sponsorship/pending-tier-change",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#sponsorship"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-sponsorship-pending-tier-change"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "sponsorship",
          "supported-webhook-types": [
            "sponsors_listing"
          ]
        }
      }
    },
    "sponsorship-tier-changed": {
      "post": {
        "summary": "This event occurs when there is activity relating to a sponsorship listing. For more information, see \"[About GitHub Sponsors](https://docs.github.com/github-ae@latest/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\" For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#sponsorship).\n\nYou can only create a sponsorship webhook on GitHub.com. For more information, see \"[Configuring webhooks for events in your sponsored account](https://docs.github.com/github-ae@latest/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\"",
        "description": "A sponsor changed the tier of their sponsorship and the change has taken effect. If a sponsor upgraded their tier, the change took effect immediately. If a sponsor downgraded their tier, the change took effect at the beginning of the sponsor's next billing cycle.",
        "operationId": "sponsorship/tier-changed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#sponsorship"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-sponsorship-tier-changed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "sponsorship",
          "supported-webhook-types": [
            "sponsors_listing"
          ]
        }
      }
    },
    "star-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to repository stars. For more information about stars, see \"[Saving repositories with stars](https://docs.github.com/github-ae@latest/get-started/exploring-projects-on-github/saving-repositories-with-stars).\" For information about the APIs to manage stars, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#starredrepositoryconnection) or \"[Starring](https://docs.github.com/github-ae@latest/rest/activity/starring)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "Someone starred a repository.",
        "operationId": "star/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#star"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-star-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "star",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "star-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to repository stars. For more information about stars, see \"[Saving repositories with stars](https://docs.github.com/github-ae@latest/get-started/exploring-projects-on-github/saving-repositories-with-stars).\" For information about the APIs to manage stars, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#starredrepositoryconnection) or \"[Starring](https://docs.github.com/github-ae@latest/rest/activity/starring)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "Someone unstarred the repository.",
        "operationId": "star/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#star"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-star-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "star",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "status": {
      "post": {
        "summary": "This event occurs when the status of a Git commit changes. For example, commits can be marked as `error`, `failure`, `pending`, or `success`. For more information, see \"[About status checks](https://docs.github.com/github-ae@latest/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks).\" For information about the APIs to manage commit statuses, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#status) or \"[Statuses](https://docs.github.com/github-ae@latest/rest/reference/commits#commit-statuses)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Commit statuses\" repository permission.",
        "operationId": "status",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#status"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-status"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "status",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "team-add": {
      "post": {
        "summary": "This event occurs when a team is added to a repository.\nFor more information, see \"[Managing teams and people with access to your repository](https://docs.github.com/github-ae@latest/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-teams-and-people-with-access-to-your-repository).\"\n\nFor activity relating to teams, see the `teams` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "operationId": "team-add",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#team-add"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-team-add"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "team-add",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "team-added-to-repository": {
      "post": {
        "summary": "This event occurs when there is activity relating to teams in an organization.\nFor more information, see \"[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "A team was granted access to a repository.",
        "operationId": "team/added-to-repository",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#team"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-team-added-to-repository"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "team",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "team-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to teams in an organization.\nFor more information, see \"[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "A team was created.",
        "operationId": "team/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#team"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-team-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "team",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "team-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to teams in an organization.\nFor more information, see \"[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "A team was deleted.",
        "operationId": "team/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#team"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-team-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "team",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "team-edited": {
      "post": {
        "summary": "This event occurs when there is activity relating to teams in an organization.\nFor more information, see \"[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "The name, description, or visibility of a team was changed.",
        "operationId": "team/edited",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#team"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-team-edited"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "team",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "team-removed-from-repository": {
      "post": {
        "summary": "This event occurs when there is activity relating to teams in an organization.\nFor more information, see \"[About teams](https://docs.github.com/github-ae@latest/organizations/organizing-members-into-teams/about-teams).\"\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Members\" organization permission.",
        "description": "A team's access to a repository was removed.",
        "operationId": "team/removed-from-repository",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#team"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-team-removed-from-repository"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "team",
          "supported-webhook-types": [
            "organization",
            "business",
            "app"
          ]
        }
      }
    },
    "user-created": {
      "post": {
        "summary": "This event occurs when there is activity relating to user accounts in an enterprise.",
        "description": "A user account was added to the enterprise.",
        "operationId": "user/created",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#user"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-user-created"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "user",
          "supported-webhook-types": [
            "business"
          ]
        }
      }
    },
    "user-deleted": {
      "post": {
        "summary": "This event occurs when there is activity relating to user accounts in an enterprise.",
        "description": "A user account was removed from the enterprise.",
        "operationId": "user/deleted",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#user"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-user-deleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "user",
          "supported-webhook-types": [
            "business"
          ]
        }
      }
    },
    "watch-started": {
      "post": {
        "summary": "This event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see \"[Managing your subscriptions](https://docs.github.com/github-ae@latest/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/managing-your-subscriptions).\" For information about the APIs to manage watching, see \"[Watching](https://docs.github.com/github-ae@latest/rest/activity/watching)\" in the REST API documentation.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Metadata\" repository permission.",
        "description": "Someone started watching the repository.",
        "operationId": "watch/started",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#watch"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-watch-started"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "watch",
          "supported-webhook-types": [
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "workflow-dispatch": {
      "post": {
        "summary": "This event occurs when a GitHub Actions workflow is manually triggered. For more information, see \"[Manually running a workflow](https://docs.github.com/github-ae@latest/actions/managing-workflow-runs/manually-running-a-workflow).\"\n\nFor activity relating to workflow runs, use the `workflow_run` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Contents\" repository permission.",
        "operationId": "workflow-dispatch",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow-dispatch"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-workflow-dispatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "workflow-dispatch",
          "supported-webhook-types": [
            "app"
          ]
        }
      }
    },
    "workflow-job-completed": {
      "post": {
        "summary": "This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see \"[Using jobs in a workflow](https://docs.github.com/github-ae@latest/actions/using-jobs/using-jobs-in-a-workflow).\" For information about the API to manage workflow jobs, see \"[Workflow jobs](https://docs.github.com/github-ae@latest/rest/actions/workflow-jobs)\" in the REST API documentation.\n\nFor activity relating to a workflow run instead of a job in a workflow run, use the `workflow_run` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Actions\" repository permission.",
        "description": "A job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.",
        "operationId": "workflow-job/completed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow-job"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-workflow-job-completed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "workflow-job",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "workflow-job-in-progress": {
      "post": {
        "summary": "This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see \"[Using jobs in a workflow](https://docs.github.com/github-ae@latest/actions/using-jobs/using-jobs-in-a-workflow).\" For information about the API to manage workflow jobs, see \"[Workflow jobs](https://docs.github.com/github-ae@latest/rest/actions/workflow-jobs)\" in the REST API documentation.\n\nFor activity relating to a workflow run instead of a job in a workflow run, use the `workflow_run` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Actions\" repository permission.",
        "description": "A job in a workflow run started processing on a runner.",
        "operationId": "workflow-job/in-progress",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow-job"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-workflow-job-in-progress"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "workflow-job",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "workflow-job-queued": {
      "post": {
        "summary": "This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see \"[Using jobs in a workflow](https://docs.github.com/github-ae@latest/actions/using-jobs/using-jobs-in-a-workflow).\" For information about the API to manage workflow jobs, see \"[Workflow jobs](https://docs.github.com/github-ae@latest/rest/actions/workflow-jobs)\" in the REST API documentation.\n\nFor activity relating to a workflow run instead of a job in a workflow run, use the `workflow_run` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Actions\" repository permission.",
        "description": "A job in a workflow run was created.",
        "operationId": "workflow-job/queued",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow-job"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-workflow-job-queued"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "workflow-job",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "workflow-run-completed": {
      "post": {
        "summary": "This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see \"[About workflows](https://docs.github.com/github-ae@latest/actions/using-workflows/about-workflows).\" For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#workflowrun) or \"[Workflow runs](https://docs.github.com/github-ae@latest/rest/actions/workflow-runs)\" in the REST API documentation.\n\nFor activity relating to a job in a workflow run, use the `workflow_job` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Actions\" repository permission.",
        "description": "A workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.",
        "operationId": "workflow-run/completed",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow-run"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-workflow-run-completed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "workflow-run",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "workflow-run-in-progress": {
      "post": {
        "summary": "This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see \"[About workflows](https://docs.github.com/github-ae@latest/actions/using-workflows/about-workflows).\" For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#workflowrun) or \"[Workflow runs](https://docs.github.com/github-ae@latest/rest/actions/workflow-runs)\" in the REST API documentation.\n\nFor activity relating to a job in a workflow run, use the `workflow_job` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Actions\" repository permission.",
        "description": "A workflow run started processing on a runner.",
        "operationId": "workflow-run/in-progress",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow-run"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-workflow-run-in-progress"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "workflow-run",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    },
    "workflow-run-requested": {
      "post": {
        "summary": "This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see \"[About workflows](https://docs.github.com/github-ae@latest/actions/using-workflows/about-workflows).\" For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/github-ae@latest/graphql/reference/objects#workflowrun) or \"[Workflow runs](https://docs.github.com/github-ae@latest/rest/actions/workflow-runs)\" in the REST API documentation.\n\nFor activity relating to a job in a workflow run, use the `workflow_job` event.\n\nTo subscribe to this event, a GitHub App must have at least read-level access for the \"Actions\" repository permission.",
        "description": "A workflow run was triggered.",
        "operationId": "workflow-run/requested",
        "externalDocs": {
          "url": "https://docs.github.com/github-ae@latest/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow-run"
        },
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "example": "GitHub-Hookshot/123abc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Id",
            "in": "header",
            "example": 12312312,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Event",
            "in": "header",
            "example": "issues",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Id",
            "in": "header",
            "example": 123123,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Github-Hook-Installation-Target-Type",
            "in": "header",
            "example": "repository",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-GitHub-Delivery",
            "in": "header",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Hub-Signature-256",
            "in": "header",
            "example": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook-workflow-run-requested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "category": "webhooks",
          "subcategory": "workflow-run",
          "supported-webhook-types": [
            "business",
            "repository",
            "organization",
            "app"
          ]
        }
      }
    }
  },
  "components": {
    "parameters": {
      "per-page": {
        "name": "per_page",
        "description": "The number of results per page (max 100).",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 30
        }
      },
      "page": {
        "name": "page",
        "description": "Page number of the results to fetch.",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 1
        }
      },
      "hook-id": {
        "name": "hook_id",
        "description": "The unique identifier of the hook.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "direction": {
        "name": "direction",
        "description": "The direction to sort the results by.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "desc"
        }
      },
      "key-ids": {
        "name": "key_ids",
        "description": "The unique identifier of the key.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "org": {
        "name": "org",
        "description": "The organization name. The name is not case sensitive.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "pre-receive-environment-id": {
        "name": "pre_receive_environment_id",
        "description": "The unique identifier of the pre-receive environment.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "token-id": {
        "name": "token_id",
        "description": "The unique identifier of the token.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "username": {
        "name": "username",
        "description": "The handle for the GitHub user account.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "since": {
        "name": "since",
        "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "installation-id": {
        "name": "installation_id",
        "description": "The unique identifier of the installation.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        },
        "examples": {
          "default": {
            "value": 1
          }
        }
      },
      "client-id": {
        "name": "client_id",
        "in": "path",
        "required": true,
        "description": "The client ID of the GitHub app.",
        "schema": {
          "type": "string"
        },
        "examples": {
          "default": {
            "value": "Iv1.8a61f9b3a7aba766"
          }
        }
      },
      "access-token": {
        "name": "access_token",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "enterprise": {
        "name": "enterprise",
        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "org-id": {
        "name": "org_id",
        "description": "The unique identifier of the organization.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "visible-to-organization": {
        "name": "visible_to_organization",
        "description": "Only return runner groups that are allowed to be used by this organization.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "runner-group-id": {
        "name": "runner_group_id",
        "description": "Unique identifier of the self-hosted runner group.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "runner-id": {
        "name": "runner_id",
        "description": "Unique identifier of the self-hosted runner.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "audit-log-phrase": {
        "name": "phrase",
        "description": "A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github-ae@latest/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "audit-log-after": {
        "name": "after",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/github-ae@latest/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "audit-log-before": {
        "name": "before",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/github-ae@latest/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "audit-log-order": {
        "name": "order",
        "description": "The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.\n\nThe default is `desc`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "desc",
            "asc"
          ]
        }
      },
      "labels": {
        "name": "labels",
        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "all": {
        "name": "all",
        "description": "If `true`, show notifications marked as read.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "participating": {
        "name": "participating",
        "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "before": {
        "name": "before",
        "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "thread-id": {
        "name": "thread_id",
        "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/github-ae@latest/rest/reference/activity#list-notifications-for-the-authenticated-user)).",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "secret-name": {
        "name": "secret_name",
        "description": "The name of the secret.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tool-name": {
        "name": "tool_name",
        "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/code-scanning-analysis-tool-name"
        }
      },
      "tool-guid": {
        "name": "tool_guid",
        "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/code-scanning-analysis-tool-guid"
        }
      },
      "pagination-before": {
        "name": "before",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/github-ae@latest/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "pagination-after": {
        "name": "after",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/github-ae@latest/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "group-id": {
        "name": "group_id",
        "description": "The unique identifier of the group.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "migration-id": {
        "name": "migration_id",
        "description": "The unique identifier of the migration.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "team-slug": {
        "name": "team_slug",
        "description": "The slug of the team name.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "owner": {
        "name": "owner",
        "description": "The account owner of the repository. The name is not case sensitive.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repo": {
        "name": "repo",
        "description": "The name of the repository. The name is not case sensitive.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "job-id": {
        "name": "job_id",
        "description": "The unique identifier of the job.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "actor": {
        "name": "actor",
        "description": "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "workflow-run-branch": {
        "name": "branch",
        "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "event": {
        "name": "event",
        "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/github-ae@latest/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "workflow-run-status": {
        "name": "status",
        "description": "Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "completed",
            "action_required",
            "cancelled",
            "failure",
            "neutral",
            "skipped",
            "stale",
            "success",
            "timed_out",
            "in_progress",
            "queued",
            "requested",
            "waiting",
            "pending"
          ]
        }
      },
      "created": {
        "name": "created",
        "description": "Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/github-ae@latest/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "exclude-pull-requests": {
        "name": "exclude_pull_requests",
        "description": "If `true` pull requests are omitted from the response (empty array).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "workflow-run-check-suite-id": {
        "name": "check_suite_id",
        "description": "Returns workflow runs with the `check_suite_id` that you specify.",
        "in": "query",
        "schema": {
          "type": "integer"
        }
      },
      "workflow-run-head-sha": {
        "name": "head_sha",
        "description": "Only returns workflow runs that are associated with the specified `head_sha`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "run-id": {
        "name": "run_id",
        "description": "The unique identifier of the workflow run.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "attempt-number": {
        "name": "attempt_number",
        "description": "The attempt number of the workflow run.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "workflow-id": {
        "name": "workflow_id",
        "in": "path",
        "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
        "required": true,
        "schema": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "autolink-id": {
        "name": "autolink_id",
        "description": "The unique identifier of the autolink.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "branch": {
        "name": "branch",
        "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/github-ae@latest/graphql).",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-multi-segment": true
      },
      "check-suite-id": {
        "name": "check_suite_id",
        "description": "The unique identifier of the check suite.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "git-ref": {
        "name": "ref",
        "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/code-scanning-ref"
        }
      },
      "alert-number": {
        "name": "alert_number",
        "in": "path",
        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/alert-number"
        }
      },
      "comment-id": {
        "name": "comment_id",
        "description": "The unique identifier of the comment.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "commit-sha": {
        "name": "commit_sha",
        "description": "The SHA of the commit.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "x-multi-segment": true
      },
      "check-name": {
        "name": "check_name",
        "description": "Returns check runs with the specified `name`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "invitation-id": {
        "name": "invitation_id",
        "description": "The unique identifier of the invitation.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "issue-number": {
        "name": "issue_number",
        "description": "The number that identifies the issue.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "key-id": {
        "name": "key_id",
        "description": "The unique identifier of the key.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "pull-number": {
        "name": "pull_number",
        "description": "The number that identifies the pull request.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "release-id": {
        "name": "release_id",
        "description": "The unique identifier of the release.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "secret-scanning-alert-state": {
        "name": "state",
        "in": "query",
        "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "open",
            "resolved"
          ]
        }
      },
      "secret-scanning-alert-secret-type": {
        "name": "secret_type",
        "in": "query",
        "description": "A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/github-ae@latest/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "secret-scanning-alert-resolution": {
        "name": "resolution",
        "in": "query",
        "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "order": {
        "name": "order",
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "desc",
            "asc"
          ],
          "default": "desc"
        }
      },
      "team-id": {
        "name": "team_id",
        "description": "The unique identifier of the team.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "since-repo-date": {
        "name": "since",
        "description": "Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "before-repo-date": {
        "name": "before",
        "description": "Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "sort-starred": {
        "name": "sort",
        "description": "The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "created",
            "updated"
          ],
          "default": "created"
        }
      }
    },
    "schemas": {
      "global-hook": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "config": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "content_type": {
                "type": "string"
              },
              "insecure_ssl": {
                "type": "string"
              },
              "secret": {
                "type": "string"
              }
            }
          },
          "updated_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "ping_url": {
            "type": "string"
          }
        }
      },
      "global-hook-2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "config": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "content_type": {
                "type": "string"
              },
              "insecure_ssl": {
                "type": "string"
              }
            }
          },
          "updated_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "ping_url": {
            "type": "string"
          }
        }
      },
      "public-key-full": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "key": {
            "type": "string"
          },
          "user_id": {
            "nullable": true,
            "type": "integer"
          },
          "repository_id": {
            "nullable": true,
            "type": "integer"
          },
          "url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "read_only": {
            "type": "boolean"
          },
          "verified": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "key",
          "url",
          "title",
          "verified",
          "created_at",
          "read_only",
          "last_used",
          "user_id",
          "repository_id"
        ]
      },
      "organization-simple": {
        "title": "Organization Simple",
        "description": "A GitHub organization.",
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "example": "github"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDEyOk9yZ2FuaXphdGlvbjE="
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/orgs/github"
          },
          "repos_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/orgs/github/repos"
          },
          "events_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/orgs/github/events"
          },
          "hooks_url": {
            "type": "string",
            "example": "https://api.github.com/orgs/github/hooks"
          },
          "issues_url": {
            "type": "string",
            "example": "https://api.github.com/orgs/github/issues"
          },
          "members_url": {
            "type": "string",
            "example": "https://api.github.com/orgs/github/members{/member}"
          },
          "public_members_url": {
            "type": "string",
            "example": "https://api.github.com/orgs/github/public_members{/member}"
          },
          "avatar_url": {
            "type": "string",
            "example": "https://github.com/images/error/octocat_happy.gif"
          },
          "description": {
            "type": "string",
            "example": "A great organization",
            "nullable": true
          }
        },
        "required": [
          "login",
          "url",
          "id",
          "node_id",
          "repos_url",
          "events_url",
          "hooks_url",
          "issues_url",
          "members_url",
          "public_members_url",
          "avatar_url",
          "description"
        ]
      },
      "pre-receive-environment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "default_environment": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "hooks_count": {
            "type": "integer"
          },
          "download": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "downloaded_at": {
                "nullable": true,
                "type": "string"
              },
              "message": {
                "nullable": true,
                "type": "string"
              }
            }
          }
        }
      },
      "pre-receive-environment-download-status": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "downloaded_at": {
            "nullable": true,
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "authorization": {
        "title": "Authorization",
        "description": "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "scopes": {
            "description": "A list of scopes that this authorization is in.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "token": {
            "type": "string"
          },
          "token_last_eight": {
            "type": "string",
            "nullable": true
          },
          "hashed_token": {
            "type": "string",
            "nullable": true
          },
          "app": {
            "type": "object",
            "properties": {
              "client_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "client_id",
              "name",
              "url"
            ]
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "note_url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "fingerprint": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "installation": {
            "$ref": "#/components/schemas/nullable-scoped-installation"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "app",
          "id",
          "note",
          "note_url",
          "scopes",
          "token",
          "hashed_token",
          "token_last_eight",
          "fingerprint",
          "url",
          "created_at",
          "updated_at",
          "expires_at"
        ]
      },
      "installation": {
        "title": "Installation",
        "description": "Installation",
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the installation.",
            "type": "integer",
            "example": 1
          },
          "account": {
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/simple-user"
              },
              {
                "$ref": "#/components/schemas/enterprise"
              }
            ]
          },
          "repository_selection": {
            "description": "Describe whether all repositories have been selected or there's a selection involved",
            "type": "string",
            "enum": [
              "all",
              "selected"
            ]
          },
          "access_tokens_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/installations/1/access_tokens"
          },
          "repositories_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/installation/repositories"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/organizations/github/settings/installations/1"
          },
          "app_id": {
            "type": "integer",
            "example": 1
          },
          "target_id": {
            "description": "The ID of the user or organization this token is being scoped to.",
            "type": "integer"
          },
          "target_type": {
            "type": "string",
            "example": "Organization"
          },
          "permissions": {
            "$ref": "#/components/schemas/app-permissions"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "single_file_name": {
            "type": "string",
            "example": "config.yaml",
            "nullable": true
          },
          "has_multiple_single_files": {
            "type": "boolean",
            "example": true
          },
          "single_file_paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "config.yml",
              ".github/issue_TEMPLATE.md"
            ]
          },
          "app_slug": {
            "type": "string",
            "example": "github-actions"
          },
          "suspended_by": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "contact_email": {
            "type": "string",
            "example": "\"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com\"",
            "nullable": true
          }
        },
        "required": [
          "id",
          "app_id",
          "app_slug",
          "target_id",
          "target_type",
          "single_file_name",
          "repository_selection",
          "access_tokens_url",
          "html_url",
          "repositories_url",
          "events",
          "account",
          "permissions",
          "created_at",
          "updated_at",
          "suspended_by",
          "suspended_at"
        ]
      },
      "app-permissions": {
        "title": "App Permissions",
        "type": "object",
        "description": "The permissions granted to the user-to-server access token.",
        "properties": {
          "actions": {
            "type": "string",
            "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
            "enum": [
              "read",
              "write"
            ]
          },
          "administration": {
            "type": "string",
            "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
            "enum": [
              "read",
              "write"
            ]
          },
          "checks": {
            "type": "string",
            "description": "The level of permission to grant the access token for checks on code.",
            "enum": [
              "read",
              "write"
            ]
          },
          "contents": {
            "type": "string",
            "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
            "enum": [
              "read",
              "write"
            ]
          },
          "deployments": {
            "type": "string",
            "description": "The level of permission to grant the access token for deployments and deployment statuses.",
            "enum": [
              "read",
              "write"
            ]
          },
          "environments": {
            "type": "string",
            "description": "The level of permission to grant the access token for managing repository environments.",
            "enum": [
              "read",
              "write"
            ]
          },
          "issues": {
            "type": "string",
            "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
            "enum": [
              "read",
              "write"
            ]
          },
          "metadata": {
            "type": "string",
            "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
            "enum": [
              "read",
              "write"
            ]
          },
          "packages": {
            "type": "string",
            "description": "The level of permission to grant the access token for packages published to GitHub Packages.",
            "enum": [
              "read",
              "write"
            ]
          },
          "pages": {
            "type": "string",
            "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
            "enum": [
              "read",
              "write"
            ]
          },
          "pull_requests": {
            "type": "string",
            "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
            "enum": [
              "read",
              "write"
            ]
          },
          "repository_hooks": {
            "type": "string",
            "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository.",
            "enum": [
              "read",
              "write"
            ]
          },
          "repository_projects": {
            "type": "string",
            "description": "The level of permission to grant the access token to manage repository projects, columns, and cards.",
            "enum": [
              "read",
              "write",
              "admin"
            ]
          },
          "secret_scanning_alerts": {
            "type": "string",
            "description": "The level of permission to grant the access token to view and manage secret scanning alerts.",
            "enum": [
              "read",
              "write"
            ]
          },
          "secrets": {
            "type": "string",
            "description": "The level of permission to grant the access token to manage repository secrets.",
            "enum": [
              "read",
              "write"
            ]
          },
          "security_events": {
            "type": "string",
            "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts.",
            "enum": [
              "read",
              "write"
            ]
          },
          "single_file": {
            "type": "string",
            "description": "The level of permission to grant the access token to manage just a single file.",
            "enum": [
              "read",
              "write"
            ]
          },
          "statuses": {
            "type": "string",
            "description": "The level of permission to grant the access token for commit statuses.",
            "enum": [
              "read",
              "write"
            ]
          },
          "vulnerability_alerts": {
            "type": "string",
            "description": "The level of permission to grant the access token to manage Dependabot alerts.",
            "enum": [
              "read",
              "write"
            ]
          },
          "workflows": {
            "type": "string",
            "description": "The level of permission to grant the access token to update GitHub Actions workflow files.",
            "enum": [
              "write"
            ]
          },
          "members": {
            "type": "string",
            "description": "The level of permission to grant the access token for organization teams and members.",
            "enum": [
              "read",
              "write"
            ]
          },
          "organization_administration": {
            "type": "string",
            "description": "The level of permission to grant the access token to manage access to an organization.",
            "enum": [
              "read",
              "write"
            ]
          },
          "organization_hooks": {
            "type": "string",
            "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization.",
            "enum": [
              "read",
              "write"
            ]
          },
          "organization_personal_access_tokens": {
            "type": "string",
            "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.",
            "enum": [
              "read",
              "write"
            ]
          },
          "organization_personal_access_token_requests": {
            "type": "string",
            "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.",
            "enum": [
              "read",
              "write"
            ]
          },
          "organization_plan": {
            "type": "string",
            "description": "The level of permission to grant the access token for viewing an organization's plan.",
            "enum": [
              "read"
            ]
          },
          "organization_projects": {
            "type": "string",
            "description": "The level of permission to grant the access token to manage organization projects and projects beta (where available).",
            "enum": [
              "read",
              "write",
              "admin"
            ]
          },
          "organization_packages": {
            "type": "string",
            "description": "The level of permission to grant the access token for organization packages published to GitHub Packages.",
            "enum": [
              "read",
              "write"
            ]
          },
          "organization_secrets": {
            "type": "string",
            "description": "The level of permission to grant the access token to manage organization secrets.",
            "enum": [
              "read",
              "write"
            ]
          },
          "organization_self_hosted_runners": {
            "type": "string",
            "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
            "enum": [
              "read",
              "write"
            ]
          },
          "organization_user_blocking": {
            "type": "string",
            "description": "The level of permission to grant the access token to view and manage users blocked by the organization.",
            "enum": [
              "read",
              "write"
            ]
          },
          "team_discussions": {
            "type": "string",
            "description": "The level of permission to grant the access token to manage team discussions and related comments.",
            "enum": [
              "read",
              "write"
            ]
          }
        },
        "example": {
          "contents": "read",
          "issues": "read",
          "deployments": "write",
          "single_file": "read"
        }
      },
      "installation-token": {
        "title": "Installation Token",
        "description": "Authentication token for a GitHub App installed on a user or org.",
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expires_at": {
            "type": "string"
          },
          "permissions": {
            "$ref": "#/components/schemas/app-permissions"
          },
          "repository_selection": {
            "type": "string",
            "enum": [
              "all",
              "selected"
            ]
          },
          "repositories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/repository"
            }
          },
          "single_file": {
            "type": "string",
            "example": "README.md"
          },
          "has_multiple_single_files": {
            "type": "boolean",
            "example": true
          },
          "single_file_paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "config.yml",
              ".github/issue_TEMPLATE.md"
            ]
          }
        },
        "required": [
          "token",
          "expires_at"
        ]
      },
      "announcement": {
        "title": "Enterprise Announcement",
        "description": "Enterprise global announcement",
        "type": "object",
        "properties": {
          "announcement": {
            "$ref": "#/components/schemas/announcement-message"
          },
          "expires_at": {
            "$ref": "#/components/schemas/announcement-expiration"
          }
        },
        "required": [
          "announcement"
        ]
      },
      "license-info": {
        "type": "object",
        "properties": {
          "seats": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "seats_used": {
            "type": "integer"
          },
          "seats_available": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "kind": {
            "type": "string"
          },
          "days_until_expiration": {
            "type": "integer"
          },
          "expire_at": {
            "type": "string"
          }
        }
      },
      "enterprise-overview": {
        "type": "object",
        "properties": {
          "repos": {
            "$ref": "#/components/schemas/enterprise-repository-overview"
          },
          "hooks": {
            "$ref": "#/components/schemas/enterprise-hook-overview"
          },
          "pages": {
            "$ref": "#/components/schemas/enterprise-page-overview"
          },
          "orgs": {
            "$ref": "#/components/schemas/enterprise-organization-overview"
          },
          "users": {
            "$ref": "#/components/schemas/enterprise-user-overview"
          },
          "pulls": {
            "$ref": "#/components/schemas/enterprise-pull-request-overview"
          },
          "issues": {
            "$ref": "#/components/schemas/enterprise-issue-overview"
          },
          "milestones": {
            "$ref": "#/components/schemas/enterprise-milestone-overview"
          },
          "gists": {
            "$ref": "#/components/schemas/enterprise-gist-overview"
          },
          "comments": {
            "$ref": "#/components/schemas/enterprise-comment-overview"
          }
        }
      },
      "enterprise-comment-overview": {
        "title": "Enterprise Comment Stats",
        "type": "object",
        "properties": {
          "total_commit_comments": {
            "type": "integer"
          },
          "total_gist_comments": {
            "type": "integer"
          },
          "total_issue_comments": {
            "type": "integer"
          },
          "total_pull_request_comments": {
            "type": "integer"
          }
        },
        "required": [
          "total_commit_comments",
          "total_gist_comments",
          "total_issue_comments",
          "total_pull_request_comments"
        ]
      },
      "enterprise-gist-overview": {
        "title": "Enterprise Gist Stats",
        "type": "object",
        "properties": {
          "total_gists": {
            "type": "integer"
          },
          "private_gists": {
            "type": "integer"
          },
          "public_gists": {
            "type": "integer"
          }
        },
        "required": [
          "total_gists",
          "private_gists",
          "public_gists"
        ]
      },
      "enterprise-hook-overview": {
        "title": "Hooks Enterprise Stats",
        "type": "object",
        "properties": {
          "total_hooks": {
            "type": "integer"
          },
          "active_hooks": {
            "type": "integer"
          },
          "inactive_hooks": {
            "type": "integer"
          }
        },
        "required": [
          "total_hooks",
          "active_hooks",
          "inactive_hooks"
        ]
      },
      "enterprise-issue-overview": {
        "title": "Enterprise Issue Stats",
        "type": "object",
        "properties": {
          "total_issues": {
            "type": "integer"
          },
          "open_issues": {
            "type": "integer"
          },
          "closed_issues": {
            "type": "integer"
          }
        },
        "required": [
          "total_issues",
          "open_issues",
          "closed_issues"
        ]
      },
      "enterprise-milestone-overview": {
        "title": "Enterprise Milestone Stats",
        "type": "object",
        "properties": {
          "total_milestones": {
            "type": "integer"
          },
          "open_milestones": {
            "type": "integer"
          },
          "closed_milestones": {
            "type": "integer"
          }
        },
        "required": [
          "total_milestones",
          "open_milestones",
          "closed_milestones"
        ]
      },
      "enterprise-organization-overview": {
        "title": "Enterprise Organization Stats",
        "type": "object",
        "properties": {
          "total_orgs": {
            "type": "integer"
          },
          "disabled_orgs": {
            "type": "integer"
          },
          "total_teams": {
            "type": "integer"
          },
          "total_team_members": {
            "type": "integer"
          }
        },
        "required": [
          "total_orgs",
          "disabled_orgs",
          "total_teams",
          "total_team_members"
        ]
      },
      "enterprise-page-overview": {
        "title": "Enterprise Pages Stats",
        "type": "object",
        "properties": {
          "total_pages": {
            "type": "integer"
          }
        },
        "required": [
          "total_pages"
        ]
      },
      "enterprise-pull-request-overview": {
        "title": "Enterprise Pull Request Stats",
        "type": "object",
        "properties": {
          "total_pulls": {
            "type": "integer"
          },
          "merged_pulls": {
            "type": "integer"
          },
          "mergeable_pulls": {
            "type": "integer"
          },
          "unmergeable_pulls": {
            "type": "integer"
          }
        },
        "required": [
          "total_pulls",
          "merged_pulls",
          "mergeable_pulls",
          "unmergeable_pulls"
        ]
      },
      "enterprise-repository-overview": {
        "title": "Repository Enterprise Stats",
        "type": "object",
        "properties": {
          "total_repos": {
            "type": "integer"
          },
          "root_repos": {
            "type": "integer"
          },
          "fork_repos": {
            "type": "integer"
          },
          "org_repos": {
            "type": "integer"
          },
          "total_pushes": {
            "type": "integer"
          },
          "total_wikis": {
            "type": "integer"
          }
        },
        "required": [
          "total_repos",
          "root_repos",
          "fork_repos",
          "org_repos",
          "total_pushes",
          "total_wikis"
        ]
      },
      "enterprise-user-overview": {
        "title": "Enterprise User Stats",
        "type": "object",
        "properties": {
          "total_users": {
            "type": "integer"
          },
          "admin_users": {
            "type": "integer"
          },
          "suspended_users": {
            "type": "integer"
          }
        },
        "required": [
          "total_users",
          "admin_users",
          "suspended_users"
        ]
      },
      "actions-enterprise-permissions": {
        "type": "object",
        "properties": {
          "enabled_organizations": {
            "$ref": "#/components/schemas/enabled-organizations"
          },
          "selected_organizations_url": {
            "type": "string",
            "description": "The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`."
          },
          "allowed_actions": {
            "$ref": "#/components/schemas/allowed-actions"
          },
          "selected_actions_url": {
            "$ref": "#/components/schemas/selected-actions-url"
          }
        },
        "required": [
          "enabled_organizations"
        ]
      },
      "enabled-organizations": {
        "type": "string",
        "description": "The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.",
        "enum": [
          "all",
          "none",
          "selected"
        ]
      },
      "allowed-actions": {
        "type": "string",
        "description": "The permissions policy that controls the actions that are allowed to run.",
        "enum": [
          "all",
          "local_only",
          "selected"
        ]
      },
      "selected-actions": {
        "type": "object",
        "properties": {
          "github_owned_allowed": {
            "type": "boolean",
            "description": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization."
          },
          "verified_allowed": {
            "type": "boolean",
            "description": "Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators."
          },
          "patterns_allowed": {
            "type": "array",
            "description": "Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "runner-groups-enterprise": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "selected_organizations_url": {
            "type": "string"
          },
          "runners_url": {
            "type": "string"
          },
          "allows_public_repositories": {
            "type": "boolean"
          },
          "workflow_restrictions_read_only": {
            "description": "If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.",
            "type": "boolean",
            "default": false
          },
          "restricted_to_workflows": {
            "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
            "type": "boolean",
            "default": false
          },
          "selected_workflows": {
            "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
            "type": "array",
            "items": {
              "type": "string",
              "description": "Name of workflow the runner group should be allowed to run. Note that a ref, tag, or long SHA is required.",
              "example": "octo-org/octo-repo/.github/workflows/deploy.yaml@main"
            }
          }
        },
        "required": [
          "id",
          "name",
          "visibility",
          "allows_public_repositories",
          "default",
          "runners_url"
        ]
      },
      "runner": {
        "title": "Self hosted runners",
        "description": "A self hosted runner",
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the runner.",
            "type": "integer",
            "example": 5
          },
          "runner_group_id": {
            "description": "The id of the runner group.",
            "type": "integer",
            "example": 1
          },
          "name": {
            "description": "The name of the runner.",
            "type": "string",
            "example": "iMac"
          },
          "os": {
            "description": "The Operating System of the runner.",
            "type": "string",
            "example": "macos"
          },
          "status": {
            "description": "The status of the runner.",
            "type": "string",
            "example": "online"
          },
          "busy": {
            "type": "boolean"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/runner-label"
            }
          }
        },
        "required": [
          "id",
          "name",
          "os",
          "status",
          "busy",
          "labels"
        ]
      },
      "runner-application": {
        "title": "Runner Application",
        "description": "Runner Application",
        "type": "object",
        "properties": {
          "os": {
            "type": "string"
          },
          "architecture": {
            "type": "string"
          },
          "download_url": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "temp_download_token": {
            "description": "A short lived bearer token used to download the runner, if needed.",
            "type": "string"
          },
          "sha256_checksum": {
            "type": "string"
          }
        },
        "required": [
          "os",
          "architecture",
          "download_url",
          "filename"
        ]
      },
      "authentication-token": {
        "title": "Authentication Token",
        "description": "Authentication Token",
        "type": "object",
        "properties": {
          "token": {
            "description": "The token used for authentication",
            "type": "string",
            "example": "v1.1f699f1069f60xxx"
          },
          "expires_at": {
            "description": "The time this token expires",
            "type": "string",
            "format": "date-time",
            "example": "2016-07-11T22:14:10Z"
          },
          "permissions": {
            "type": "object",
            "example": {
              "issues": "read",
              "deployments": "write"
            }
          },
          "repositories": {
            "description": "The repositories this token has access to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/repository"
            }
          },
          "single_file": {
            "type": "string",
            "example": "config.yaml",
            "nullable": true
          },
          "repository_selection": {
            "description": "Describe whether all repositories have been selected or there's a selection involved",
            "type": "string",
            "enum": [
              "all",
              "selected"
            ]
          }
        },
        "required": [
          "token",
          "expires_at"
        ]
      },
      "audit-log-event": {
        "type": "object",
        "properties": {
          "@timestamp": {
            "type": "integer",
            "description": "The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time)."
          },
          "action": {
            "type": "string",
            "description": "The name of the action that was performed, for example `user.login` or `repo.create`."
          },
          "active": {
            "type": "boolean"
          },
          "active_was": {
            "type": "boolean"
          },
          "actor": {
            "type": "string",
            "description": "The actor who performed the action."
          },
          "actor_id": {
            "type": "integer",
            "description": "The id of the actor who performed the action."
          },
          "actor_location": {
            "type": "object",
            "properties": {
              "country_name": {
                "type": "string"
              }
            }
          },
          "data": {
            "type": "object",
            "additionalProperties": true
          },
          "org_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "business_id": {
            "type": "integer"
          },
          "blocked_user": {
            "type": "string",
            "description": "The username of the account being blocked."
          },
          "business": {
            "type": "string"
          },
          "config": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "config_was": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "content_type": {
            "type": "string"
          },
          "operation_type": {
            "type": "string"
          },
          "created_at": {
            "type": "integer",
            "description": "The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time)."
          },
          "deploy_key_fingerprint": {
            "type": "string"
          },
          "_document_id": {
            "type": "string",
            "description": "A unique identifier for an audit event."
          },
          "emoji": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "events_were": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "explanation": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "hook_id": {
            "type": "integer"
          },
          "limited_availability": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "old_user": {
            "type": "string"
          },
          "openssh_public_key": {
            "type": "string"
          },
          "org": {
            "type": "string"
          },
          "previous_visibility": {
            "type": "string"
          },
          "read_only": {
            "type": "boolean"
          },
          "repo": {
            "type": "string",
            "description": "The name of the repository."
          },
          "repository": {
            "type": "string",
            "description": "The name of the repository."
          },
          "repository_public": {
            "type": "boolean"
          },
          "target_login": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "transport_protocol": {
            "type": "integer",
            "description": "The type of protocol (for example, HTTP or SSH) used to transfer Git data."
          },
          "transport_protocol_name": {
            "type": "string",
            "description": "A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data."
          },
          "user": {
            "type": "string",
            "description": "The user that was affected by the action performed (if available)."
          },
          "visibility": {
            "type": "string",
            "description": "The repository visibility, for example `public` or `private`."
          }
        }
      },
      "repository": {
        "title": "Repository",
        "description": "A repository on GitHub.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the repository",
            "example": 42,
            "type": "integer"
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
          },
          "name": {
            "description": "The name of the repository.",
            "type": "string",
            "example": "Team Environment"
          },
          "full_name": {
            "type": "string",
            "example": "octocat/Hello-World"
          },
          "license": {
            "$ref": "#/components/schemas/nullable-license-simple"
          },
          "organization": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "forks": {
            "type": "integer"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean"
              },
              "pull": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              }
            },
            "required": [
              "admin",
              "pull",
              "push"
            ]
          },
          "owner": {
            "$ref": "#/components/schemas/simple-user"
          },
          "private": {
            "description": "Whether the repository is private or public.",
            "default": false,
            "type": "boolean"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World"
          },
          "description": {
            "type": "string",
            "example": "This your first repo!",
            "nullable": true
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World"
          },
          "archive_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
          },
          "assignees_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
          },
          "blobs_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
          },
          "branches_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
          },
          "collaborators_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
          },
          "comments_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
          },
          "commits_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
          },
          "compare_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
          },
          "contents_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
          },
          "contributors_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
          },
          "deployments_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
          },
          "downloads_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
          },
          "events_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/events"
          },
          "forks_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/forks"
          },
          "git_commits_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
          },
          "git_refs_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
          },
          "git_tags_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
          },
          "git_url": {
            "type": "string",
            "example": "git:github.com/octocat/Hello-World.git"
          },
          "issue_comment_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
          },
          "issue_events_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
          },
          "issues_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
          },
          "keys_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
          },
          "labels_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
          },
          "languages_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/languages"
          },
          "merges_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/merges"
          },
          "milestones_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
          },
          "notifications_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
          },
          "pulls_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
          },
          "releases_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
          },
          "ssh_url": {
            "type": "string",
            "example": "git@github.com:octocat/Hello-World.git"
          },
          "stargazers_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
          },
          "statuses_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
          },
          "subscribers_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
          },
          "tags_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/tags"
          },
          "teams_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/teams"
          },
          "trees_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          },
          "clone_url": {
            "type": "string",
            "example": "https://github.com/octocat/Hello-World.git"
          },
          "mirror_url": {
            "type": "string",
            "format": "uri",
            "example": "git:git.example.com/octocat/Hello-World",
            "nullable": true
          },
          "hooks_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "svn_url": {
            "type": "string",
            "format": "uri",
            "example": "https://svn.github.com/octocat/Hello-World"
          },
          "homepage": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "forks_count": {
            "type": "integer",
            "example": 9
          },
          "stargazers_count": {
            "type": "integer",
            "example": 80
          },
          "watchers_count": {
            "type": "integer",
            "example": 80
          },
          "size": {
            "description": "The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.",
            "type": "integer",
            "example": 108
          },
          "default_branch": {
            "description": "The default branch of the repository.",
            "type": "string",
            "example": "master"
          },
          "open_issues_count": {
            "type": "integer",
            "example": 0
          },
          "is_template": {
            "description": "Whether this repository acts as a template that can be used to generate new repositories.",
            "default": false,
            "type": "boolean",
            "example": true
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "description": "Whether issues are enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "has_projects": {
            "description": "Whether projects are enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "has_wiki": {
            "description": "Whether the wiki is enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "description": "Whether downloads are enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "archived": {
            "description": "Whether the repository is archived.",
            "default": false,
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean",
            "description": "Returns whether or not this repository disabled."
          },
          "visibility": {
            "description": "The repository visibility: public, private, or internal.",
            "default": "public",
            "type": "string"
          },
          "pushed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:06:43Z",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:14:43Z",
            "nullable": true
          },
          "allow_rebase_merge": {
            "description": "Whether to allow rebase merges for pull requests.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "template_repository": {
            "nullable": true,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "forks_count": {
                "type": "integer"
              },
              "stargazers_count": {
                "type": "integer"
              },
              "watchers_count": {
                "type": "integer"
              },
              "size": {
                "type": "integer"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "integer"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "maintain": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "triage": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "allow_auto_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_update_branch": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "integer"
              },
              "network_count": {
                "type": "integer"
              }
            }
          },
          "temp_clone_token": {
            "type": "string"
          },
          "allow_squash_merge": {
            "description": "Whether to allow squash merges for pull requests.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "allow_auto_merge": {
            "description": "Whether to allow Auto-merge to be used on pull requests.",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "delete_branch_on_merge": {
            "description": "Whether to delete head branches when pull requests are merged",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "allow_update_branch": {
            "description": "Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "allow_merge_commit": {
            "description": "Whether to allow merge commits for pull requests.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "allow_forking": {
            "description": "Whether to allow forking this repo",
            "type": "boolean"
          },
          "web_commit_signoff_required": {
            "description": "Whether to require contributors to sign off on web-based commits",
            "default": false,
            "type": "boolean"
          },
          "subscribers_count": {
            "type": "integer"
          },
          "network_count": {
            "type": "integer"
          },
          "open_issues": {
            "type": "integer"
          },
          "watchers": {
            "type": "integer"
          },
          "master_branch": {
            "type": "string"
          },
          "starred_at": {
            "type": "string",
            "example": "\"2020-07-09T00:17:42Z\""
          },
          "anonymous_access_enabled": {
            "type": "boolean",
            "description": "Whether anonymous git access is enabled for this repository"
          }
        },
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url",
          "clone_url",
          "default_branch",
          "forks",
          "forks_count",
          "git_url",
          "has_downloads",
          "has_issues",
          "has_projects",
          "has_wiki",
          "has_pages",
          "homepage",
          "language",
          "archived",
          "disabled",
          "mirror_url",
          "open_issues",
          "open_issues_count",
          "license",
          "pushed_at",
          "size",
          "ssh_url",
          "stargazers_count",
          "svn_url",
          "watchers",
          "watchers_count",
          "created_at",
          "updated_at"
        ]
      },
      "issue": {
        "title": "Issue",
        "description": "Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "description": "URL for the issue",
            "example": "https://api.github.com/repositories/42/issues/1",
            "type": "string",
            "format": "uri"
          },
          "repository_url": {
            "type": "string",
            "format": "uri"
          },
          "labels_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string",
            "format": "uri"
          },
          "events_url": {
            "type": "string",
            "format": "uri"
          },
          "html_url": {
            "type": "string",
            "format": "uri"
          },
          "number": {
            "description": "Number uniquely identifying the issue within its repository",
            "example": 42,
            "type": "integer"
          },
          "state": {
            "description": "State of the issue; either 'open' or 'closed'",
            "example": "open",
            "type": "string"
          },
          "state_reason": {
            "description": "The reason for the current state",
            "example": "not_planned",
            "type": "string",
            "nullable": true,
            "enum": [
              "completed",
              "reopened",
              "not_planned"
            ]
          },
          "title": {
            "description": "Title of the issue",
            "example": "Widget creation fails in Safari on OS X 10.8",
            "type": "string"
          },
          "body": {
            "description": "Contents of the issue",
            "example": "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?",
            "type": "string",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "labels": {
            "description": "Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository",
            "example": [
              "bug",
              "registration"
            ],
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "color": {
                      "type": "string",
                      "nullable": true
                    },
                    "default": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "assignee": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/simple-user"
            },
            "nullable": true
          },
          "milestone": {
            "$ref": "#/components/schemas/nullable-milestone"
          },
          "locked": {
            "type": "boolean"
          },
          "active_lock_reason": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "integer"
          },
          "pull_request": {
            "type": "object",
            "properties": {
              "merged_at": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "diff_url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "html_url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "patch_url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              }
            },
            "required": [
              "diff_url",
              "html_url",
              "patch_url",
              "url"
            ]
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "draft": {
            "type": "boolean"
          },
          "closed_by": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "body_html": {
            "type": "string"
          },
          "body_text": {
            "type": "string"
          },
          "timeline_url": {
            "type": "string",
            "format": "uri"
          },
          "repository": {
            "$ref": "#/components/schemas/repository"
          },
          "performed_via_github_app": {
            "$ref": "#/components/schemas/nullable-integration"
          },
          "author_association": {
            "$ref": "#/components/schemas/author-association"
          },
          "reactions": {
            "$ref": "#/components/schemas/reaction-rollup"
          }
        },
        "required": [
          "assignee",
          "closed_at",
          "comments",
          "comments_url",
          "events_url",
          "html_url",
          "id",
          "node_id",
          "labels",
          "labels_url",
          "milestone",
          "number",
          "repository_url",
          "state",
          "locked",
          "title",
          "url",
          "user",
          "author_association",
          "created_at",
          "updated_at"
        ]
      },
      "api-overview": {
        "title": "Api Overview",
        "description": "Api Overview",
        "type": "object",
        "properties": {
          "verifiable_password_authentication": {
            "type": "boolean",
            "example": true
          },
          "ssh_key_fingerprints": {
            "type": "object",
            "properties": {
              "SHA256_RSA": {
                "type": "string"
              },
              "SHA256_DSA": {
                "type": "string"
              },
              "SHA256_ECDSA": {
                "type": "string"
              },
              "SHA256_ED25519": {
                "type": "string"
              }
            }
          },
          "hooks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192.0.2.1"
            ]
          },
          "web": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192.0.2.1"
            ]
          },
          "api": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192.0.2.1"
            ]
          },
          "git": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192.0.2.1"
            ]
          },
          "packages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192.0.2.1"
            ]
          },
          "pages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192.0.2.1"
            ]
          },
          "importer": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192.0.2.1"
            ]
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192.0.2.1"
            ]
          },
          "dependabot": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192.0.2.1"
            ]
          }
        },
        "required": [
          "verifiable_password_authentication"
        ]
      },
      "thread": {
        "title": "Thread",
        "description": "Thread",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "repository": {
            "$ref": "#/components/schemas/minimal-repository"
          },
          "subject": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "latest_comment_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "required": [
              "title",
              "url",
              "latest_comment_url",
              "type"
            ]
          },
          "reason": {
            "type": "string"
          },
          "unread": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string"
          },
          "last_read_at": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string"
          },
          "subscription_url": {
            "type": "string",
            "example": "https://api.github.com/notifications/threads/2/subscription"
          }
        },
        "required": [
          "id",
          "unread",
          "reason",
          "updated_at",
          "last_read_at",
          "subject",
          "repository",
          "url",
          "subscription_url"
        ]
      },
      "organization-full": {
        "title": "Organization Full",
        "description": "Organization Full",
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "example": "github"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDEyOk9yZ2FuaXphdGlvbjE="
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/orgs/github"
          },
          "repos_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/orgs/github/repos"
          },
          "events_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/orgs/github/events"
          },
          "hooks_url": {
            "type": "string",
            "example": "https://api.github.com/orgs/github/hooks"
          },
          "issues_url": {
            "type": "string",
            "example": "https://api.github.com/orgs/github/issues"
          },
          "members_url": {
            "type": "string",
            "example": "https://api.github.com/orgs/github/members{/member}"
          },
          "public_members_url": {
            "type": "string",
            "example": "https://api.github.com/orgs/github/public_members{/member}"
          },
          "avatar_url": {
            "type": "string",
            "example": "https://github.com/images/error/octocat_happy.gif"
          },
          "description": {
            "type": "string",
            "example": "A great organization",
            "nullable": true
          },
          "name": {
            "type": "string",
            "example": "github"
          },
          "company": {
            "type": "string",
            "example": "GitHub"
          },
          "blog": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/blog"
          },
          "location": {
            "type": "string",
            "example": "San Francisco"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "octocat@github.com"
          },
          "twitter_username": {
            "type": "string",
            "example": "github",
            "nullable": true
          },
          "is_verified": {
            "type": "boolean",
            "example": true
          },
          "has_organization_projects": {
            "type": "boolean",
            "example": true
          },
          "has_repository_projects": {
            "type": "boolean",
            "example": true
          },
          "public_repos": {
            "type": "integer",
            "example": 2
          },
          "public_gists": {
            "type": "integer",
            "example": 1
          },
          "followers": {
            "type": "integer",
            "example": 20
          },
          "following": {
            "type": "integer",
            "example": 0
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2008-01-14T04:33:35Z"
          },
          "type": {
            "type": "string",
            "example": "Organization"
          },
          "total_private_repos": {
            "type": "integer",
            "example": 100
          },
          "owned_private_repos": {
            "type": "integer",
            "example": 100
          },
          "private_gists": {
            "type": "integer",
            "example": 81,
            "nullable": true
          },
          "disk_usage": {
            "type": "integer",
            "example": 10000,
            "nullable": true
          },
          "collaborators": {
            "type": "integer",
            "example": 8,
            "nullable": true
          },
          "billing_email": {
            "type": "string",
            "format": "email",
            "example": "org@example.com",
            "nullable": true
          },
          "plan": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "space": {
                "type": "integer"
              },
              "private_repos": {
                "type": "integer"
              },
              "filled_seats": {
                "type": "integer"
              },
              "seats": {
                "type": "integer"
              }
            },
            "required": [
              "name",
              "space",
              "private_repos"
            ]
          },
          "default_repository_permission": {
            "type": "string",
            "nullable": true
          },
          "members_can_create_repositories": {
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "two_factor_requirement_enabled": {
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "members_allowed_repository_creation_type": {
            "type": "string",
            "example": "all"
          },
          "members_can_create_public_repositories": {
            "type": "boolean",
            "example": true
          },
          "members_can_create_private_repositories": {
            "type": "boolean",
            "example": true
          },
          "members_can_create_internal_repositories": {
            "type": "boolean",
            "example": true
          },
          "members_can_create_pages": {
            "type": "boolean",
            "example": true
          },
          "members_can_create_public_pages": {
            "type": "boolean",
            "example": true
          },
          "members_can_create_private_pages": {
            "type": "boolean",
            "example": true
          },
          "members_can_fork_private_repositories": {
            "type": "boolean",
            "example": false,
            "nullable": true
          },
          "web_commit_signoff_required": {
            "type": "boolean",
            "example": false
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "advanced_security_enabled_for_new_repositories": {
            "type": "boolean",
            "example": false,
            "description": "Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role."
          },
          "dependabot_alerts_enabled_for_new_repositories": {
            "type": "boolean",
            "example": false,
            "description": "Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to\nthis organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role."
          },
          "dependabot_security_updates_enabled_for_new_repositories": {
            "type": "boolean",
            "example": false,
            "description": "Whether dependabot security updates are automatically enabled for new repositories and repositories transferred\nto this organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role."
          },
          "dependency_graph_enabled_for_new_repositories": {
            "type": "boolean",
            "example": false,
            "description": "Whether dependency graph is automatically enabled for new repositories and repositories transferred to this\norganization.\n\nThis field is only visible to organization owners or members of a team with the security manager role."
          },
          "secret_scanning_enabled_for_new_repositories": {
            "type": "boolean",
            "example": false,
            "description": "Whether secret scanning is automatically enabled for new repositories and repositories transferred to this\norganization.\n\nThis field is only visible to organization owners or members of a team with the security manager role."
          },
          "secret_scanning_push_protection_enabled_for_new_repositories": {
            "type": "boolean",
            "example": false,
            "description": "Whether secret scanning push protection is automatically enabled for new repositories and repositories\ntransferred to this organization.\n\nThis field is only visible to organization owners or members of a team with the security manager role."
          },
          "secret_scanning_push_protection_custom_link_enabled": {
            "type": "boolean",
            "example": false,
            "description": "Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection."
          },
          "secret_scanning_push_protection_custom_link": {
            "type": "string",
            "example": "https://github.com/test-org/test-repo/blob/main/README.md",
            "nullable": true,
            "description": "An optional URL string to display to contributors who are blocked from pushing a secret."
          }
        },
        "required": [
          "login",
          "url",
          "id",
          "node_id",
          "repos_url",
          "events_url",
          "hooks_url",
          "issues_url",
          "members_url",
          "public_members_url",
          "avatar_url",
          "description",
          "html_url",
          "has_organization_projects",
          "has_repository_projects",
          "public_repos",
          "public_gists",
          "followers",
          "following",
          "type",
          "created_at",
          "updated_at"
        ]
      },
      "validation-error": {
        "title": "Validation Error",
        "description": "Validation Error",
        "type": "object",
        "required": [
          "message",
          "documentation_url"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "documentation_url": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "resource": {
                  "type": "string"
                },
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "index": {
                  "type": "integer"
                },
                "value": {
                  "oneOf": [
                    {
                      "type": "string",
                      "nullable": true
                    },
                    {
                      "type": "integer",
                      "nullable": true
                    },
                    {
                      "type": "array",
                      "nullable": true,
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "validation-error-simple": {
        "title": "Validation Error Simple",
        "description": "Validation Error Simple",
        "type": "object",
        "required": [
          "message",
          "documentation_url"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "documentation_url": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "runner-groups-org": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "selected_repositories_url": {
            "description": "Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`",
            "type": "string"
          },
          "runners_url": {
            "type": "string"
          },
          "inherited": {
            "type": "boolean"
          },
          "inherited_allows_public_repositories": {
            "type": "boolean"
          },
          "allows_public_repositories": {
            "type": "boolean"
          },
          "workflow_restrictions_read_only": {
            "description": "If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.",
            "type": "boolean",
            "default": false
          },
          "restricted_to_workflows": {
            "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
            "type": "boolean",
            "default": false
          },
          "selected_workflows": {
            "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
            "type": "array",
            "items": {
              "type": "string",
              "description": "Name of workflow the runner group should be allowed to run. Note that a ref, tag, or long SHA is required.",
              "example": "octo-org/octo-repo/.github/workflows/deploy.yaml@main"
            }
          }
        },
        "required": [
          "id",
          "name",
          "visibility",
          "default",
          "runners_url",
          "inherited",
          "allows_public_repositories"
        ]
      },
      "empty-object": {
        "title": "Empty Object",
        "description": "An object without any properties.",
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "minimal-repository": {
        "title": "Minimal Repository",
        "description": "Minimal Repository",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1296269
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
          },
          "name": {
            "type": "string",
            "example": "Hello-World"
          },
          "full_name": {
            "type": "string",
            "example": "octocat/Hello-World"
          },
          "owner": {
            "$ref": "#/components/schemas/simple-user"
          },
          "private": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World"
          },
          "description": {
            "type": "string",
            "example": "This your first repo!",
            "nullable": true
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World"
          },
          "archive_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
          },
          "assignees_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
          },
          "blobs_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
          },
          "branches_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
          },
          "collaborators_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
          },
          "comments_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
          },
          "commits_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
          },
          "compare_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
          },
          "contents_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
          },
          "contributors_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
          },
          "deployments_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
          },
          "downloads_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
          },
          "events_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/events"
          },
          "forks_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/forks"
          },
          "git_commits_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
          },
          "git_refs_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
          },
          "git_tags_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
          },
          "git_url": {
            "type": "string"
          },
          "issue_comment_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
          },
          "issue_events_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
          },
          "issues_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
          },
          "keys_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
          },
          "labels_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
          },
          "languages_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/languages"
          },
          "merges_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/merges"
          },
          "milestones_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
          },
          "notifications_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
          },
          "pulls_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
          },
          "releases_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
          },
          "ssh_url": {
            "type": "string"
          },
          "stargazers_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
          },
          "statuses_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
          },
          "subscribers_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
          },
          "tags_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/tags"
          },
          "teams_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/teams"
          },
          "trees_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          },
          "clone_url": {
            "type": "string"
          },
          "mirror_url": {
            "type": "string",
            "nullable": true
          },
          "hooks_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "svn_url": {
            "type": "string"
          },
          "homepage": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "forks_count": {
            "type": "integer"
          },
          "stargazers_count": {
            "type": "integer"
          },
          "watchers_count": {
            "type": "integer"
          },
          "size": {
            "description": "The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.",
            "type": "integer"
          },
          "default_branch": {
            "type": "string"
          },
          "open_issues_count": {
            "type": "integer"
          },
          "is_template": {
            "type": "boolean"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "type": "boolean"
          },
          "has_projects": {
            "type": "boolean"
          },
          "has_wiki": {
            "type": "boolean"
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "type": "boolean"
          },
          "has_discussions": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "visibility": {
            "type": "string"
          },
          "pushed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:06:43Z",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:14:43Z",
            "nullable": true
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "pull": {
                "type": "boolean"
              }
            }
          },
          "role_name": {
            "type": "string",
            "example": "admin"
          },
          "temp_clone_token": {
            "type": "string"
          },
          "delete_branch_on_merge": {
            "type": "boolean"
          },
          "subscribers_count": {
            "type": "integer"
          },
          "network_count": {
            "type": "integer"
          },
          "code_of_conduct": {
            "$ref": "#/components/schemas/code-of-conduct"
          },
          "license": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "spdx_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "forks": {
            "type": "integer",
            "example": 0
          },
          "open_issues": {
            "type": "integer",
            "example": 0
          },
          "watchers": {
            "type": "integer",
            "example": 0
          },
          "allow_forking": {
            "type": "boolean"
          },
          "web_commit_signoff_required": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url"
        ]
      },
      "code-scanning-alert-state": {
        "type": "string",
        "description": "State of a code scanning alert.",
        "enum": [
          "open",
          "closed",
          "dismissed",
          "fixed"
        ]
      },
      "code-scanning-organization-alert-items": {
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/alert-number"
          },
          "created_at": {
            "$ref": "#/components/schemas/alert-created-at"
          },
          "updated_at": {
            "$ref": "#/components/schemas/alert-updated-at"
          },
          "url": {
            "$ref": "#/components/schemas/alert-url"
          },
          "html_url": {
            "$ref": "#/components/schemas/alert-html-url"
          },
          "instances_url": {
            "$ref": "#/components/schemas/alert-instances-url"
          },
          "state": {
            "$ref": "#/components/schemas/code-scanning-alert-state"
          },
          "fixed_at": {
            "$ref": "#/components/schemas/alert-fixed-at"
          },
          "dismissed_by": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "dismissed_at": {
            "$ref": "#/components/schemas/alert-dismissed-at"
          },
          "dismissed_reason": {
            "$ref": "#/components/schemas/code-scanning-alert-dismissed-reason"
          },
          "rule": {
            "$ref": "#/components/schemas/code-scanning-alert-rule"
          },
          "tool": {
            "$ref": "#/components/schemas/code-scanning-analysis-tool"
          },
          "most_recent_instance": {
            "$ref": "#/components/schemas/code-scanning-alert-instance"
          },
          "repository": {
            "$ref": "#/components/schemas/simple-repository"
          }
        },
        "required": [
          "number",
          "created_at",
          "url",
          "html_url",
          "instances_url",
          "state",
          "dismissed_by",
          "dismissed_at",
          "dismissed_reason",
          "rule",
          "tool",
          "most_recent_instance",
          "repository"
        ]
      },
      "external-group": {
        "title": "ExternalGroup",
        "description": "Information about an external group's usage and its members",
        "type": "object",
        "required": [
          "group_id",
          "group_name",
          "teams",
          "members"
        ],
        "properties": {
          "group_id": {
            "description": "The internal ID of the group",
            "example": 1,
            "type": "integer"
          },
          "group_name": {
            "description": "The display name for the group",
            "example": "group-azuread-test",
            "type": "string"
          },
          "updated_at": {
            "description": "The date when the group was last updated_at",
            "example": "2021-01-03 22:27:15:000 -700",
            "type": "string"
          },
          "teams": {
            "description": "An array of teams linked to this group",
            "example": [
              {
                "team_id": 1,
                "team_name": "team-test"
              },
              {
                "team_id": 2,
                "team_name": "team-test2"
              }
            ],
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "team_id",
                "team_name"
              ],
              "properties": {
                "team_id": {
                  "description": "The id for a team",
                  "example": 1,
                  "type": "integer"
                },
                "team_name": {
                  "description": "The name of the team",
                  "example": "team-test",
                  "type": "string"
                }
              }
            }
          },
          "members": {
            "description": "An array of external members linked to this group",
            "example": [
              {
                "member_id": 1,
                "member_login": "mona-lisa_eocsaxrs",
                "member_name": "Mona Lisa",
                "member_email": "mona_lisa@github.com"
              },
              {
                "member_id": 2,
                "member_login": "octo-lisa_eocsaxrs",
                "member_name": "Octo Lisa",
                "member_email": "octo_lisa@github.com"
              }
            ],
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "member_id",
                "member_login",
                "member_name",
                "member_email"
              ],
              "properties": {
                "member_id": {
                  "description": "The internal user ID of the identity",
                  "example": 1,
                  "type": "integer"
                },
                "member_login": {
                  "description": "The handle/login for the user",
                  "example": "mona-lisa_eocsaxrs",
                  "type": "string"
                },
                "member_name": {
                  "description": "The user display name/profile name",
                  "example": "Mona Lisa",
                  "type": "string"
                },
                "member_email": {
                  "description": "An email attached to a user",
                  "example": "mona_lisa@github.com",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "external-groups": {
        "title": "ExternalGroups",
        "description": "A list of external groups available to be connected to a team",
        "type": "object",
        "properties": {
          "groups": {
            "description": "An array of external groups available to be mapped to a team",
            "example": [
              {
                "group_id": 1,
                "group_name": "group-azuread-test",
                "updated_at": "2021-01-03 22:27:15:000 -700"
              },
              {
                "group_id": 2,
                "group_name": "group-azuread-test2",
                "updated_at": "2021-06-03 22:27:15:000 -700"
              }
            ],
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "group_id",
                "group_name",
                "updated_at"
              ],
              "properties": {
                "group_id": {
                  "description": "The internal ID of the group",
                  "example": 1,
                  "type": "integer"
                },
                "group_name": {
                  "description": "The display name of the group",
                  "example": "group-azuread-test",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The time of the last update for this group",
                  "example": "2019-06-03 22:27:15:000 -700",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "migration": {
        "title": "Migration",
        "description": "A migration.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 79
          },
          "owner": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "guid": {
            "type": "string",
            "example": "0b989ba4-242f-11e5-81e1-c7b6966d2516"
          },
          "state": {
            "type": "string",
            "example": "pending"
          },
          "lock_repositories": {
            "type": "boolean",
            "example": true
          },
          "exclude_metadata": {
            "type": "boolean"
          },
          "exclude_git_data": {
            "type": "boolean"
          },
          "exclude_attachments": {
            "type": "boolean"
          },
          "exclude_releases": {
            "type": "boolean"
          },
          "exclude_owner_projects": {
            "type": "boolean"
          },
          "org_metadata_only": {
            "type": "boolean"
          },
          "repositories": {
            "type": "array",
            "description": "The repositories included in the migration. Only returned for export migrations.",
            "items": {
              "$ref": "#/components/schemas/repository"
            }
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/orgs/octo-org/migrations/79"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2015-07-06T15:33:38-07:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2015-07-06T15:33:38-07:00"
          },
          "node_id": {
            "type": "string"
          },
          "archive_url": {
            "type": "string",
            "format": "uri"
          },
          "exclude": {
            "description": "Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `\"repositories\"`.",
            "type": "array",
            "items": {
              "description": "Allowed values that can be passed to the exclude parameter. The array can include any of: `\"repositories\"`.",
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "node_id",
          "owner",
          "guid",
          "state",
          "lock_repositories",
          "exclude_metadata",
          "exclude_git_data",
          "exclude_attachments",
          "exclude_releases",
          "exclude_owner_projects",
          "org_metadata_only",
          "repositories",
          "url",
          "created_at",
          "updated_at"
        ]
      },
      "team-repository": {
        "title": "Team Repository",
        "description": "A team's access to a repository.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the repository",
            "example": 42,
            "type": "integer"
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
          },
          "name": {
            "description": "The name of the repository.",
            "type": "string",
            "example": "Team Environment"
          },
          "full_name": {
            "type": "string",
            "example": "octocat/Hello-World"
          },
          "license": {
            "$ref": "#/components/schemas/nullable-license-simple"
          },
          "forks": {
            "type": "integer"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean"
              },
              "pull": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              }
            },
            "required": [
              "admin",
              "pull",
              "push"
            ]
          },
          "role_name": {
            "type": "string",
            "example": "admin"
          },
          "owner": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "private": {
            "description": "Whether the repository is private or public.",
            "default": false,
            "type": "boolean"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World"
          },
          "description": {
            "type": "string",
            "example": "This your first repo!",
            "nullable": true
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World"
          },
          "archive_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
          },
          "assignees_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
          },
          "blobs_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
          },
          "branches_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
          },
          "collaborators_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
          },
          "comments_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
          },
          "commits_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
          },
          "compare_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
          },
          "contents_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
          },
          "contributors_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
          },
          "deployments_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
          },
          "downloads_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
          },
          "events_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/events"
          },
          "forks_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/forks"
          },
          "git_commits_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
          },
          "git_refs_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
          },
          "git_tags_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
          },
          "git_url": {
            "type": "string",
            "example": "git:github.com/octocat/Hello-World.git"
          },
          "issue_comment_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
          },
          "issue_events_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
          },
          "issues_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
          },
          "keys_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
          },
          "labels_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
          },
          "languages_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/languages"
          },
          "merges_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/merges"
          },
          "milestones_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
          },
          "notifications_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
          },
          "pulls_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
          },
          "releases_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
          },
          "ssh_url": {
            "type": "string",
            "example": "git@github.com:octocat/Hello-World.git"
          },
          "stargazers_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
          },
          "statuses_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
          },
          "subscribers_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
          },
          "tags_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/tags"
          },
          "teams_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/teams"
          },
          "trees_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          },
          "clone_url": {
            "type": "string",
            "example": "https://github.com/octocat/Hello-World.git"
          },
          "mirror_url": {
            "type": "string",
            "format": "uri",
            "example": "git:git.example.com/octocat/Hello-World",
            "nullable": true
          },
          "hooks_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "svn_url": {
            "type": "string",
            "format": "uri",
            "example": "https://svn.github.com/octocat/Hello-World"
          },
          "homepage": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "forks_count": {
            "type": "integer",
            "example": 9
          },
          "stargazers_count": {
            "type": "integer",
            "example": 80
          },
          "watchers_count": {
            "type": "integer",
            "example": 80
          },
          "size": {
            "type": "integer",
            "example": 108
          },
          "default_branch": {
            "description": "The default branch of the repository.",
            "type": "string",
            "example": "master"
          },
          "open_issues_count": {
            "type": "integer",
            "example": 0
          },
          "is_template": {
            "description": "Whether this repository acts as a template that can be used to generate new repositories.",
            "default": false,
            "type": "boolean",
            "example": true
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "description": "Whether issues are enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "has_projects": {
            "description": "Whether projects are enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "has_wiki": {
            "description": "Whether the wiki is enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "description": "Whether downloads are enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "archived": {
            "description": "Whether the repository is archived.",
            "default": false,
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean",
            "description": "Returns whether or not this repository disabled."
          },
          "visibility": {
            "description": "The repository visibility: public, private, or internal.",
            "default": "public",
            "type": "string"
          },
          "pushed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:06:43Z",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:14:43Z",
            "nullable": true
          },
          "allow_rebase_merge": {
            "description": "Whether to allow rebase merges for pull requests.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "template_repository": {
            "$ref": "#/components/schemas/nullable-repository"
          },
          "temp_clone_token": {
            "type": "string"
          },
          "allow_squash_merge": {
            "description": "Whether to allow squash merges for pull requests.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "allow_auto_merge": {
            "description": "Whether to allow Auto-merge to be used on pull requests.",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "delete_branch_on_merge": {
            "description": "Whether to delete head branches when pull requests are merged",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "allow_merge_commit": {
            "description": "Whether to allow merge commits for pull requests.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "allow_forking": {
            "description": "Whether to allow forking this repo",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "web_commit_signoff_required": {
            "description": "Whether to require contributors to sign off on web-based commits",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "subscribers_count": {
            "type": "integer"
          },
          "network_count": {
            "type": "integer"
          },
          "open_issues": {
            "type": "integer"
          },
          "watchers": {
            "type": "integer"
          },
          "master_branch": {
            "type": "string"
          }
        },
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url",
          "clone_url",
          "default_branch",
          "forks",
          "forks_count",
          "git_url",
          "has_downloads",
          "has_issues",
          "has_projects",
          "has_wiki",
          "has_pages",
          "homepage",
          "language",
          "archived",
          "disabled",
          "mirror_url",
          "open_issues",
          "open_issues_count",
          "license",
          "pushed_at",
          "size",
          "ssh_url",
          "stargazers_count",
          "svn_url",
          "watchers",
          "watchers_count",
          "created_at",
          "updated_at"
        ]
      },
      "rate-limit-overview": {
        "title": "Rate Limit Overview",
        "description": "Rate Limit Overview",
        "type": "object",
        "properties": {
          "resources": {
            "type": "object",
            "properties": {
              "core": {
                "$ref": "#/components/schemas/rate-limit"
              },
              "graphql": {
                "$ref": "#/components/schemas/rate-limit"
              },
              "search": {
                "$ref": "#/components/schemas/rate-limit"
              },
              "source_import": {
                "$ref": "#/components/schemas/rate-limit"
              },
              "integration_manifest": {
                "$ref": "#/components/schemas/rate-limit"
              },
              "code_scanning_upload": {
                "$ref": "#/components/schemas/rate-limit"
              },
              "actions_runner_registration": {
                "$ref": "#/components/schemas/rate-limit"
              },
              "scim": {
                "$ref": "#/components/schemas/rate-limit"
              }
            },
            "required": [
              "core",
              "search"
            ]
          },
          "rate": {
            "$ref": "#/components/schemas/rate-limit"
          }
        },
        "required": [
          "rate",
          "resources"
        ]
      },
      "full-repository": {
        "title": "Full Repository",
        "description": "Full Repository",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1296269
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
          },
          "name": {
            "type": "string",
            "example": "Hello-World"
          },
          "full_name": {
            "type": "string",
            "example": "octocat/Hello-World"
          },
          "owner": {
            "$ref": "#/components/schemas/simple-user"
          },
          "private": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World"
          },
          "description": {
            "type": "string",
            "example": "This your first repo!",
            "nullable": true
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World"
          },
          "archive_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
          },
          "assignees_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
          },
          "blobs_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
          },
          "branches_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
          },
          "collaborators_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
          },
          "comments_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
          },
          "commits_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
          },
          "compare_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
          },
          "contents_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
          },
          "contributors_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
          },
          "deployments_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
          },
          "downloads_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
          },
          "events_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/events"
          },
          "forks_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/forks"
          },
          "git_commits_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
          },
          "git_refs_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
          },
          "git_tags_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
          },
          "git_url": {
            "type": "string",
            "example": "git:github.com/octocat/Hello-World.git"
          },
          "issue_comment_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
          },
          "issue_events_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
          },
          "issues_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
          },
          "keys_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
          },
          "labels_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
          },
          "languages_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/languages"
          },
          "merges_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/merges"
          },
          "milestones_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
          },
          "notifications_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
          },
          "pulls_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
          },
          "releases_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
          },
          "ssh_url": {
            "type": "string",
            "example": "git@github.com:octocat/Hello-World.git"
          },
          "stargazers_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
          },
          "statuses_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
          },
          "subscribers_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
          },
          "tags_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/tags"
          },
          "teams_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/teams"
          },
          "trees_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          },
          "clone_url": {
            "type": "string",
            "example": "https://github.com/octocat/Hello-World.git"
          },
          "mirror_url": {
            "type": "string",
            "format": "uri",
            "example": "git:git.example.com/octocat/Hello-World",
            "nullable": true
          },
          "hooks_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "svn_url": {
            "type": "string",
            "format": "uri",
            "example": "https://svn.github.com/octocat/Hello-World"
          },
          "homepage": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "forks_count": {
            "type": "integer",
            "example": 9
          },
          "stargazers_count": {
            "type": "integer",
            "example": 80
          },
          "watchers_count": {
            "type": "integer",
            "example": 80
          },
          "size": {
            "description": "The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.",
            "type": "integer",
            "example": 108
          },
          "default_branch": {
            "type": "string",
            "example": "master"
          },
          "open_issues_count": {
            "type": "integer",
            "example": 0
          },
          "is_template": {
            "type": "boolean",
            "example": true
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "octocat",
              "atom",
              "electron",
              "API"
            ]
          },
          "has_issues": {
            "type": "boolean",
            "example": true
          },
          "has_projects": {
            "type": "boolean",
            "example": true
          },
          "has_wiki": {
            "type": "boolean",
            "example": true
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "type": "boolean",
            "example": true
          },
          "has_discussions": {
            "type": "boolean",
            "example": true
          },
          "archived": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean",
            "description": "Returns whether or not this repository disabled."
          },
          "visibility": {
            "description": "The repository visibility: public, private, or internal.",
            "type": "string",
            "example": "public"
          },
          "pushed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:06:43Z"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:14:43Z"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "pull": {
                "type": "boolean"
              }
            },
            "required": [
              "admin",
              "pull",
              "push"
            ]
          },
          "allow_rebase_merge": {
            "type": "boolean",
            "example": true
          },
          "template_repository": {
            "$ref": "#/components/schemas/nullable-repository"
          },
          "temp_clone_token": {
            "type": "string",
            "nullable": true
          },
          "allow_squash_merge": {
            "type": "boolean",
            "example": true
          },
          "allow_auto_merge": {
            "type": "boolean",
            "example": false
          },
          "delete_branch_on_merge": {
            "type": "boolean",
            "example": false
          },
          "allow_merge_commit": {
            "type": "boolean",
            "example": true
          },
          "allow_update_branch": {
            "type": "boolean",
            "example": true
          },
          "use_squash_pr_title_as_default": {
            "type": "boolean",
            "example": false
          },
          "allow_forking": {
            "type": "boolean",
            "example": true
          },
          "web_commit_signoff_required": {
            "type": "boolean",
            "example": false
          },
          "subscribers_count": {
            "type": "integer",
            "example": 42
          },
          "network_count": {
            "type": "integer",
            "example": 0
          },
          "license": {
            "$ref": "#/components/schemas/nullable-license-simple"
          },
          "organization": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "parent": {
            "$ref": "#/components/schemas/repository"
          },
          "source": {
            "$ref": "#/components/schemas/repository"
          },
          "forks": {
            "type": "integer"
          },
          "master_branch": {
            "type": "string"
          },
          "open_issues": {
            "type": "integer"
          },
          "watchers": {
            "type": "integer"
          },
          "anonymous_access_enabled": {
            "description": "Whether anonymous git access is allowed.",
            "default": true,
            "type": "boolean"
          },
          "code_of_conduct": {
            "$ref": "#/components/schemas/code-of-conduct-simple"
          },
          "security_and_analysis": {
            "$ref": "#/components/schemas/security-and-analysis"
          }
        },
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url",
          "clone_url",
          "default_branch",
          "forks",
          "forks_count",
          "git_url",
          "has_downloads",
          "has_issues",
          "has_projects",
          "has_wiki",
          "has_pages",
          "has_discussions",
          "homepage",
          "language",
          "archived",
          "disabled",
          "mirror_url",
          "open_issues",
          "open_issues_count",
          "license",
          "pushed_at",
          "size",
          "ssh_url",
          "stargazers_count",
          "svn_url",
          "watchers",
          "watchers_count",
          "created_at",
          "updated_at",
          "network_count",
          "subscribers_count"
        ]
      },
      "artifact": {
        "title": "Artifact",
        "description": "An artifact",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 5
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOkNoZWNrU3VpdGU1"
          },
          "name": {
            "description": "The name of the artifact.",
            "type": "string",
            "example": "AdventureWorks.Framework"
          },
          "size_in_bytes": {
            "description": "The size in bytes of the artifact.",
            "type": "integer",
            "example": 12345
          },
          "url": {
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/artifacts/5"
          },
          "archive_download_url": {
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip"
          },
          "expired": {
            "description": "Whether or not the artifact has expired.",
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "workflow_run": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "example": 10,
                "type": "integer"
              },
              "repository_id": {
                "example": 42,
                "type": "integer"
              },
              "head_repository_id": {
                "example": 42,
                "type": "integer"
              },
              "head_branch": {
                "example": "main",
                "type": "string"
              },
              "head_sha": {
                "example": "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "node_id",
          "name",
          "size_in_bytes",
          "url",
          "archive_download_url",
          "expired",
          "created_at",
          "expires_at",
          "updated_at"
        ]
      },
      "job": {
        "title": "Job",
        "description": "Information of a job execution in a workflow run",
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the job.",
            "example": 21,
            "type": "integer"
          },
          "run_id": {
            "description": "The id of the associated workflow run.",
            "example": 5,
            "type": "integer"
          },
          "run_url": {
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/runs/5"
          },
          "run_attempt": {
            "type": "integer",
            "description": "Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDg6Q2hlY2tSdW40"
          },
          "head_sha": {
            "description": "The SHA of the commit that is being run.",
            "example": "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d",
            "type": "string"
          },
          "url": {
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/jobs/21"
          },
          "html_url": {
            "type": "string",
            "example": "https://github.com/github/hello-world/runs/4",
            "nullable": true
          },
          "status": {
            "description": "The phase of the lifecycle that the job is currently in.",
            "example": "queued",
            "type": "string",
            "enum": [
              "queued",
              "in_progress",
              "completed"
            ]
          },
          "conclusion": {
            "description": "The outcome of the job.",
            "example": "success",
            "type": "string",
            "nullable": true,
            "enum": [
              "success",
              "failure",
              "neutral",
              "cancelled",
              "skipped",
              "timed_out",
              "action_required"
            ]
          },
          "started_at": {
            "description": "The time that the job started, in ISO 8601 format.",
            "example": "2019-08-08T08:00:00-07:00",
            "format": "date-time",
            "type": "string"
          },
          "completed_at": {
            "description": "The time that the job finished, in ISO 8601 format.",
            "example": "2019-08-08T08:00:00-07:00",
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "name": {
            "description": "The name of the job.",
            "example": "test-coverage",
            "type": "string"
          },
          "steps": {
            "description": "Steps in this job.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "status",
                "conclusion",
                "number"
              ],
              "properties": {
                "status": {
                  "description": "The phase of the lifecycle that the job is currently in.",
                  "example": "queued",
                  "type": "string",
                  "enum": [
                    "queued",
                    "in_progress",
                    "completed"
                  ]
                },
                "conclusion": {
                  "description": "The outcome of the job.",
                  "example": "success",
                  "type": "string",
                  "nullable": true
                },
                "name": {
                  "description": "The name of the job.",
                  "example": "test-coverage",
                  "type": "string"
                },
                "number": {
                  "type": "integer",
                  "example": 1
                },
                "started_at": {
                  "description": "The time that the step started, in ISO 8601 format.",
                  "example": "2019-08-08T08:00:00-07:00",
                  "format": "date-time",
                  "type": "string",
                  "nullable": true
                },
                "completed_at": {
                  "description": "The time that the job finished, in ISO 8601 format.",
                  "example": "2019-08-08T08:00:00-07:00",
                  "format": "date-time",
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "check_run_url": {
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/check-runs/4"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Labels for the workflow job. Specified by the \"runs_on\" attribute in the action's workflow file.",
            "example": [
              "self-hosted",
              "foo",
              "bar"
            ]
          },
          "runner_id": {
            "type": "integer",
            "nullable": true,
            "example": 1,
            "description": "The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)"
          },
          "runner_name": {
            "type": "string",
            "nullable": true,
            "example": "my runner",
            "description": "The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)"
          },
          "runner_group_id": {
            "type": "integer",
            "nullable": true,
            "example": 2,
            "description": "The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)"
          },
          "runner_group_name": {
            "type": "string",
            "nullable": true,
            "example": "my runner group",
            "description": "The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)"
          },
          "workflow_name": {
            "type": "string",
            "description": "The name of the workflow.",
            "nullable": true,
            "example": "Build"
          },
          "head_branch": {
            "type": "string",
            "description": "The name of the current branch.",
            "nullable": true,
            "example": "main"
          }
        },
        "required": [
          "id",
          "node_id",
          "run_id",
          "run_url",
          "head_sha",
          "workflow_name",
          "head_branch",
          "name",
          "url",
          "html_url",
          "status",
          "conclusion",
          "started_at",
          "completed_at",
          "check_run_url",
          "labels",
          "runner_id",
          "runner_name",
          "runner_group_id",
          "runner_group_name"
        ]
      },
      "workflow-run": {
        "title": "Workflow Run",
        "description": "An invocation of a workflow",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the workflow run.",
            "example": 5
          },
          "name": {
            "type": "string",
            "description": "The name of the workflow run.",
            "nullable": true,
            "example": "Build"
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOkNoZWNrU3VpdGU1"
          },
          "check_suite_id": {
            "type": "integer",
            "description": "The ID of the associated check suite.",
            "example": 42
          },
          "check_suite_node_id": {
            "type": "string",
            "description": "The node ID of the associated check suite.",
            "example": "MDEwOkNoZWNrU3VpdGU0Mg=="
          },
          "head_branch": {
            "type": "string",
            "nullable": true,
            "example": "master"
          },
          "head_sha": {
            "description": "The SHA of the head commit that points to the version of the workflow being run.",
            "example": "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d",
            "type": "string"
          },
          "path": {
            "description": "The full path of the workflow",
            "example": "octocat/octo-repo/.github/workflows/ci.yml@main",
            "type": "string"
          },
          "run_number": {
            "type": "integer",
            "description": "The auto incrementing run number for the workflow run.",
            "example": 106
          },
          "run_attempt": {
            "type": "integer",
            "description": "Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.",
            "example": 1
          },
          "referenced_workflows": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/referenced-workflow"
            }
          },
          "event": {
            "type": "string",
            "example": "push"
          },
          "status": {
            "type": "string",
            "nullable": true,
            "example": "completed"
          },
          "conclusion": {
            "type": "string",
            "nullable": true,
            "example": "neutral"
          },
          "workflow_id": {
            "type": "integer",
            "description": "The ID of the parent workflow.",
            "example": 5
          },
          "url": {
            "type": "string",
            "description": "The URL to the workflow run.",
            "example": "https://api.github.com/repos/github/hello-world/actions/runs/5"
          },
          "html_url": {
            "type": "string",
            "example": "https://github.com/github/hello-world/suites/4"
          },
          "pull_requests": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/pull-request-minimal"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "actor": {
            "$ref": "#/components/schemas/simple-user"
          },
          "triggering_actor": {
            "$ref": "#/components/schemas/simple-user"
          },
          "run_started_at": {
            "type": "string",
            "format": "date-time",
            "description": "The start time of the latest run. Resets on re-run."
          },
          "jobs_url": {
            "description": "The URL to the jobs for the workflow run.",
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/jobs"
          },
          "logs_url": {
            "description": "The URL to download the logs for the workflow run.",
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/logs"
          },
          "check_suite_url": {
            "description": "The URL to the associated check suite.",
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/check-suites/12"
          },
          "artifacts_url": {
            "description": "The URL to the artifacts for the workflow run.",
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts"
          },
          "cancel_url": {
            "description": "The URL to cancel the workflow run.",
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/cancel"
          },
          "rerun_url": {
            "description": "The URL to rerun the workflow run.",
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun"
          },
          "previous_attempt_url": {
            "nullable": true,
            "description": "The URL to the previous attempted run of this workflow, if one exists.",
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3"
          },
          "workflow_url": {
            "description": "The URL to the workflow.",
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml"
          },
          "head_commit": {
            "$ref": "#/components/schemas/nullable-simple-commit"
          },
          "repository": {
            "$ref": "#/components/schemas/minimal-repository"
          },
          "head_repository": {
            "$ref": "#/components/schemas/minimal-repository"
          },
          "head_repository_id": {
            "type": "integer",
            "example": 5
          },
          "display_title": {
            "type": "string",
            "example": "Simple Workflow",
            "description": "The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow."
          }
        },
        "required": [
          "id",
          "node_id",
          "head_branch",
          "run_number",
          "display_title",
          "event",
          "status",
          "conclusion",
          "head_sha",
          "path",
          "workflow_id",
          "url",
          "html_url",
          "created_at",
          "updated_at",
          "head_commit",
          "head_repository",
          "repository",
          "jobs_url",
          "logs_url",
          "check_suite_url",
          "cancel_url",
          "rerun_url",
          "artifacts_url",
          "workflow_url",
          "pull_requests"
        ]
      },
      "autolink": {
        "title": "Autolink reference",
        "description": "An autolink reference.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 3
          },
          "key_prefix": {
            "description": "The prefix of a key that is linkified.",
            "example": "TICKET-",
            "type": "string"
          },
          "url_template": {
            "description": "A template for the target URL that is generated if a key was found.",
            "example": "https://example.com/TICKET?query=<num>",
            "type": "string"
          }
        },
        "required": [
          "id",
          "key_prefix",
          "url_template"
        ]
      },
      "short-branch": {
        "title": "Short Branch",
        "description": "Short Branch",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "commit": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "sha",
              "url"
            ]
          },
          "protected": {
            "type": "boolean"
          },
          "protection": {
            "$ref": "#/components/schemas/branch-protection"
          },
          "protection_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "name",
          "commit",
          "protected"
        ]
      },
      "branch-with-protection": {
        "title": "Branch With Protection",
        "description": "Branch With Protection",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "commit": {
            "$ref": "#/components/schemas/commit"
          },
          "_links": {
            "type": "object",
            "properties": {
              "html": {
                "type": "string"
              },
              "self": {
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "html",
              "self"
            ]
          },
          "protected": {
            "type": "boolean"
          },
          "protection": {
            "$ref": "#/components/schemas/branch-protection"
          },
          "protection_url": {
            "type": "string",
            "format": "uri"
          },
          "pattern": {
            "type": "string",
            "example": "\"mas*\""
          },
          "required_approving_review_count": {
            "type": "integer",
            "example": 1
          }
        },
        "required": [
          "name",
          "commit",
          "_links",
          "protection",
          "protected",
          "protection_url"
        ]
      },
      "branch-protection": {
        "title": "Branch Protection",
        "description": "Branch Protection",
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "required_status_checks": {
            "$ref": "#/components/schemas/protected-branch-required-status-check"
          },
          "enforce_admins": {
            "$ref": "#/components/schemas/protected-branch-admin-enforced"
          },
          "required_pull_request_reviews": {
            "$ref": "#/components/schemas/protected-branch-pull-request-review"
          },
          "restrictions": {
            "$ref": "#/components/schemas/branch-restriction-policy"
          },
          "required_linear_history": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "allow_force_pushes": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "allow_deletions": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "block_creations": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "required_conversation_resolution": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "name": {
            "type": "string",
            "example": "\"branch/with/protection\""
          },
          "protection_url": {
            "type": "string",
            "example": "\"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection\""
          },
          "required_signatures": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
              },
              "enabled": {
                "type": "boolean",
                "example": true
              }
            },
            "required": [
              "url",
              "enabled"
            ]
          }
        }
      },
      "protected-branch": {
        "title": "Protected Branch",
        "description": "Branch protections protect branches",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "required_status_checks": {
            "$ref": "#/components/schemas/status-check-policy"
          },
          "required_pull_request_reviews": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri"
              },
              "dismiss_stale_reviews": {
                "type": "boolean"
              },
              "require_code_owner_reviews": {
                "type": "boolean"
              },
              "required_approving_review_count": {
                "type": "integer"
              },
              "dismissal_restrictions": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "users_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "teams_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/simple-user"
                    }
                  },
                  "teams": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/team"
                    }
                  },
                  "apps": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/integration"
                    }
                  }
                },
                "required": [
                  "url",
                  "users_url",
                  "teams_url",
                  "users",
                  "teams"
                ]
              },
              "bypass_pull_request_allowances": {
                "type": "object",
                "properties": {
                  "users": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/simple-user"
                    }
                  },
                  "teams": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/team"
                    }
                  },
                  "apps": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/integration"
                    }
                  }
                },
                "required": [
                  "users",
                  "teams"
                ]
              }
            },
            "required": [
              "url"
            ]
          },
          "required_signatures": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
              },
              "enabled": {
                "type": "boolean",
                "example": true
              }
            },
            "required": [
              "url",
              "enabled"
            ]
          },
          "enforce_admins": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri"
              },
              "enabled": {
                "type": "boolean"
              }
            },
            "additionalProperties": false,
            "required": [
              "url",
              "enabled"
            ]
          },
          "required_linear_history": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            },
            "additionalProperties": false,
            "required": [
              "enabled"
            ]
          },
          "allow_force_pushes": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            },
            "additionalProperties": false,
            "required": [
              "enabled"
            ]
          },
          "allow_deletions": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            },
            "additionalProperties": false,
            "required": [
              "enabled"
            ]
          },
          "restrictions": {
            "$ref": "#/components/schemas/branch-restriction-policy"
          },
          "required_conversation_resolution": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          },
          "block_creations": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            },
            "additionalProperties": false,
            "required": [
              "enabled"
            ]
          }
        },
        "required": [
          "url"
        ]
      },
      "protected-branch-pull-request-review": {
        "title": "Protected Branch Pull Request Review",
        "description": "Protected Branch Pull Request Review",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions"
          },
          "dismissal_restrictions": {
            "type": "object",
            "properties": {
              "users": {
                "description": "The list of users with review dismissal access.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/simple-user"
                }
              },
              "teams": {
                "description": "The list of teams with review dismissal access.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/team"
                }
              },
              "apps": {
                "description": "The list of apps with review dismissal access.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/integration"
                }
              },
              "url": {
                "type": "string",
                "example": "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions\""
              },
              "users_url": {
                "type": "string",
                "example": "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users\""
              },
              "teams_url": {
                "type": "string",
                "example": "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams\""
              }
            }
          },
          "bypass_pull_request_allowances": {
            "type": "object",
            "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
            "properties": {
              "users": {
                "description": "The list of users allowed to bypass pull request requirements.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/simple-user"
                }
              },
              "teams": {
                "description": "The list of teams allowed to bypass pull request requirements.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/team"
                }
              },
              "apps": {
                "description": "The list of apps allowed to bypass pull request requirements.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/integration"
                }
              }
            }
          },
          "dismiss_stale_reviews": {
            "type": "boolean",
            "example": true
          },
          "require_code_owner_reviews": {
            "type": "boolean",
            "example": true
          },
          "required_approving_review_count": {
            "type": "integer",
            "minimum": 0,
            "maximum": 6,
            "example": 2
          }
        },
        "required": [
          "dismiss_stale_reviews",
          "require_code_owner_reviews"
        ]
      },
      "check-suite": {
        "title": "CheckSuite",
        "description": "A suite of checks performed on the code of a given code change",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 5
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOkNoZWNrU3VpdGU1"
          },
          "head_branch": {
            "type": "string",
            "example": "master",
            "nullable": true
          },
          "head_sha": {
            "description": "The SHA of the head commit that is being checked.",
            "example": "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d",
            "type": "string"
          },
          "status": {
            "type": "string",
            "example": "completed",
            "enum": [
              "queued",
              "in_progress",
              "completed"
            ],
            "nullable": true
          },
          "conclusion": {
            "type": "string",
            "example": "neutral",
            "enum": [
              "success",
              "failure",
              "neutral",
              "cancelled",
              "skipped",
              "timed_out",
              "action_required",
              "startup_failure",
              "stale",
              null
            ],
            "nullable": true
          },
          "url": {
            "type": "string",
            "example": "https://api.github.com/repos/github/hello-world/check-suites/5",
            "nullable": true
          },
          "before": {
            "type": "string",
            "example": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
            "nullable": true
          },
          "after": {
            "type": "string",
            "example": "d6fde92930d4715a2b49857d24b940956b26d2d3",
            "nullable": true
          },
          "pull_requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/pull-request-minimal"
            },
            "nullable": true
          },
          "app": {
            "$ref": "#/components/schemas/nullable-integration"
          },
          "repository": {
            "$ref": "#/components/schemas/minimal-repository"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "head_commit": {
            "$ref": "#/components/schemas/simple-commit"
          },
          "latest_check_runs_count": {
            "type": "integer"
          },
          "check_runs_url": {
            "type": "string"
          },
          "rerequestable": {
            "type": "boolean"
          },
          "runs_rerequestable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "node_id",
          "head_branch",
          "status",
          "conclusion",
          "head_sha",
          "url",
          "before",
          "after",
          "created_at",
          "updated_at",
          "app",
          "head_commit",
          "repository",
          "latest_check_runs_count",
          "check_runs_url",
          "pull_requests"
        ]
      },
      "check-suite-preference": {
        "title": "Check Suite Preference",
        "description": "Check suite configuration preferences for a repository.",
        "type": "object",
        "required": [
          "preferences",
          "repository"
        ],
        "properties": {
          "preferences": {
            "type": "object",
            "properties": {
              "auto_trigger_checks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "app_id": {
                      "type": "integer"
                    },
                    "setting": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "app_id",
                    "setting"
                  ]
                }
              }
            }
          },
          "repository": {
            "$ref": "#/components/schemas/minimal-repository"
          }
        }
      },
      "code-scanning-alert-items": {
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/alert-number"
          },
          "created_at": {
            "$ref": "#/components/schemas/alert-created-at"
          },
          "url": {
            "$ref": "#/components/schemas/alert-url"
          },
          "html_url": {
            "$ref": "#/components/schemas/alert-html-url"
          },
          "instances_url": {
            "$ref": "#/components/schemas/alert-instances-url"
          },
          "state": {
            "$ref": "#/components/schemas/code-scanning-alert-state"
          },
          "dismissed_by": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "dismissed_at": {
            "$ref": "#/components/schemas/alert-dismissed-at"
          },
          "dismissed_reason": {
            "$ref": "#/components/schemas/code-scanning-alert-dismissed-reason"
          },
          "rule": {
            "$ref": "#/components/schemas/code-scanning-alert-rule-summary"
          },
          "tool": {
            "$ref": "#/components/schemas/code-scanning-analysis-tool"
          },
          "most_recent_instance": {
            "$ref": "#/components/schemas/code-scanning-alert-instance"
          }
        },
        "required": [
          "number",
          "created_at",
          "url",
          "html_url",
          "instances_url",
          "state",
          "dismissed_by",
          "dismissed_at",
          "dismissed_reason",
          "rule",
          "tool",
          "most_recent_instance"
        ]
      },
      "code-scanning-alert": {
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/alert-number"
          },
          "created_at": {
            "$ref": "#/components/schemas/alert-created-at"
          },
          "url": {
            "$ref": "#/components/schemas/alert-url"
          },
          "html_url": {
            "$ref": "#/components/schemas/alert-html-url"
          },
          "instances_url": {
            "$ref": "#/components/schemas/alert-instances-url"
          },
          "state": {
            "$ref": "#/components/schemas/code-scanning-alert-state"
          },
          "dismissed_by": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "dismissed_at": {
            "$ref": "#/components/schemas/alert-dismissed-at"
          },
          "dismissed_reason": {
            "$ref": "#/components/schemas/code-scanning-alert-dismissed-reason"
          },
          "rule": {
            "$ref": "#/components/schemas/code-scanning-alert-rule"
          },
          "tool": {
            "$ref": "#/components/schemas/code-scanning-analysis-tool"
          },
          "most_recent_instance": {
            "$ref": "#/components/schemas/code-scanning-alert-instance"
          }
        },
        "required": [
          "number",
          "created_at",
          "url",
          "html_url",
          "instances_url",
          "state",
          "dismissed_by",
          "dismissed_at",
          "dismissed_reason",
          "rule",
          "tool",
          "most_recent_instance"
        ]
      },
      "code-scanning-alert-set-state": {
        "description": "Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.",
        "type": "string",
        "enum": [
          "open",
          "dismissed"
        ]
      },
      "code-scanning-alert-dismissed-reason": {
        "type": "string",
        "description": "**Required when the state is dismissed.** The reason for dismissing or closing the alert.",
        "nullable": true,
        "enum": [
          null,
          "false positive",
          "won't fix",
          "used in tests"
        ]
      },
      "code-scanning-analysis-commit-sha": {
        "description": "The SHA of the commit to which the analysis you are uploading relates.",
        "type": "string",
        "minLength": 40,
        "maxLength": 40,
        "pattern": "^[0-9a-fA-F]+$"
      },
      "code-scanning-ref": {
        "type": "string",
        "description": "The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/pull/<number>/merge`, or `refs/pull/<number>/head`."
      },
      "code-scanning-analysis-sarif-file": {
        "description": "A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \"[SARIF support for code scanning](https://docs.github.com/github-ae@latest/code-security/secure-coding/sarif-support-for-code-scanning).\"",
        "type": "string"
      },
      "code-scanning-sarifs-receipt": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/code-scanning-analysis-sarif-id"
          },
          "url": {
            "type": "string",
            "description": "The REST API URL for checking the status of the upload.",
            "format": "uri",
            "readOnly": true
          }
        }
      },
      "collaborator": {
        "title": "Collaborator",
        "description": "Collaborator",
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "example": "octocat"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "node_id": {
            "type": "string",
            "example": "MDQ6VXNlcjE="
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/images/error/octocat_happy.gif"
          },
          "gravatar_id": {
            "type": "string",
            "example": "41d064eb2195891e12d0413f63227ea7",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat"
          },
          "followers_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/followers"
          },
          "following_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/following{/other_user}"
          },
          "gists_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/gists{/gist_id}"
          },
          "starred_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
          },
          "subscriptions_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/subscriptions"
          },
          "organizations_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/orgs"
          },
          "repos_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/repos"
          },
          "events_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/events{/privacy}"
          },
          "received_events_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/received_events"
          },
          "type": {
            "type": "string",
            "example": "User"
          },
          "site_admin": {
            "type": "boolean"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "pull": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              },
              "admin": {
                "type": "boolean"
              }
            },
            "required": [
              "pull",
              "push",
              "admin"
            ]
          },
          "role_name": {
            "type": "string",
            "example": "admin"
          }
        },
        "required": [
          "avatar_url",
          "events_url",
          "followers_url",
          "following_url",
          "gists_url",
          "gravatar_id",
          "html_url",
          "id",
          "node_id",
          "login",
          "organizations_url",
          "received_events_url",
          "repos_url",
          "site_admin",
          "starred_url",
          "subscriptions_url",
          "type",
          "url"
        ]
      },
      "repository-invitation": {
        "title": "Repository Invitation",
        "description": "Repository invitations let you manage who you collaborate with.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the repository invitation.",
            "example": 42,
            "type": "integer"
          },
          "repository": {
            "$ref": "#/components/schemas/minimal-repository"
          },
          "invitee": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "inviter": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "permissions": {
            "description": "The permission associated with the invitation.",
            "example": "read",
            "type": "string",
            "enum": [
              "read",
              "write",
              "admin",
              "triage",
              "maintain"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2016-06-13T14:52:50-05:00"
          },
          "expired": {
            "description": "Whether or not the invitation has expired",
            "type": "boolean"
          },
          "url": {
            "description": "URL for the repository invitation",
            "example": "https://api.github.com/user/repository-invitations/1",
            "type": "string"
          },
          "html_url": {
            "type": "string",
            "example": "https://github.com/octocat/Hello-World/invitations"
          },
          "node_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "node_id",
          "permissions",
          "inviter",
          "invitee",
          "repository",
          "url",
          "html_url",
          "created_at"
        ]
      },
      "repository-collaborator-permission": {
        "title": "Repository Collaborator Permission",
        "description": "Repository Collaborator Permission",
        "type": "object",
        "properties": {
          "permission": {
            "type": "string"
          },
          "role_name": {
            "type": "string",
            "example": "admin"
          },
          "user": {
            "$ref": "#/components/schemas/nullable-collaborator"
          }
        },
        "required": [
          "permission",
          "role_name",
          "user"
        ]
      },
      "reaction": {
        "title": "Reaction",
        "description": "Reactions to conversations provide a way to help people express their feelings more simply and effectively.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDg6UmVhY3Rpb24x"
          },
          "user": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "content": {
            "description": "The reaction to use",
            "example": "heart",
            "type": "string",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2016-05-20T20:09:31Z"
          }
        },
        "required": [
          "id",
          "node_id",
          "user",
          "content",
          "created_at"
        ]
      },
      "pull-request-simple": {
        "title": "Pull Request Simple",
        "description": "Pull Request Simple",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDExOlB1bGxSZXF1ZXN0MQ=="
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/pull/1347"
          },
          "diff_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/pull/1347.diff"
          },
          "patch_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/pull/1347.patch"
          },
          "issue_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
          },
          "commits_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
          },
          "review_comments_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
          },
          "review_comment_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
          },
          "comments_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
          },
          "statuses_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
          },
          "number": {
            "type": "integer",
            "example": 1347
          },
          "state": {
            "type": "string",
            "example": "open"
          },
          "locked": {
            "type": "boolean",
            "example": true
          },
          "title": {
            "type": "string",
            "example": "new-feature"
          },
          "user": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "body": {
            "type": "string",
            "example": "Please pull these awesome changes",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "default": {
                  "type": "boolean"
                }
              },
              "required": [
                "id",
                "node_id",
                "url",
                "name",
                "description",
                "color",
                "default"
              ]
            }
          },
          "milestone": {
            "$ref": "#/components/schemas/nullable-milestone"
          },
          "active_lock_reason": {
            "type": "string",
            "example": "too heated",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z",
            "nullable": true
          },
          "merged_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z",
            "nullable": true
          },
          "merge_commit_sha": {
            "type": "string",
            "example": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
            "nullable": true
          },
          "assignee": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/simple-user"
            },
            "nullable": true
          },
          "requested_reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/simple-user"
            },
            "nullable": true
          },
          "requested_teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/team"
            },
            "nullable": true
          },
          "head": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              },
              "repo": {
                "$ref": "#/components/schemas/repository"
              },
              "sha": {
                "type": "string"
              },
              "user": {
                "$ref": "#/components/schemas/nullable-simple-user"
              }
            },
            "required": [
              "label",
              "ref",
              "repo",
              "sha",
              "user"
            ]
          },
          "base": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              },
              "repo": {
                "$ref": "#/components/schemas/repository"
              },
              "sha": {
                "type": "string"
              },
              "user": {
                "$ref": "#/components/schemas/nullable-simple-user"
              }
            },
            "required": [
              "label",
              "ref",
              "repo",
              "sha",
              "user"
            ]
          },
          "_links": {
            "type": "object",
            "properties": {
              "comments": {
                "$ref": "#/components/schemas/link"
              },
              "commits": {
                "$ref": "#/components/schemas/link"
              },
              "statuses": {
                "$ref": "#/components/schemas/link"
              },
              "html": {
                "$ref": "#/components/schemas/link"
              },
              "issue": {
                "$ref": "#/components/schemas/link"
              },
              "review_comments": {
                "$ref": "#/components/schemas/link"
              },
              "review_comment": {
                "$ref": "#/components/schemas/link"
              },
              "self": {
                "$ref": "#/components/schemas/link"
              }
            },
            "required": [
              "comments",
              "commits",
              "statuses",
              "html",
              "issue",
              "review_comments",
              "review_comment",
              "self"
            ]
          },
          "author_association": {
            "$ref": "#/components/schemas/author-association"
          },
          "auto_merge": {
            "$ref": "#/components/schemas/auto-merge"
          },
          "draft": {
            "description": "Indicates whether or not the pull request is a draft.",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "_links",
          "assignee",
          "labels",
          "base",
          "body",
          "closed_at",
          "comments_url",
          "commits_url",
          "created_at",
          "diff_url",
          "head",
          "html_url",
          "id",
          "node_id",
          "issue_url",
          "merge_commit_sha",
          "merged_at",
          "milestone",
          "number",
          "patch_url",
          "review_comment_url",
          "review_comments_url",
          "statuses_url",
          "state",
          "locked",
          "title",
          "updated_at",
          "url",
          "user",
          "author_association",
          "auto_merge"
        ]
      },
      "combined-commit-status": {
        "title": "Combined Commit Status",
        "description": "Combined Commit Status",
        "type": "object",
        "properties": {
          "state": {
            "type": "string"
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/simple-commit-status"
            }
          },
          "sha": {
            "type": "string"
          },
          "total_count": {
            "type": "integer"
          },
          "repository": {
            "$ref": "#/components/schemas/minimal-repository"
          },
          "commit_url": {
            "type": "string",
            "format": "uri"
          },
          "url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "state",
          "sha",
          "total_count",
          "statuses",
          "repository",
          "commit_url",
          "url"
        ]
      },
      "event": {
        "title": "Event",
        "description": "Event",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "actor": {
            "$ref": "#/components/schemas/actor"
          },
          "repo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "id",
              "name",
              "url"
            ]
          },
          "org": {
            "$ref": "#/components/schemas/actor"
          },
          "payload": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "issue": {
                "$ref": "#/components/schemas/issue"
              },
              "comment": {
                "$ref": "#/components/schemas/issue-comment"
              },
              "pages": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "page_name": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "summary": {
                      "type": "string",
                      "nullable": true
                    },
                    "action": {
                      "type": "string"
                    },
                    "sha": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "public": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "actor",
          "repo",
          "payload",
          "public",
          "created_at"
        ]
      },
      "issue-event": {
        "title": "Issue Event",
        "description": "Issue Event",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOklzc3VlRXZlbnQx"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/issues/events/1"
          },
          "actor": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "event": {
            "type": "string",
            "example": "closed"
          },
          "commit_id": {
            "type": "string",
            "example": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "nullable": true
          },
          "commit_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-04-14T16:00:49Z"
          },
          "issue": {
            "$ref": "#/components/schemas/nullable-issue"
          },
          "label": {
            "$ref": "#/components/schemas/issue-event-label"
          },
          "assignee": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "assigner": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "review_requester": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "requested_reviewer": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "requested_team": {
            "$ref": "#/components/schemas/team"
          },
          "dismissed_review": {
            "$ref": "#/components/schemas/issue-event-dismissed-review"
          },
          "milestone": {
            "$ref": "#/components/schemas/issue-event-milestone"
          },
          "project_card": {
            "$ref": "#/components/schemas/issue-event-project-card"
          },
          "rename": {
            "$ref": "#/components/schemas/issue-event-rename"
          },
          "author_association": {
            "$ref": "#/components/schemas/author-association"
          },
          "lock_reason": {
            "type": "string",
            "nullable": true
          },
          "performed_via_github_app": {
            "$ref": "#/components/schemas/nullable-integration"
          }
        },
        "required": [
          "id",
          "node_id",
          "url",
          "actor",
          "event",
          "commit_id",
          "commit_url",
          "created_at"
        ]
      },
      "deploy-key": {
        "title": "Deploy Key",
        "description": "An SSH key granting access to a single repository.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "key": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "read_only": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "key",
          "url",
          "title",
          "verified",
          "created_at",
          "read_only"
        ]
      },
      "pull-request": {
        "type": "object",
        "title": "Pull Request",
        "description": "Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDExOlB1bGxSZXF1ZXN0MQ=="
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/pull/1347"
          },
          "diff_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/pull/1347.diff"
          },
          "patch_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/pull/1347.patch"
          },
          "issue_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
          },
          "commits_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
          },
          "review_comments_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
          },
          "review_comment_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
          },
          "comments_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
          },
          "statuses_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
          },
          "number": {
            "description": "Number uniquely identifying the pull request within its repository.",
            "example": 42,
            "type": "integer"
          },
          "state": {
            "description": "State of this Pull Request. Either `open` or `closed`.",
            "enum": [
              "open",
              "closed"
            ],
            "example": "open",
            "type": "string"
          },
          "locked": {
            "type": "boolean",
            "example": true
          },
          "title": {
            "description": "The title of the pull request.",
            "example": "Amazing new feature",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/simple-user"
          },
          "body": {
            "type": "string",
            "example": "Please pull these awesome changes",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "color": {
                  "type": "string"
                },
                "default": {
                  "type": "boolean"
                }
              },
              "required": [
                "id",
                "node_id",
                "url",
                "name",
                "description",
                "color",
                "default"
              ]
            }
          },
          "milestone": {
            "$ref": "#/components/schemas/nullable-milestone"
          },
          "active_lock_reason": {
            "type": "string",
            "example": "too heated",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z",
            "nullable": true
          },
          "merged_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z",
            "nullable": true
          },
          "merge_commit_sha": {
            "type": "string",
            "example": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
            "nullable": true
          },
          "assignee": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/simple-user"
            },
            "nullable": true
          },
          "requested_reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/simple-user"
            },
            "nullable": true
          },
          "requested_teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/team-simple"
            },
            "nullable": true
          },
          "head": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              },
              "repo": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "archive_url": {
                    "type": "string"
                  },
                  "assignees_url": {
                    "type": "string"
                  },
                  "blobs_url": {
                    "type": "string"
                  },
                  "branches_url": {
                    "type": "string"
                  },
                  "collaborators_url": {
                    "type": "string"
                  },
                  "comments_url": {
                    "type": "string"
                  },
                  "commits_url": {
                    "type": "string"
                  },
                  "compare_url": {
                    "type": "string"
                  },
                  "contents_url": {
                    "type": "string"
                  },
                  "contributors_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "deployments_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "downloads_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "events_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "fork": {
                    "type": "boolean"
                  },
                  "forks_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "git_commits_url": {
                    "type": "string"
                  },
                  "git_refs_url": {
                    "type": "string"
                  },
                  "git_tags_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "html_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "issue_comment_url": {
                    "type": "string"
                  },
                  "issue_events_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "keys_url": {
                    "type": "string"
                  },
                  "labels_url": {
                    "type": "string"
                  },
                  "languages_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "merges_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "milestones_url": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "notifications_url": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "avatar_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "html_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "id": {
                        "type": "integer"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "login": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "received_events_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "repos_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "site_admin": {
                        "type": "boolean"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "type": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string",
                        "format": "uri"
                      }
                    },
                    "required": [
                      "avatar_url",
                      "events_url",
                      "followers_url",
                      "following_url",
                      "gists_url",
                      "gravatar_id",
                      "html_url",
                      "id",
                      "node_id",
                      "login",
                      "organizations_url",
                      "received_events_url",
                      "repos_url",
                      "site_admin",
                      "starred_url",
                      "subscriptions_url",
                      "type",
                      "url"
                    ]
                  },
                  "private": {
                    "type": "boolean"
                  },
                  "pulls_url": {
                    "type": "string"
                  },
                  "releases_url": {
                    "type": "string"
                  },
                  "stargazers_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "statuses_url": {
                    "type": "string"
                  },
                  "subscribers_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "subscription_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "tags_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "teams_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "trees_url": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "clone_url": {
                    "type": "string"
                  },
                  "default_branch": {
                    "type": "string"
                  },
                  "forks": {
                    "type": "integer"
                  },
                  "forks_count": {
                    "type": "integer"
                  },
                  "git_url": {
                    "type": "string"
                  },
                  "has_downloads": {
                    "type": "boolean"
                  },
                  "has_issues": {
                    "type": "boolean"
                  },
                  "has_projects": {
                    "type": "boolean"
                  },
                  "has_wiki": {
                    "type": "boolean"
                  },
                  "has_pages": {
                    "type": "boolean"
                  },
                  "has_discussions": {
                    "type": "boolean"
                  },
                  "homepage": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true
                  },
                  "language": {
                    "type": "string",
                    "nullable": true
                  },
                  "master_branch": {
                    "type": "string"
                  },
                  "archived": {
                    "type": "boolean"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "visibility": {
                    "description": "The repository visibility: public, private, or internal.",
                    "type": "string"
                  },
                  "mirror_url": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true
                  },
                  "open_issues": {
                    "type": "integer"
                  },
                  "open_issues_count": {
                    "type": "integer"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "admin": {
                        "type": "boolean"
                      },
                      "maintain": {
                        "type": "boolean"
                      },
                      "push": {
                        "type": "boolean"
                      },
                      "triage": {
                        "type": "boolean"
                      },
                      "pull": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "admin",
                      "pull",
                      "push"
                    ]
                  },
                  "temp_clone_token": {
                    "type": "string"
                  },
                  "allow_merge_commit": {
                    "type": "boolean"
                  },
                  "allow_squash_merge": {
                    "type": "boolean"
                  },
                  "allow_rebase_merge": {
                    "type": "boolean"
                  },
                  "license": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                      },
                      "spdx_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "node_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "name",
                      "url",
                      "spdx_id",
                      "node_id"
                    ],
                    "nullable": true
                  },
                  "pushed_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "size": {
                    "type": "integer"
                  },
                  "ssh_url": {
                    "type": "string"
                  },
                  "stargazers_count": {
                    "type": "integer"
                  },
                  "svn_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "watchers": {
                    "type": "integer"
                  },
                  "watchers_count": {
                    "type": "integer"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "allow_forking": {
                    "type": "boolean"
                  },
                  "is_template": {
                    "type": "boolean"
                  },
                  "web_commit_signoff_required": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "archive_url",
                  "assignees_url",
                  "blobs_url",
                  "branches_url",
                  "collaborators_url",
                  "comments_url",
                  "commits_url",
                  "compare_url",
                  "contents_url",
                  "contributors_url",
                  "deployments_url",
                  "description",
                  "downloads_url",
                  "events_url",
                  "fork",
                  "forks_url",
                  "full_name",
                  "git_commits_url",
                  "git_refs_url",
                  "git_tags_url",
                  "hooks_url",
                  "html_url",
                  "id",
                  "node_id",
                  "issue_comment_url",
                  "issue_events_url",
                  "issues_url",
                  "keys_url",
                  "labels_url",
                  "languages_url",
                  "merges_url",
                  "milestones_url",
                  "name",
                  "notifications_url",
                  "owner",
                  "private",
                  "pulls_url",
                  "releases_url",
                  "stargazers_url",
                  "statuses_url",
                  "subscribers_url",
                  "subscription_url",
                  "tags_url",
                  "teams_url",
                  "trees_url",
                  "url",
                  "clone_url",
                  "default_branch",
                  "forks",
                  "forks_count",
                  "git_url",
                  "has_downloads",
                  "has_issues",
                  "has_projects",
                  "has_wiki",
                  "has_pages",
                  "has_discussions",
                  "homepage",
                  "language",
                  "archived",
                  "disabled",
                  "mirror_url",
                  "open_issues",
                  "open_issues_count",
                  "license",
                  "pushed_at",
                  "size",
                  "ssh_url",
                  "stargazers_count",
                  "svn_url",
                  "watchers",
                  "watchers_count",
                  "created_at",
                  "updated_at"
                ]
              },
              "sha": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "avatar_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string",
                    "nullable": true
                  },
                  "html_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "login": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "received_events_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "repos_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "site_admin": {
                    "type": "boolean"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "type": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": [
                  "avatar_url",
                  "events_url",
                  "followers_url",
                  "following_url",
                  "gists_url",
                  "gravatar_id",
                  "html_url",
                  "id",
                  "node_id",
                  "login",
                  "organizations_url",
                  "received_events_url",
                  "repos_url",
                  "site_admin",
                  "starred_url",
                  "subscriptions_url",
                  "type",
                  "url"
                ]
              }
            },
            "required": [
              "label",
              "ref",
              "repo",
              "sha",
              "user"
            ]
          },
          "base": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              },
              "repo": {
                "type": "object",
                "properties": {
                  "archive_url": {
                    "type": "string"
                  },
                  "assignees_url": {
                    "type": "string"
                  },
                  "blobs_url": {
                    "type": "string"
                  },
                  "branches_url": {
                    "type": "string"
                  },
                  "collaborators_url": {
                    "type": "string"
                  },
                  "comments_url": {
                    "type": "string"
                  },
                  "commits_url": {
                    "type": "string"
                  },
                  "compare_url": {
                    "type": "string"
                  },
                  "contents_url": {
                    "type": "string"
                  },
                  "contributors_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "deployments_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "downloads_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "events_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "fork": {
                    "type": "boolean"
                  },
                  "forks_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "git_commits_url": {
                    "type": "string"
                  },
                  "git_refs_url": {
                    "type": "string"
                  },
                  "git_tags_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "html_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "is_template": {
                    "type": "boolean"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "issue_comment_url": {
                    "type": "string"
                  },
                  "issue_events_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "keys_url": {
                    "type": "string"
                  },
                  "labels_url": {
                    "type": "string"
                  },
                  "languages_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "merges_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "milestones_url": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "notifications_url": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "avatar_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "html_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "id": {
                        "type": "integer"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "login": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "received_events_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "repos_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "site_admin": {
                        "type": "boolean"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string",
                        "format": "uri"
                      },
                      "type": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string",
                        "format": "uri"
                      }
                    },
                    "required": [
                      "avatar_url",
                      "events_url",
                      "followers_url",
                      "following_url",
                      "gists_url",
                      "gravatar_id",
                      "html_url",
                      "id",
                      "node_id",
                      "login",
                      "organizations_url",
                      "received_events_url",
                      "repos_url",
                      "site_admin",
                      "starred_url",
                      "subscriptions_url",
                      "type",
                      "url"
                    ]
                  },
                  "private": {
                    "type": "boolean"
                  },
                  "pulls_url": {
                    "type": "string"
                  },
                  "releases_url": {
                    "type": "string"
                  },
                  "stargazers_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "statuses_url": {
                    "type": "string"
                  },
                  "subscribers_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "subscription_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "tags_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "teams_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "trees_url": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "clone_url": {
                    "type": "string"
                  },
                  "default_branch": {
                    "type": "string"
                  },
                  "forks": {
                    "type": "integer"
                  },
                  "forks_count": {
                    "type": "integer"
                  },
                  "git_url": {
                    "type": "string"
                  },
                  "has_downloads": {
                    "type": "boolean"
                  },
                  "has_issues": {
                    "type": "boolean"
                  },
                  "has_projects": {
                    "type": "boolean"
                  },
                  "has_wiki": {
                    "type": "boolean"
                  },
                  "has_pages": {
                    "type": "boolean"
                  },
                  "has_discussions": {
                    "type": "boolean"
                  },
                  "homepage": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true
                  },
                  "language": {
                    "type": "string",
                    "nullable": true
                  },
                  "master_branch": {
                    "type": "string"
                  },
                  "archived": {
                    "type": "boolean"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "visibility": {
                    "description": "The repository visibility: public, private, or internal.",
                    "type": "string"
                  },
                  "mirror_url": {
                    "type": "string",
                    "format": "uri",
                    "nullable": true
                  },
                  "open_issues": {
                    "type": "integer"
                  },
                  "open_issues_count": {
                    "type": "integer"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "admin": {
                        "type": "boolean"
                      },
                      "maintain": {
                        "type": "boolean"
                      },
                      "push": {
                        "type": "boolean"
                      },
                      "triage": {
                        "type": "boolean"
                      },
                      "pull": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "admin",
                      "pull",
                      "push"
                    ]
                  },
                  "temp_clone_token": {
                    "type": "string"
                  },
                  "allow_merge_commit": {
                    "type": "boolean"
                  },
                  "allow_squash_merge": {
                    "type": "boolean"
                  },
                  "allow_rebase_merge": {
                    "type": "boolean"
                  },
                  "license": {
                    "$ref": "#/components/schemas/nullable-license-simple"
                  },
                  "pushed_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "size": {
                    "type": "integer"
                  },
                  "ssh_url": {
                    "type": "string"
                  },
                  "stargazers_count": {
                    "type": "integer"
                  },
                  "svn_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "watchers": {
                    "type": "integer"
                  },
                  "watchers_count": {
                    "type": "integer"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "allow_forking": {
                    "type": "boolean"
                  },
                  "web_commit_signoff_required": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "archive_url",
                  "assignees_url",
                  "blobs_url",
                  "branches_url",
                  "collaborators_url",
                  "comments_url",
                  "commits_url",
                  "compare_url",
                  "contents_url",
                  "contributors_url",
                  "deployments_url",
                  "description",
                  "downloads_url",
                  "events_url",
                  "fork",
                  "forks_url",
                  "full_name",
                  "git_commits_url",
                  "git_refs_url",
                  "git_tags_url",
                  "hooks_url",
                  "html_url",
                  "id",
                  "node_id",
                  "issue_comment_url",
                  "issue_events_url",
                  "issues_url",
                  "keys_url",
                  "labels_url",
                  "languages_url",
                  "merges_url",
                  "milestones_url",
                  "name",
                  "notifications_url",
                  "owner",
                  "private",
                  "pulls_url",
                  "releases_url",
                  "stargazers_url",
                  "statuses_url",
                  "subscribers_url",
                  "subscription_url",
                  "tags_url",
                  "teams_url",
                  "trees_url",
                  "url",
                  "clone_url",
                  "default_branch",
                  "forks",
                  "forks_count",
                  "git_url",
                  "has_downloads",
                  "has_issues",
                  "has_projects",
                  "has_wiki",
                  "has_pages",
                  "has_discussions",
                  "homepage",
                  "language",
                  "archived",
                  "disabled",
                  "mirror_url",
                  "open_issues",
                  "open_issues_count",
                  "license",
                  "pushed_at",
                  "size",
                  "ssh_url",
                  "stargazers_count",
                  "svn_url",
                  "watchers",
                  "watchers_count",
                  "created_at",
                  "updated_at"
                ]
              },
              "sha": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "avatar_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string",
                    "nullable": true
                  },
                  "html_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "login": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "received_events_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "repos_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "site_admin": {
                    "type": "boolean"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "type": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": [
                  "avatar_url",
                  "events_url",
                  "followers_url",
                  "following_url",
                  "gists_url",
                  "gravatar_id",
                  "html_url",
                  "id",
                  "node_id",
                  "login",
                  "organizations_url",
                  "received_events_url",
                  "repos_url",
                  "site_admin",
                  "starred_url",
                  "subscriptions_url",
                  "type",
                  "url"
                ]
              }
            },
            "required": [
              "label",
              "ref",
              "repo",
              "sha",
              "user"
            ]
          },
          "_links": {
            "type": "object",
            "properties": {
              "comments": {
                "$ref": "#/components/schemas/link"
              },
              "commits": {
                "$ref": "#/components/schemas/link"
              },
              "statuses": {
                "$ref": "#/components/schemas/link"
              },
              "html": {
                "$ref": "#/components/schemas/link"
              },
              "issue": {
                "$ref": "#/components/schemas/link"
              },
              "review_comments": {
                "$ref": "#/components/schemas/link"
              },
              "review_comment": {
                "$ref": "#/components/schemas/link"
              },
              "self": {
                "$ref": "#/components/schemas/link"
              }
            },
            "required": [
              "comments",
              "commits",
              "statuses",
              "html",
              "issue",
              "review_comments",
              "review_comment",
              "self"
            ]
          },
          "author_association": {
            "$ref": "#/components/schemas/author-association"
          },
          "auto_merge": {
            "$ref": "#/components/schemas/auto-merge"
          },
          "draft": {
            "description": "Indicates whether or not the pull request is a draft.",
            "example": false,
            "type": "boolean"
          },
          "merged": {
            "type": "boolean"
          },
          "mergeable": {
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "rebaseable": {
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "mergeable_state": {
            "type": "string",
            "example": "clean"
          },
          "merged_by": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "comments": {
            "type": "integer",
            "example": 10
          },
          "review_comments": {
            "type": "integer",
            "example": 0
          },
          "maintainer_can_modify": {
            "description": "Indicates whether maintainers can modify the pull request.",
            "example": true,
            "type": "boolean"
          },
          "commits": {
            "type": "integer",
            "example": 3
          },
          "additions": {
            "type": "integer",
            "example": 100
          },
          "deletions": {
            "type": "integer",
            "example": 3
          },
          "changed_files": {
            "type": "integer",
            "example": 5
          }
        },
        "required": [
          "_links",
          "assignee",
          "labels",
          "base",
          "body",
          "closed_at",
          "comments_url",
          "commits_url",
          "created_at",
          "diff_url",
          "head",
          "html_url",
          "id",
          "node_id",
          "issue_url",
          "merge_commit_sha",
          "merged_at",
          "milestone",
          "number",
          "patch_url",
          "review_comment_url",
          "review_comments_url",
          "statuses_url",
          "state",
          "locked",
          "title",
          "updated_at",
          "url",
          "user",
          "author_association",
          "auto_merge",
          "additions",
          "changed_files",
          "comments",
          "commits",
          "deletions",
          "mergeable",
          "mergeable_state",
          "merged",
          "maintainer_can_modify",
          "merged_by",
          "review_comments"
        ]
      },
      "pull-request-review-comment": {
        "title": "Pull Request Review Comment",
        "description": "Pull Request Review Comments are comments on a portion of the Pull Request's diff.",
        "type": "object",
        "properties": {
          "url": {
            "description": "URL for the pull request review comment",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
            "type": "string"
          },
          "pull_request_review_id": {
            "description": "The ID of the pull request review to which the comment belongs.",
            "example": 42,
            "type": "integer",
            "nullable": true
          },
          "id": {
            "description": "The ID of the pull request review comment.",
            "example": 1,
            "type": "integer"
          },
          "node_id": {
            "description": "The node ID of the pull request review comment.",
            "type": "string",
            "example": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"
          },
          "diff_hunk": {
            "description": "The diff of the line that the comment refers to.",
            "type": "string",
            "example": "@@ -16,33 +16,40 @@ public class Connection : IConnection..."
          },
          "path": {
            "description": "The relative path of the file to which the comment applies.",
            "example": "config/database.yaml",
            "type": "string"
          },
          "position": {
            "description": "The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.",
            "example": 1,
            "type": "integer"
          },
          "original_position": {
            "description": "The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.",
            "example": 4,
            "type": "integer"
          },
          "commit_id": {
            "description": "The SHA of the commit to which the comment applies.",
            "example": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "type": "string"
          },
          "original_commit_id": {
            "description": "The SHA of the original commit to which the comment applies.",
            "example": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
            "type": "string"
          },
          "in_reply_to_id": {
            "description": "The comment ID to reply to.",
            "example": 8,
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/simple-user"
          },
          "body": {
            "description": "The text of the comment.",
            "example": "We should probably include a check for null values here.",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-04-14T16:00:49Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-04-14T16:00:49Z"
          },
          "html_url": {
            "description": "HTML URL for the pull request review comment.",
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
          },
          "pull_request_url": {
            "description": "URL for the pull request that the review comment belongs to.",
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
          },
          "author_association": {
            "$ref": "#/components/schemas/author-association"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
                  }
                },
                "required": [
                  "href"
                ]
              },
              "html": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
                  }
                },
                "required": [
                  "href"
                ]
              },
              "pull_request": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
                  }
                },
                "required": [
                  "href"
                ]
              }
            },
            "required": [
              "self",
              "html",
              "pull_request"
            ]
          },
          "start_line": {
            "type": "integer",
            "description": "The first line of the range for a multi-line comment.",
            "example": 2,
            "nullable": true
          },
          "original_start_line": {
            "type": "integer",
            "description": "The first line of the range for a multi-line comment.",
            "example": 2,
            "nullable": true
          },
          "start_side": {
            "type": "string",
            "description": "The side of the first line of the range for a multi-line comment.",
            "enum": [
              "LEFT",
              "RIGHT"
            ],
            "default": "RIGHT",
            "nullable": true
          },
          "line": {
            "description": "The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
            "example": 2,
            "type": "integer"
          },
          "original_line": {
            "description": "The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
            "example": 2,
            "type": "integer"
          },
          "side": {
            "description": "The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment",
            "enum": [
              "LEFT",
              "RIGHT"
            ],
            "default": "RIGHT",
            "type": "string"
          },
          "subject_type": {
            "description": "The level at which the comment is targeted, can be a diff line or a file.",
            "type": "string",
            "enum": [
              "line",
              "file"
            ]
          },
          "reactions": {
            "$ref": "#/components/schemas/reaction-rollup"
          },
          "body_html": {
            "type": "string",
            "example": "\"<p>comment body</p>\""
          },
          "body_text": {
            "type": "string",
            "example": "\"comment body\""
          }
        },
        "required": [
          "url",
          "id",
          "node_id",
          "pull_request_review_id",
          "diff_hunk",
          "path",
          "commit_id",
          "original_commit_id",
          "user",
          "body",
          "created_at",
          "updated_at",
          "html_url",
          "pull_request_url",
          "author_association",
          "_links"
        ]
      },
      "release": {
        "title": "Release",
        "description": "A release.",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "html_url": {
            "type": "string",
            "format": "uri"
          },
          "assets_url": {
            "type": "string",
            "format": "uri"
          },
          "upload_url": {
            "type": "string"
          },
          "tarball_url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "zipball_url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "type": "integer"
          },
          "node_id": {
            "type": "string"
          },
          "tag_name": {
            "description": "The name of the tag.",
            "example": "v1.0.0",
            "type": "string"
          },
          "target_commitish": {
            "description": "Specifies the commitish value that determines where the Git tag is created from.",
            "example": "master",
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "draft": {
            "description": "true to create a draft (unpublished) release, false to create a published one.",
            "example": false,
            "type": "boolean"
          },
          "prerelease": {
            "description": "Whether to identify the release as a prerelease or a full release.",
            "example": false,
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "author": {
            "$ref": "#/components/schemas/simple-user"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/release-asset"
            }
          },
          "body_html": {
            "type": "string"
          },
          "body_text": {
            "type": "string"
          },
          "mentions_count": {
            "type": "integer"
          },
          "discussion_url": {
            "description": "The URL of the release discussion.",
            "type": "string",
            "format": "uri"
          },
          "reactions": {
            "$ref": "#/components/schemas/reaction-rollup"
          }
        },
        "required": [
          "assets_url",
          "upload_url",
          "tarball_url",
          "zipball_url",
          "created_at",
          "published_at",
          "draft",
          "id",
          "node_id",
          "author",
          "html_url",
          "name",
          "prerelease",
          "tag_name",
          "target_commitish",
          "assets",
          "url"
        ]
      },
      "secret-scanning-alert": {
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/alert-number"
          },
          "created_at": {
            "$ref": "#/components/schemas/alert-created-at"
          },
          "updated_at": {
            "$ref": "#/components/schemas/nullable-alert-updated-at"
          },
          "url": {
            "$ref": "#/components/schemas/alert-url"
          },
          "html_url": {
            "$ref": "#/components/schemas/alert-html-url"
          },
          "locations_url": {
            "type": "string",
            "format": "uri",
            "description": "The REST API URL of the code locations for this alert."
          },
          "state": {
            "$ref": "#/components/schemas/secret-scanning-alert-state"
          },
          "resolution": {
            "$ref": "#/components/schemas/secret-scanning-alert-resolution"
          },
          "resolved_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "nullable": true
          },
          "resolved_by": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "resolution_comment": {
            "type": "string",
            "description": "An optional comment to resolve an alert.",
            "nullable": true
          },
          "secret_type": {
            "type": "string",
            "description": "The type of secret that secret scanning detected."
          },
          "secret": {
            "type": "string",
            "description": "The secret that was detected."
          }
        }
      },
      "secret-scanning-alert-state": {
        "description": "Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.",
        "type": "string",
        "enum": [
          "open",
          "resolved"
        ]
      },
      "secret-scanning-alert-resolution": {
        "type": "string",
        "description": "**Required when the `state` is `resolved`.** The reason for resolving the alert.",
        "nullable": true,
        "enum": [
          "false_positive",
          "wont_fix",
          "revoked",
          "used_in_tests"
        ]
      },
      "secret-scanning-alert-resolution-comment": {
        "description": "An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.",
        "type": "string",
        "nullable": true
      },
      "code-search-result-item": {
        "title": "Code Search Result Item",
        "description": "Code Search Result Item",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "git_url": {
            "type": "string",
            "format": "uri"
          },
          "html_url": {
            "type": "string",
            "format": "uri"
          },
          "repository": {
            "$ref": "#/components/schemas/minimal-repository"
          },
          "score": {
            "type": "number"
          },
          "file_size": {
            "type": "integer"
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "last_modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "line_numbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "73..77",
              "77..78"
            ]
          },
          "text_matches": {
            "$ref": "#/components/schemas/search-result-text-matches"
          }
        },
        "required": [
          "score",
          "name",
          "path",
          "sha",
          "git_url",
          "html_url",
          "url",
          "repository"
        ]
      },
      "commit-search-result-item": {
        "title": "Commit Search Result Item",
        "description": "Commit Search Result Item",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "sha": {
            "type": "string"
          },
          "html_url": {
            "type": "string",
            "format": "uri"
          },
          "comments_url": {
            "type": "string",
            "format": "uri"
          },
          "commit": {
            "type": "object",
            "properties": {
              "author": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "name",
                  "email",
                  "date"
                ]
              },
              "committer": {
                "$ref": "#/components/schemas/nullable-git-user"
              },
              "comment_count": {
                "type": "integer"
              },
              "message": {
                "type": "string"
              },
              "tree": {
                "type": "object",
                "properties": {
                  "sha": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": [
                  "sha",
                  "url"
                ]
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "verification": {
                "$ref": "#/components/schemas/verification"
              }
            },
            "required": [
              "author",
              "committer",
              "comment_count",
              "message",
              "tree",
              "url"
            ]
          },
          "author": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "committer": {
            "$ref": "#/components/schemas/nullable-git-user"
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "sha": {
                  "type": "string"
                }
              }
            }
          },
          "repository": {
            "$ref": "#/components/schemas/minimal-repository"
          },
          "score": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "text_matches": {
            "$ref": "#/components/schemas/search-result-text-matches"
          }
        },
        "required": [
          "sha",
          "node_id",
          "url",
          "html_url",
          "author",
          "committer",
          "parents",
          "comments_url",
          "commit",
          "repository",
          "score"
        ]
      },
      "issue-search-result-item": {
        "title": "Issue Search Result Item",
        "description": "Issue Search Result Item",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "repository_url": {
            "type": "string",
            "format": "uri"
          },
          "labels_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string",
            "format": "uri"
          },
          "events_url": {
            "type": "string",
            "format": "uri"
          },
          "html_url": {
            "type": "string",
            "format": "uri"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "node_id": {
            "type": "string"
          },
          "number": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "active_lock_reason": {
            "type": "string",
            "nullable": true
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/simple-user"
            },
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "default": {
                  "type": "boolean"
                },
                "description": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "state": {
            "type": "string"
          },
          "state_reason": {
            "type": "string",
            "nullable": true
          },
          "assignee": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "milestone": {
            "$ref": "#/components/schemas/nullable-milestone"
          },
          "comments": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "text_matches": {
            "$ref": "#/components/schemas/search-result-text-matches"
          },
          "pull_request": {
            "type": "object",
            "properties": {
              "merged_at": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "diff_url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "html_url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "patch_url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              }
            },
            "required": [
              "diff_url",
              "html_url",
              "patch_url",
              "url"
            ]
          },
          "body": {
            "type": "string"
          },
          "score": {
            "type": "number"
          },
          "author_association": {
            "$ref": "#/components/schemas/author-association"
          },
          "draft": {
            "type": "boolean"
          },
          "repository": {
            "$ref": "#/components/schemas/repository"
          },
          "body_html": {
            "type": "string"
          },
          "body_text": {
            "type": "string"
          },
          "timeline_url": {
            "type": "string",
            "format": "uri"
          },
          "performed_via_github_app": {
            "$ref": "#/components/schemas/nullable-integration"
          },
          "reactions": {
            "$ref": "#/components/schemas/reaction-rollup"
          }
        },
        "required": [
          "assignee",
          "closed_at",
          "comments",
          "comments_url",
          "events_url",
          "html_url",
          "id",
          "node_id",
          "labels",
          "labels_url",
          "milestone",
          "number",
          "repository_url",
          "state",
          "locked",
          "title",
          "url",
          "user",
          "author_association",
          "created_at",
          "updated_at",
          "score"
        ]
      },
      "starred-repository": {
        "title": "Starred Repository",
        "description": "Starred Repository",
        "type": "object",
        "properties": {
          "starred_at": {
            "type": "string",
            "format": "date-time"
          },
          "repo": {
            "$ref": "#/components/schemas/repository"
          }
        },
        "required": [
          "starred_at",
          "repo"
        ]
      },
      "nullable-simple-user": {
        "title": "Simple User",
        "description": "A GitHub user.",
        "type": "object",
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "login": {
            "type": "string",
            "example": "octocat"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDQ6VXNlcjE="
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/images/error/octocat_happy.gif"
          },
          "gravatar_id": {
            "type": "string",
            "example": "41d064eb2195891e12d0413f63227ea7",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat"
          },
          "followers_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/followers"
          },
          "following_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/following{/other_user}"
          },
          "gists_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/gists{/gist_id}"
          },
          "starred_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
          },
          "subscriptions_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/subscriptions"
          },
          "organizations_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/orgs"
          },
          "repos_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/repos"
          },
          "events_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/events{/privacy}"
          },
          "received_events_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/received_events"
          },
          "type": {
            "type": "string",
            "example": "User"
          },
          "site_admin": {
            "type": "boolean"
          },
          "starred_at": {
            "type": "string",
            "example": "\"2020-07-09T00:17:55Z\""
          }
        },
        "required": [
          "avatar_url",
          "events_url",
          "followers_url",
          "following_url",
          "gists_url",
          "gravatar_id",
          "html_url",
          "id",
          "node_id",
          "login",
          "organizations_url",
          "received_events_url",
          "repos_url",
          "site_admin",
          "starred_url",
          "subscriptions_url",
          "type",
          "url"
        ],
        "nullable": true
      },
      "nullable-scoped-installation": {
        "title": "Scoped Installation",
        "type": "object",
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/app-permissions"
          },
          "repository_selection": {
            "description": "Describe whether all repositories have been selected or there's a selection involved",
            "type": "string",
            "enum": [
              "all",
              "selected"
            ]
          },
          "single_file_name": {
            "type": "string",
            "example": "config.yaml",
            "nullable": true
          },
          "has_multiple_single_files": {
            "type": "boolean",
            "example": true
          },
          "single_file_paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "config.yml",
              ".github/issue_TEMPLATE.md"
            ]
          },
          "repositories_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/repos"
          },
          "account": {
            "$ref": "#/components/schemas/simple-user"
          }
        },
        "required": [
          "permissions",
          "repository_selection",
          "single_file_name",
          "repositories_url",
          "account"
        ],
        "nullable": true
      },
      "simple-user": {
        "title": "Simple User",
        "description": "A GitHub user.",
        "type": "object",
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "login": {
            "type": "string",
            "example": "octocat"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDQ6VXNlcjE="
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/images/error/octocat_happy.gif"
          },
          "gravatar_id": {
            "type": "string",
            "example": "41d064eb2195891e12d0413f63227ea7",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat"
          },
          "followers_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/followers"
          },
          "following_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/following{/other_user}"
          },
          "gists_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/gists{/gist_id}"
          },
          "starred_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
          },
          "subscriptions_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/subscriptions"
          },
          "organizations_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/orgs"
          },
          "repos_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/repos"
          },
          "events_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/events{/privacy}"
          },
          "received_events_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/received_events"
          },
          "type": {
            "type": "string",
            "example": "User"
          },
          "site_admin": {
            "type": "boolean"
          },
          "starred_at": {
            "type": "string",
            "example": "\"2020-07-09T00:17:55Z\""
          }
        },
        "required": [
          "avatar_url",
          "events_url",
          "followers_url",
          "following_url",
          "gists_url",
          "gravatar_id",
          "html_url",
          "id",
          "node_id",
          "login",
          "organizations_url",
          "received_events_url",
          "repos_url",
          "site_admin",
          "starred_url",
          "subscriptions_url",
          "type",
          "url"
        ]
      },
      "enterprise": {
        "title": "Enterprise",
        "description": "An enterprise on GitHub.",
        "type": "object",
        "properties": {
          "description": {
            "description": "A short description of the enterprise.",
            "type": "string",
            "nullable": true
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/enterprises/octo-business"
          },
          "website_url": {
            "description": "The enterprise's website URL.",
            "type": "string",
            "nullable": true,
            "format": "uri"
          },
          "id": {
            "description": "Unique identifier of the enterprise",
            "example": 42,
            "type": "integer"
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
          },
          "name": {
            "description": "The name of the enterprise.",
            "type": "string",
            "example": "Octo Business"
          },
          "slug": {
            "description": "The slug url identifier for the enterprise.",
            "type": "string",
            "example": "octo-business"
          },
          "created_at": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "example": "2019-01-26T19:01:12Z"
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "example": "2019-01-26T19:14:43Z"
          },
          "avatar_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "node_id",
          "name",
          "slug",
          "html_url",
          "created_at",
          "updated_at",
          "avatar_url"
        ]
      },
      "basic-error": {
        "title": "Basic Error",
        "description": "Basic Error",
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "documentation_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "announcement-message": {
        "type": "string",
        "description": "The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Basic writing and formatting syntax](https://docs.github.com/github-ae@latest/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\"",
        "example": "Very **important** announcement about _something_.",
        "nullable": true
      },
      "announcement-expiration": {
        "type": "string",
        "format": "date-time",
        "description": "The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.",
        "example": "\"2021-01-01T00:00:00.000-07:00\"",
        "nullable": true
      },
      "selected-actions-url": {
        "type": "string",
        "description": "The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`."
      },
      "runner-label": {
        "title": "Self hosted runner label",
        "description": "A label for a self hosted runner",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the label."
          },
          "name": {
            "type": "string",
            "description": "Name of the label."
          },
          "type": {
            "type": "string",
            "description": "The type of label. Read-only labels are applied automatically when the runner is configured.",
            "enum": [
              "read-only",
              "custom"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "nullable-license-simple": {
        "title": "License Simple",
        "description": "License Simple",
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "mit"
          },
          "name": {
            "type": "string",
            "example": "MIT License"
          },
          "url": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "https://api.github.com/licenses/mit"
          },
          "spdx_id": {
            "type": "string",
            "nullable": true,
            "example": "MIT"
          },
          "node_id": {
            "type": "string",
            "example": "MDc6TGljZW5zZW1pdA=="
          },
          "html_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "key",
          "name",
          "url",
          "spdx_id",
          "node_id"
        ],
        "nullable": true
      },
      "nullable-milestone": {
        "title": "Milestone",
        "description": "A collection of related issues and pull requests.",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/milestones/1"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/milestones/v1.0"
          },
          "labels_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"
          },
          "id": {
            "type": "integer",
            "example": 1002604
          },
          "node_id": {
            "type": "string",
            "example": "MDk6TWlsZXN0b25lMTAwMjYwNA=="
          },
          "number": {
            "description": "The number of the milestone.",
            "type": "integer",
            "example": 42
          },
          "state": {
            "description": "The state of the milestone.",
            "example": "open",
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "default": "open"
          },
          "title": {
            "description": "The title of the milestone.",
            "example": "v1.0",
            "type": "string"
          },
          "description": {
            "type": "string",
            "example": "Tracking milestone for version 1.0",
            "nullable": true
          },
          "creator": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "open_issues": {
            "type": "integer",
            "example": 4
          },
          "closed_issues": {
            "type": "integer",
            "example": 8
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-04-10T20:09:31Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2014-03-03T18:58:10Z"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2013-02-12T13:22:01Z",
            "nullable": true
          },
          "due_on": {
            "type": "string",
            "format": "date-time",
            "example": "2012-10-09T23:39:01Z",
            "nullable": true
          }
        },
        "required": [
          "closed_issues",
          "creator",
          "description",
          "due_on",
          "closed_at",
          "id",
          "node_id",
          "labels_url",
          "html_url",
          "number",
          "open_issues",
          "state",
          "title",
          "url",
          "created_at",
          "updated_at"
        ],
        "nullable": true
      },
      "nullable-integration": {
        "title": "GitHub app",
        "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the GitHub app",
            "example": 37,
            "type": "integer"
          },
          "slug": {
            "description": "The slug name of the GitHub app",
            "example": "probot-owners",
            "type": "string"
          },
          "node_id": {
            "type": "string",
            "example": "MDExOkludGVncmF0aW9uMQ=="
          },
          "owner": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "name": {
            "description": "The name of the GitHub app",
            "example": "Probot Owners",
            "type": "string"
          },
          "description": {
            "type": "string",
            "example": "The description of the app.",
            "nullable": true
          },
          "external_url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/apps/super-ci"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-08T16:18:44-04:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-08T16:18:44-04:00"
          },
          "permissions": {
            "description": "The set of permissions for the GitHub app",
            "type": "object",
            "properties": {
              "issues": {
                "type": "string"
              },
              "checks": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              },
              "contents": {
                "type": "string"
              },
              "deployments": {
                "type": "string"
              }
            },
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "issues": "read",
              "deployments": "write"
            }
          },
          "events": {
            "description": "The list of events for the GitHub app",
            "example": [
              "label",
              "deployment"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "installations_count": {
            "description": "The number of installations associated with the GitHub app",
            "example": 5,
            "type": "integer"
          },
          "client_id": {
            "type": "string",
            "example": "\"Iv1.25b5d1e65ffc4022\""
          },
          "client_secret": {
            "type": "string",
            "example": "\"1d4b2097ac622ba702d19de498f005747a8b21d3\""
          },
          "webhook_secret": {
            "type": "string",
            "example": "\"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b\"",
            "nullable": true
          },
          "pem": {
            "type": "string",
            "example": "\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n\""
          }
        },
        "required": [
          "id",
          "node_id",
          "owner",
          "name",
          "description",
          "external_url",
          "html_url",
          "created_at",
          "updated_at",
          "permissions",
          "events"
        ],
        "nullable": true
      },
      "author-association": {
        "title": "author_association",
        "type": "string",
        "example": "OWNER",
        "description": "How the author is associated with the repository.",
        "enum": [
          "COLLABORATOR",
          "CONTRIBUTOR",
          "FIRST_TIMER",
          "FIRST_TIME_CONTRIBUTOR",
          "MANNEQUIN",
          "MEMBER",
          "NONE",
          "OWNER"
        ]
      },
      "reaction-rollup": {
        "title": "Reaction Rollup",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "total_count": {
            "type": "integer"
          },
          "+1": {
            "type": "integer"
          },
          "-1": {
            "type": "integer"
          },
          "laugh": {
            "type": "integer"
          },
          "confused": {
            "type": "integer"
          },
          "heart": {
            "type": "integer"
          },
          "hooray": {
            "type": "integer"
          },
          "eyes": {
            "type": "integer"
          },
          "rocket": {
            "type": "integer"
          }
        },
        "required": [
          "url",
          "total_count",
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "eyes",
          "rocket"
        ]
      },
      "code-of-conduct": {
        "title": "Code Of Conduct",
        "description": "Code Of Conduct",
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "contributor_covenant"
          },
          "name": {
            "type": "string",
            "example": "Contributor Covenant"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/codes_of_conduct/contributor_covenant"
          },
          "body": {
            "type": "string",
            "example": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "required": [
          "url",
          "html_url",
          "key",
          "name"
        ]
      },
      "code-scanning-analysis-tool-name": {
        "type": "string",
        "description": "The name of the tool used to generate the code scanning analysis."
      },
      "code-scanning-analysis-tool-guid": {
        "nullable": true,
        "type": "string",
        "description": "The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data."
      },
      "alert-number": {
        "type": "integer",
        "description": "The security alert number.",
        "readOnly": true
      },
      "alert-created-at": {
        "type": "string",
        "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "format": "date-time",
        "readOnly": true
      },
      "alert-updated-at": {
        "type": "string",
        "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "format": "date-time",
        "readOnly": true
      },
      "alert-url": {
        "type": "string",
        "description": "The REST API URL of the alert resource.",
        "format": "uri",
        "readOnly": true
      },
      "alert-html-url": {
        "type": "string",
        "description": "The GitHub URL of the alert resource.",
        "format": "uri",
        "readOnly": true
      },
      "alert-instances-url": {
        "type": "string",
        "description": "The REST API URL for fetching the list of instances for an alert.",
        "format": "uri",
        "readOnly": true
      },
      "alert-fixed-at": {
        "type": "string",
        "description": "The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "format": "date-time",
        "readOnly": true,
        "nullable": true
      },
      "alert-dismissed-at": {
        "type": "string",
        "description": "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "format": "date-time",
        "readOnly": true,
        "nullable": true
      },
      "code-scanning-alert-rule": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "description": "A unique identifier for the rule used to detect the alert."
          },
          "name": {
            "type": "string",
            "description": "The name of the rule used to detect the alert."
          },
          "severity": {
            "nullable": true,
            "type": "string",
            "description": "The severity of the alert.",
            "enum": [
              "none",
              "note",
              "warning",
              "error"
            ]
          },
          "security_severity_level": {
            "nullable": true,
            "type": "string",
            "description": "The security severity of the alert.",
            "enum": [
              "low",
              "medium",
              "high",
              "critical"
            ]
          },
          "description": {
            "type": "string",
            "description": "A short description of the rule used to detect the alert."
          },
          "full_description": {
            "type": "string",
            "description": "description of the rule used to detect the alert."
          },
          "tags": {
            "nullable": true,
            "type": "array",
            "description": "A set of tags applicable for the rule.",
            "items": {
              "type": "string"
            }
          },
          "help": {
            "nullable": true,
            "type": "string",
            "description": "Detailed documentation for the rule as GitHub Flavored Markdown."
          },
          "help_uri": {
            "nullable": true,
            "type": "string",
            "description": "A link to the documentation for the rule used to detect the alert."
          }
        }
      },
      "code-scanning-analysis-tool": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/code-scanning-analysis-tool-name"
          },
          "version": {
            "$ref": "#/components/schemas/code-scanning-analysis-tool-version"
          },
          "guid": {
            "$ref": "#/components/schemas/code-scanning-analysis-tool-guid"
          }
        }
      },
      "code-scanning-analysis-tool-version": {
        "nullable": true,
        "type": "string",
        "description": "The version of the tool used to generate the code scanning analysis."
      },
      "code-scanning-alert-instance": {
        "type": "object",
        "properties": {
          "ref": {
            "$ref": "#/components/schemas/code-scanning-ref"
          },
          "analysis_key": {
            "$ref": "#/components/schemas/code-scanning-analysis-analysis-key"
          },
          "environment": {
            "$ref": "#/components/schemas/code-scanning-alert-environment"
          },
          "category": {
            "$ref": "#/components/schemas/code-scanning-analysis-category"
          },
          "state": {
            "$ref": "#/components/schemas/code-scanning-alert-state"
          },
          "commit_sha": {
            "type": "string"
          },
          "message": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string"
              }
            }
          },
          "location": {
            "$ref": "#/components/schemas/code-scanning-alert-location"
          },
          "html_url": {
            "type": "string"
          },
          "classifications": {
            "type": "array",
            "description": "Classifications that have been applied to the file that triggered the alert.\nFor example identifying it as documentation, or a generated file.",
            "items": {
              "$ref": "#/components/schemas/code-scanning-alert-classification"
            }
          }
        }
      },
      "code-scanning-analysis-analysis-key": {
        "type": "string",
        "description": "Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name."
      },
      "code-scanning-alert-environment": {
        "type": "string",
        "description": "Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed."
      },
      "code-scanning-analysis-category": {
        "type": "string",
        "description": "Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code."
      },
      "code-scanning-alert-location": {
        "type": "object",
        "description": "Describe a region within a file for the alert.",
        "properties": {
          "path": {
            "type": "string"
          },
          "start_line": {
            "type": "integer"
          },
          "end_line": {
            "type": "integer"
          },
          "start_column": {
            "type": "integer"
          },
          "end_column": {
            "type": "integer"
          }
        }
      },
      "code-scanning-alert-classification": {
        "type": "string",
        "description": "A classification of the file. For example to identify it as generated.",
        "nullable": true,
        "enum": [
          "source",
          "generated",
          "test",
          "library"
        ]
      },
      "simple-repository": {
        "title": "Simple Repository",
        "description": "A GitHub repository.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1296269,
            "description": "A unique identifier of the repository."
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "description": "The GraphQL identifier of the repository."
          },
          "name": {
            "type": "string",
            "example": "Hello-World",
            "description": "The name of the repository."
          },
          "full_name": {
            "type": "string",
            "example": "octocat/Hello-World",
            "description": "The full, globally unique, name of the repository."
          },
          "owner": {
            "$ref": "#/components/schemas/simple-user"
          },
          "private": {
            "type": "boolean",
            "description": "Whether the repository is private."
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World",
            "description": "The URL to view the repository on GitHub.com."
          },
          "description": {
            "type": "string",
            "example": "This your first repo!",
            "nullable": true,
            "description": "The repository description."
          },
          "fork": {
            "type": "boolean",
            "description": "Whether the repository is a fork."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World",
            "description": "The URL to get more information about the repository from the GitHub API."
          },
          "archive_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "description": "A template for the API URL to download the repository as an archive."
          },
          "assignees_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "description": "A template for the API URL to list the available assignees for issues in the repository."
          },
          "blobs_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "description": "A template for the API URL to create or retrieve a raw Git blob in the repository."
          },
          "branches_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "description": "A template for the API URL to get information about branches in the repository."
          },
          "collaborators_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "description": "A template for the API URL to get information about collaborators of the repository."
          },
          "comments_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "description": "A template for the API URL to get information about comments on the repository."
          },
          "commits_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "description": "A template for the API URL to get information about commits on the repository."
          },
          "compare_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "description": "A template for the API URL to compare two commits or refs."
          },
          "contents_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "description": "A template for the API URL to get the contents of the repository."
          },
          "contributors_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "description": "A template for the API URL to list the contributors to the repository."
          },
          "deployments_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "description": "The API URL to list the deployments of the repository."
          },
          "downloads_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "description": "The API URL to list the downloads on the repository."
          },
          "events_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/events",
            "description": "The API URL to list the events of the repository."
          },
          "forks_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/forks",
            "description": "The API URL to list the forks of the repository."
          },
          "git_commits_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "description": "A template for the API URL to get information about Git commits of the repository."
          },
          "git_refs_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "description": "A template for the API URL to get information about Git refs of the repository."
          },
          "git_tags_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "description": "A template for the API URL to get information about Git tags of the repository."
          },
          "issue_comment_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "description": "A template for the API URL to get information about issue comments on the repository."
          },
          "issue_events_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "description": "A template for the API URL to get information about issue events on the repository."
          },
          "issues_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "description": "A template for the API URL to get information about issues on the repository."
          },
          "keys_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "description": "A template for the API URL to get information about deploy keys on the repository."
          },
          "labels_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "description": "A template for the API URL to get information about labels of the repository."
          },
          "languages_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/languages",
            "description": "The API URL to get information about the languages of the repository."
          },
          "merges_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/merges",
            "description": "The API URL to merge branches in the repository."
          },
          "milestones_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "description": "A template for the API URL to get information about milestones of the repository."
          },
          "notifications_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "description": "A template for the API URL to get information about notifications on the repository."
          },
          "pulls_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "description": "A template for the API URL to get information about pull requests on the repository."
          },
          "releases_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "description": "A template for the API URL to get information about releases on the repository."
          },
          "stargazers_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "description": "The API URL to list the stargazers on the repository."
          },
          "statuses_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "description": "A template for the API URL to get information about statuses of a commit."
          },
          "subscribers_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "description": "The API URL to list the subscribers on the repository."
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "description": "The API URL to subscribe to notifications for this repository."
          },
          "tags_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/tags",
            "description": "The API URL to get information about tags on the repository."
          },
          "teams_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/teams",
            "description": "The API URL to list the teams on the repository."
          },
          "trees_url": {
            "type": "string",
            "example": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "description": "A template for the API URL to create or retrieve a raw Git tree of the repository."
          },
          "hooks_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "description": "The API URL to list the hooks on the repository."
          }
        },
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url"
        ]
      },
      "nullable-repository": {
        "title": "Repository",
        "description": "A repository on GitHub.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the repository",
            "example": 42,
            "type": "integer"
          },
          "node_id": {
            "type": "string",
            "example": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
          },
          "name": {
            "description": "The name of the repository.",
            "type": "string",
            "example": "Team Environment"
          },
          "full_name": {
            "type": "string",
            "example": "octocat/Hello-World"
          },
          "license": {
            "$ref": "#/components/schemas/nullable-license-simple"
          },
          "organization": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "forks": {
            "type": "integer"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean"
              },
              "pull": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              }
            },
            "required": [
              "admin",
              "pull",
              "push"
            ]
          },
          "owner": {
            "$ref": "#/components/schemas/simple-user"
          },
          "private": {
            "description": "Whether the repository is private or public.",
            "default": false,
            "type": "boolean"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World"
          },
          "description": {
            "type": "string",
            "example": "This your first repo!",
            "nullable": true
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World"
          },
          "archive_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
          },
          "assignees_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
          },
          "blobs_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
          },
          "branches_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
          },
          "collaborators_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
          },
          "comments_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
          },
          "commits_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
          },
          "compare_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
          },
          "contents_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
          },
          "contributors_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/contributors"
          },
          "deployments_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/deployments"
          },
          "downloads_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/downloads"
          },
          "events_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/events"
          },
          "forks_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/forks"
          },
          "git_commits_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
          },
          "git_refs_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
          },
          "git_tags_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
          },
          "git_url": {
            "type": "string",
            "example": "git:github.com/octocat/Hello-World.git"
          },
          "issue_comment_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
          },
          "issue_events_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
          },
          "issues_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
          },
          "keys_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
          },
          "labels_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
          },
          "languages_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/languages"
          },
          "merges_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/merges"
          },
          "milestones_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
          },
          "notifications_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
          },
          "pulls_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
          },
          "releases_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
          },
          "ssh_url": {
            "type": "string",
            "example": "git@github.com:octocat/Hello-World.git"
          },
          "stargazers_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/stargazers"
          },
          "statuses_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
          },
          "subscribers_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/subscribers"
          },
          "subscription_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/subscription"
          },
          "tags_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/tags"
          },
          "teams_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/teams"
          },
          "trees_url": {
            "type": "string",
            "example": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          },
          "clone_url": {
            "type": "string",
            "example": "https://github.com/octocat/Hello-World.git"
          },
          "mirror_url": {
            "type": "string",
            "format": "uri",
            "example": "git:git.example.com/octocat/Hello-World",
            "nullable": true
          },
          "hooks_url": {
            "type": "string",
            "format": "uri",
            "example": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "svn_url": {
            "type": "string",
            "format": "uri",
            "example": "https://svn.github.com/octocat/Hello-World"
          },
          "homepage": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "forks_count": {
            "type": "integer",
            "example": 9
          },
          "stargazers_count": {
            "type": "integer",
            "example": 80
          },
          "watchers_count": {
            "type": "integer",
            "example": 80
          },
          "size": {
            "description": "The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.",
            "type": "integer",
            "example": 108
          },
          "default_branch": {
            "description": "The default branch of the repository.",
            "type": "string",
            "example": "master"
          },
          "open_issues_count": {
            "type": "integer",
            "example": 0
          },
          "is_template": {
            "description": "Whether this repository acts as a template that can be used to generate new repositories.",
            "default": false,
            "type": "boolean",
            "example": true
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "description": "Whether issues are enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "has_projects": {
            "description": "Whether projects are enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "has_wiki": {
            "description": "Whether the wiki is enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "description": "Whether downloads are enabled.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "archived": {
            "description": "Whether the repository is archived.",
            "default": false,
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean",
            "description": "Returns whether or not this repository disabled."
          },
          "visibility": {
            "description": "The repository visibility: public, private, or internal.",
            "default": "public",
            "type": "string"
          },
          "pushed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:06:43Z",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:01:12Z",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-01-26T19:14:43Z",
            "nullable": true
          },
          "allow_rebase_merge": {
            "description": "Whether to allow rebase merges for pull requests.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "template_repository": {
            "nullable": true,
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "type": "string"
              },
              "forks_count": {
                "type": "integer"
              },
              "stargazers_count": {
                "type": "integer"
              },
              "watchers_count": {
                "type": "integer"
              },
              "size": {
                "type": "integer"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "integer"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "maintain": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "triage": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "allow_auto_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_update_branch": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "integer"
              },
              "network_count": {
                "type": "integer"
              }
            }
          },
          "temp_clone_token": {
            "type": "string"
          },
          "allow_squash_merge": {
            "description": "Whether to allow squash merges for pull requests.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "allow_auto_merge": {
            "description": "Whether to allow Auto-merge to be used on pull requests.",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "delete_branch_on_merge": {
            "description": "Whether to delete head branches when pull requests are merged",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "allow_update_branch": {
            "description": "Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
            "default": false,
            "type": "boolean",
            "example": false
          },
          "allow_merge_commit": {
            "description": "Whether to allow merge commits for pull requests.",
            "default": true,
            "type": "boolean",
            "example": true
          },
          "allow_forking": {
            "description": "Whether to allow forking this repo",
            "type": "boolean"
          },
          "web_commit_signoff_required": {
            "description": "Whether to require contributors to sign off on web-based commits",
            "default": false,
            "type": "boolean"
          },
          "subscribers_count": {
            "type": "integer"
          },
          "network_count": {
            "type": "integer"
          },
          "open_issues": {
            "type": "integer"
          },
          "watchers": {
            "type": "integer"
          },
          "master_branch": {
            "type": "string"
          },
          "starred_at": {
            "type": "string",
            "example": "\"2020-07-09T00:17:42Z\""
          },
          "anonymous_access_enabled": {
            "type": "boolean",
            "description": "Whether anonymous git access is enabled for this repository"
          }
        },
        "required": [
          "archive_url",
          "assignees_url",
          "blobs_url",
          "branches_url",
          "collaborators_url",
          "comments_url",
          "commits_url",
          "compare_url",
          "contents_url",
          "contributors_url",
          "deployments_url",
          "description",
          "downloads_url",
          "events_url",
          "fork",
          "forks_url",
          "full_name",
          "git_commits_url",
          "git_refs_url",
          "git_tags_url",
          "hooks_url",
          "html_url",
          "id",
          "node_id",
          "issue_comment_url",
          "issue_events_url",
          "issues_url",
          "keys_url",
          "labels_url",
          "languages_url",
          "merges_url",
          "milestones_url",
          "name",
          "notifications_url",
          "owner",
          "private",
          "pulls_url",
          "releases_url",
          "stargazers_url",
          "statuses_url",
          "subscribers_url",
          "subscription_url",
          "tags_url",
          "teams_url",
          "trees_url",
          "url",
          "clone_url",
          "default_branch",
          "forks",
          "forks_count",
          "git_url",
          "has_downloads",
          "has_issues",
          "has_projects",
          "has_wiki",
          "has_pages",
          "homepage",
          "language",
          "archived",
          "disabled",
          "mirror_url",
          "open_issues",
          "open_issues_count",
          "license",
          "pushed_at",
          "size",
          "ssh_url",
          "stargazers_count",
          "svn_url",
          "watchers",
          "watchers_count",
          "created_at",
          "updated_at"
        ],
        "nullable": true
      },
      "rate-limit": {
        "title": "Rate Limit",
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer"
          },
          "remaining": {
            "type": "integer"
          },
          "reset": {
            "type": "integer"
          },
          "used": {
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "remaining",
          "reset",
          "used"
        ]
      },
      "code-of-conduct-simple": {
        "title": "Code Of Conduct Simple",
        "description": "Code of Conduct Simple",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/github/docs/community/code_of_conduct"
          },
          "key": {
            "type": "string",
            "example": "citizen_code_of_conduct"
          },
          "name": {
            "type": "string",
            "example": "Citizen Code of Conduct"
          },
          "html_url": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md"
          }
        },
        "required": [
          "url",
          "key",
          "name",
          "html_url"
        ]
      },
      "security-and-analysis": {
        "nullable": true,
        "type": "object",
        "properties": {
          "advanced_security": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "enabled",
                  "disabled"
                ]
              }
            }
          },
          "secret_scanning": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "enabled",
                  "disabled"
                ]
              }
            }
          },
          "secret_scanning_push_protection": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "enabled",
                  "disabled"
                ]
              }
            }
          }
        }
      },
      "referenced-workflow": {
        "title": "Referenced workflow",
        "description": "A workflow referenced/reused by the initial caller workflow",
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          }
        },
        "required": [
          "path",
          "sha"
        ]
      },
      "pull-request-minimal": {
        "title": "Pull Request Minimal",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "number": {
            "type": "integer"
          },
          "url": {
            "type": "string"
          },
          "head": {
            "type": "object",
            "properties": {
              "ref": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "repo": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "url": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "url",
                  "name"
                ]
              }
            },
            "required": [
              "ref",
              "sha",
              "repo"
            ]
          },
          "base": {
            "type": "object",
            "properties": {
              "ref": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "repo": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "url": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "url",
                  "name"
                ]
              }
            },
            "required": [
              "ref",
              "sha",
              "repo"
            ]
          }
        },
        "required": [
          "id",
          "number",
          "url",
          "head",
          "base"
        ]
      },
      "nullable-simple-commit": {
        "title": "Simple Commit",
        "description": "A commit.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tree_id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "email"
            ],
            "nullable": true
          },
          "committer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "email"
            ],
            "nullable": true
          }
        },
        "required": [
          "id",
          "tree_id",
          "message",
          "timestamp",
          "author",
          "committer"
        ],
        "nullable": true
      },
      "commit": {
        "title": "Commit",
        "description": "Commit",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
          },
          "sha": {
            "type": "string",
            "example": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
          },
          "node_id": {
            "type": "string",
            "example": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ=="
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e"
          },
          "comments_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
          },
          "commit": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
              },
              "author": {
                "$ref": "#/components/schemas/nullable-git-user"
              },
              "committer": {
                "$ref": "#/components/schemas/nullable-git-user"
              },
              "message": {
                "type": "string",
                "example": "Fix all the bugs"
              },
              "comment_count": {
                "type": "integer",
                "example": 0
              },
              "tree": {
                "type": "object",
                "properties": {
                  "sha": {
                    "type": "string",
                    "example": "827efc6d56897b048c772eb4087f854f46256132"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132"
                  }
                },
                "required": [
                  "sha",
                  "url"
                ]
              },
              "verification": {
                "$ref": "#/components/schemas/verification"
              }
            },
            "required": [
              "author",
              "committer",
              "comment_count",
              "message",
              "tree",
              "url"
            ]
          },
          "author": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "committer": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sha": {
                  "type": "string",
                  "example": "7638417db6d59f3c431d3e1f261cc637155684cd"
                },
                "url": {
                  "type": "string",
                  "format": "uri",
                  "example": "https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd"
                },
                "html_url": {
                  "type": "string",
                  "format": "uri",
                  "example": "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
                }
              },
              "required": [
                "sha",
                "url"
              ]
            }
          },
          "stats": {
            "type": "object",
            "properties": {
              "additions": {
                "type": "integer"
              },
              "deletions": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            }
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/diff-entry"
            }
          }
        },
        "required": [
          "url",
          "sha",
          "node_id",
          "html_url",
          "comments_url",
          "commit",
          "author",
          "committer",
          "parents"
        ]
      },
      "nullable-git-user": {
        "title": "Git User",
        "description": "Metaproperties for Git author/committer information.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "\"Chris Wanstrath\""
          },
          "email": {
            "type": "string",
            "example": "\"chris@ozmm.org\""
          },
          "date": {
            "type": "string",
            "example": "\"2007-10-29T02:42:39.000-07:00\""
          }
        },
        "nullable": true
      },
      "verification": {
        "title": "Verification",
        "type": "object",
        "properties": {
          "verified": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "payload": {
            "type": "string",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "verified",
          "reason",
          "payload",
          "signature"
        ]
      },
      "diff-entry": {
        "title": "Diff Entry",
        "description": "Diff Entry",
        "type": "object",
        "properties": {
          "sha": {
            "type": "string",
            "example": "bbcd538c8e72b8c175046e27cc8f907076331401"
          },
          "filename": {
            "type": "string",
            "example": "file1.txt"
          },
          "status": {
            "type": "string",
            "enum": [
              "added",
              "removed",
              "modified",
              "renamed",
              "copied",
              "changed",
              "unchanged"
            ],
            "example": "added"
          },
          "additions": {
            "type": "integer",
            "example": 103
          },
          "deletions": {
            "type": "integer",
            "example": 21
          },
          "changes": {
            "type": "integer",
            "example": 124
          },
          "blob_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
          },
          "raw_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
          },
          "contents_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e"
          },
          "patch": {
            "type": "string",
            "example": "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test"
          },
          "previous_filename": {
            "type": "string",
            "example": "file.txt"
          }
        },
        "required": [
          "additions",
          "blob_url",
          "changes",
          "contents_url",
          "deletions",
          "filename",
          "raw_url",
          "sha",
          "status"
        ]
      },
      "protected-branch-required-status-check": {
        "title": "Protected Branch Required Status Check",
        "description": "Protected Branch Required Status Check",
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "enforcement_level": {
            "type": "string"
          },
          "contexts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "checks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "string"
                },
                "app_id": {
                  "type": "integer",
                  "nullable": true
                }
              },
              "required": [
                "context",
                "app_id"
              ]
            }
          },
          "contexts_url": {
            "type": "string"
          },
          "strict": {
            "type": "boolean"
          }
        },
        "required": [
          "contexts",
          "checks"
        ]
      },
      "protected-branch-admin-enforced": {
        "title": "Protected Branch Admin Enforced",
        "description": "Protected Branch Admin Enforced",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "url",
          "enabled"
        ]
      },
      "branch-restriction-policy": {
        "title": "Branch Restriction Policy",
        "description": "Branch Restriction Policy",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "users_url": {
            "type": "string",
            "format": "uri"
          },
          "teams_url": {
            "type": "string",
            "format": "uri"
          },
          "apps_url": {
            "type": "string",
            "format": "uri"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              }
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "privacy": {
                  "type": "string"
                },
                "notification_setting": {
                  "type": "string"
                },
                "permission": {
                  "type": "string"
                },
                "members_url": {
                  "type": "string"
                },
                "repositories_url": {
                  "type": "string"
                },
                "parent": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "apps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "slug": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "owner": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "hooks_url": {
                      "type": "string"
                    },
                    "issues_url": {
                      "type": "string"
                    },
                    "members_url": {
                      "type": "string"
                    },
                    "public_members_url": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string",
                      "example": "\"\""
                    },
                    "html_url": {
                      "type": "string",
                      "example": "\"https://github.com/testorg-ea8ec76d71c3af4b\""
                    },
                    "followers_url": {
                      "type": "string",
                      "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers\""
                    },
                    "following_url": {
                      "type": "string",
                      "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}\""
                    },
                    "gists_url": {
                      "type": "string",
                      "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}\""
                    },
                    "starred_url": {
                      "type": "string",
                      "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}\""
                    },
                    "subscriptions_url": {
                      "type": "string",
                      "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions\""
                    },
                    "organizations_url": {
                      "type": "string",
                      "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs\""
                    },
                    "received_events_url": {
                      "type": "string",
                      "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events\""
                    },
                    "type": {
                      "type": "string",
                      "example": "\"Organization\""
                    },
                    "site_admin": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "external_url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string"
                },
                "permissions": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "string"
                    },
                    "contents": {
                      "type": "string"
                    },
                    "issues": {
                      "type": "string"
                    },
                    "single_file": {
                      "type": "string"
                    }
                  }
                },
                "events": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "url",
          "users_url",
          "teams_url",
          "apps_url",
          "users",
          "teams",
          "apps"
        ]
      },
      "status-check-policy": {
        "title": "Status Check Policy",
        "description": "Status Check Policy",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks"
          },
          "strict": {
            "type": "boolean",
            "example": true
          },
          "contexts": {
            "type": "array",
            "example": [
              "continuous-integration/travis-ci"
            ],
            "items": {
              "type": "string"
            }
          },
          "checks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "context": {
                  "type": "string",
                  "example": "continuous-integration/travis-ci"
                },
                "app_id": {
                  "type": "integer",
                  "nullable": true
                }
              },
              "required": [
                "context",
                "app_id"
              ]
            }
          },
          "contexts_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
          }
        },
        "required": [
          "url",
          "contexts_url",
          "strict",
          "contexts",
          "checks"
        ]
      },
      "team": {
        "title": "Team",
        "description": "Groups of organization members that gives permissions on specified repositories.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "privacy": {
            "type": "string"
          },
          "notification_setting": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "pull": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              },
              "admin": {
                "type": "boolean"
              }
            },
            "required": [
              "pull",
              "triage",
              "push",
              "maintain",
              "admin"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/orgs/rails/teams/core"
          },
          "members_url": {
            "type": "string"
          },
          "repositories_url": {
            "type": "string",
            "format": "uri"
          },
          "parent": {
            "$ref": "#/components/schemas/nullable-team-simple"
          }
        },
        "required": [
          "id",
          "node_id",
          "url",
          "members_url",
          "name",
          "description",
          "permission",
          "html_url",
          "repositories_url",
          "slug",
          "parent"
        ]
      },
      "nullable-team-simple": {
        "title": "Team Simple",
        "description": "Groups of organization members that gives permissions on specified repositories.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the team",
            "type": "integer",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDQ6VGVhbTE="
          },
          "url": {
            "description": "URL for the team",
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/organizations/1/team/1"
          },
          "members_url": {
            "type": "string",
            "example": "https://api.github.com/organizations/1/team/1/members{/member}"
          },
          "name": {
            "description": "Name of the team",
            "type": "string",
            "example": "Justice League"
          },
          "description": {
            "description": "Description of the team",
            "type": "string",
            "nullable": true,
            "example": "A great team."
          },
          "permission": {
            "description": "Permission that the team will have for its repositories",
            "type": "string",
            "example": "admin"
          },
          "privacy": {
            "description": "The level of privacy this team should have",
            "type": "string",
            "example": "closed"
          },
          "notification_setting": {
            "description": "The notification setting the team has set",
            "type": "string",
            "example": "notifications_enabled"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/orgs/rails/teams/core"
          },
          "repositories_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/organizations/1/team/1/repos"
          },
          "slug": {
            "type": "string",
            "example": "justice-league"
          },
          "ldap_dn": {
            "description": "Distinguished Name (DN) that team maps to within LDAP environment",
            "example": "uid=example,ou=users,dc=github,dc=com",
            "type": "string"
          }
        },
        "required": [
          "id",
          "node_id",
          "url",
          "members_url",
          "name",
          "description",
          "permission",
          "html_url",
          "repositories_url",
          "slug"
        ],
        "nullable": true
      },
      "integration": {
        "title": "GitHub app",
        "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the GitHub app",
            "example": 37,
            "type": "integer"
          },
          "slug": {
            "description": "The slug name of the GitHub app",
            "example": "probot-owners",
            "type": "string"
          },
          "node_id": {
            "type": "string",
            "example": "MDExOkludGVncmF0aW9uMQ=="
          },
          "owner": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "name": {
            "description": "The name of the GitHub app",
            "example": "Probot Owners",
            "type": "string"
          },
          "description": {
            "type": "string",
            "example": "The description of the app.",
            "nullable": true
          },
          "external_url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/apps/super-ci"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-08T16:18:44-04:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-07-08T16:18:44-04:00"
          },
          "permissions": {
            "description": "The set of permissions for the GitHub app",
            "type": "object",
            "properties": {
              "issues": {
                "type": "string"
              },
              "checks": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              },
              "contents": {
                "type": "string"
              },
              "deployments": {
                "type": "string"
              }
            },
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "issues": "read",
              "deployments": "write"
            }
          },
          "events": {
            "description": "The list of events for the GitHub app",
            "example": [
              "label",
              "deployment"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "installations_count": {
            "description": "The number of installations associated with the GitHub app",
            "example": 5,
            "type": "integer"
          },
          "client_id": {
            "type": "string",
            "example": "\"Iv1.25b5d1e65ffc4022\""
          },
          "client_secret": {
            "type": "string",
            "example": "\"1d4b2097ac622ba702d19de498f005747a8b21d3\""
          },
          "webhook_secret": {
            "type": "string",
            "example": "\"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b\"",
            "nullable": true
          },
          "pem": {
            "type": "string",
            "example": "\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n\""
          }
        },
        "required": [
          "id",
          "node_id",
          "owner",
          "name",
          "description",
          "external_url",
          "html_url",
          "created_at",
          "updated_at",
          "permissions",
          "events"
        ]
      },
      "simple-commit": {
        "title": "Simple Commit",
        "description": "A commit.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tree_id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "email"
            ],
            "nullable": true
          },
          "committer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "email"
            ],
            "nullable": true
          }
        },
        "required": [
          "id",
          "tree_id",
          "message",
          "timestamp",
          "author",
          "committer"
        ]
      },
      "code-scanning-alert-rule-summary": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": true,
            "type": "string",
            "description": "A unique identifier for the rule used to detect the alert."
          },
          "name": {
            "type": "string",
            "description": "The name of the rule used to detect the alert."
          },
          "severity": {
            "nullable": true,
            "type": "string",
            "description": "The severity of the alert.",
            "enum": [
              "none",
              "note",
              "warning",
              "error"
            ]
          },
          "description": {
            "type": "string",
            "description": "A short description of the rule used to detect the alert."
          }
        }
      },
      "code-scanning-analysis-sarif-id": {
        "type": "string",
        "description": "An identifier for the upload.",
        "example": "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53"
      },
      "nullable-collaborator": {
        "title": "Collaborator",
        "description": "Collaborator",
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "example": "octocat"
          },
          "id": {
            "type": "integer",
            "example": 1
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "node_id": {
            "type": "string",
            "example": "MDQ6VXNlcjE="
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/images/error/octocat_happy.gif"
          },
          "gravatar_id": {
            "type": "string",
            "example": "41d064eb2195891e12d0413f63227ea7",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/octocat"
          },
          "followers_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/followers"
          },
          "following_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/following{/other_user}"
          },
          "gists_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/gists{/gist_id}"
          },
          "starred_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}"
          },
          "subscriptions_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/subscriptions"
          },
          "organizations_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/orgs"
          },
          "repos_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/repos"
          },
          "events_url": {
            "type": "string",
            "example": "https://api.github.com/users/octocat/events{/privacy}"
          },
          "received_events_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/users/octocat/received_events"
          },
          "type": {
            "type": "string",
            "example": "User"
          },
          "site_admin": {
            "type": "boolean"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "pull": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              },
              "admin": {
                "type": "boolean"
              }
            },
            "required": [
              "pull",
              "push",
              "admin"
            ]
          },
          "role_name": {
            "type": "string",
            "example": "admin"
          }
        },
        "required": [
          "avatar_url",
          "events_url",
          "followers_url",
          "following_url",
          "gists_url",
          "gravatar_id",
          "html_url",
          "id",
          "node_id",
          "login",
          "organizations_url",
          "received_events_url",
          "repos_url",
          "site_admin",
          "starred_url",
          "subscriptions_url",
          "type",
          "url"
        ],
        "nullable": true
      },
      "link": {
        "title": "Link",
        "description": "Hypermedia Link",
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          }
        },
        "required": [
          "href"
        ]
      },
      "auto-merge": {
        "title": "Auto merge",
        "description": "The status of auto merging a pull request.",
        "type": "object",
        "properties": {
          "enabled_by": {
            "$ref": "#/components/schemas/simple-user"
          },
          "merge_method": {
            "type": "string",
            "description": "The merge method to use.",
            "enum": [
              "merge",
              "squash",
              "rebase"
            ]
          },
          "commit_title": {
            "type": "string",
            "description": "Title for the merge commit message."
          },
          "commit_message": {
            "type": "string",
            "description": "Commit message for the merge commit."
          }
        },
        "required": [
          "enabled_by",
          "merge_method",
          "commit_title",
          "commit_message"
        ],
        "nullable": true
      },
      "simple-commit-status": {
        "title": "Simple Commit Status",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer"
          },
          "node_id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "target_url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "avatar_url": {
            "type": "string",
            "nullable": true,
            "format": "uri"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "node_id",
          "state",
          "context",
          "target_url",
          "avatar_url",
          "url",
          "created_at",
          "updated_at"
        ]
      },
      "actor": {
        "title": "Actor",
        "description": "Actor",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "login": {
            "type": "string"
          },
          "display_login": {
            "type": "string"
          },
          "gravatar_id": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "avatar_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "id",
          "login",
          "gravatar_id",
          "url",
          "avatar_url"
        ]
      },
      "issue-comment": {
        "title": "Issue Comment",
        "description": "Comments provide a way for people to collaborate on an issue.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the issue comment",
            "example": 42,
            "type": "integer",
            "format": "int64"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "description": "URL for the issue comment",
            "example": "https://api.github.com/repositories/42/issues/comments/1",
            "type": "string",
            "format": "uri"
          },
          "body": {
            "description": "Contents of the issue comment",
            "example": "What version of Safari were you using when you observed this bug?",
            "type": "string"
          },
          "body_text": {
            "type": "string"
          },
          "body_html": {
            "type": "string"
          },
          "html_url": {
            "type": "string",
            "format": "uri"
          },
          "user": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-04-14T16:00:49Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2011-04-14T16:00:49Z"
          },
          "issue_url": {
            "type": "string",
            "format": "uri"
          },
          "author_association": {
            "$ref": "#/components/schemas/author-association"
          },
          "performed_via_github_app": {
            "$ref": "#/components/schemas/nullable-integration"
          },
          "reactions": {
            "$ref": "#/components/schemas/reaction-rollup"
          }
        },
        "required": [
          "id",
          "node_id",
          "html_url",
          "issue_url",
          "author_association",
          "user",
          "url",
          "created_at",
          "updated_at"
        ]
      },
      "scim-error": {
        "title": "Scim Error",
        "description": "Scim Error",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "documentation_url": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer"
          },
          "scimType": {
            "type": "string",
            "nullable": true
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "nullable-issue": {
        "title": "Issue",
        "description": "Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "description": "URL for the issue",
            "example": "https://api.github.com/repositories/42/issues/1",
            "type": "string",
            "format": "uri"
          },
          "repository_url": {
            "type": "string",
            "format": "uri"
          },
          "labels_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string",
            "format": "uri"
          },
          "events_url": {
            "type": "string",
            "format": "uri"
          },
          "html_url": {
            "type": "string",
            "format": "uri"
          },
          "number": {
            "description": "Number uniquely identifying the issue within its repository",
            "example": 42,
            "type": "integer"
          },
          "state": {
            "description": "State of the issue; either 'open' or 'closed'",
            "example": "open",
            "type": "string"
          },
          "state_reason": {
            "description": "The reason for the current state",
            "example": "not_planned",
            "type": "string",
            "nullable": true,
            "enum": [
              "completed",
              "reopened",
              "not_planned"
            ]
          },
          "title": {
            "description": "Title of the issue",
            "example": "Widget creation fails in Safari on OS X 10.8",
            "type": "string"
          },
          "body": {
            "description": "Contents of the issue",
            "example": "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?",
            "type": "string",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "labels": {
            "description": "Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository",
            "example": [
              "bug",
              "registration"
            ],
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "color": {
                      "type": "string",
                      "nullable": true
                    },
                    "default": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "assignee": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/simple-user"
            },
            "nullable": true
          },
          "milestone": {
            "$ref": "#/components/schemas/nullable-milestone"
          },
          "locked": {
            "type": "boolean"
          },
          "active_lock_reason": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "integer"
          },
          "pull_request": {
            "type": "object",
            "properties": {
              "merged_at": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "diff_url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "html_url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "patch_url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "url": {
                "type": "string",
                "format": "uri",
                "nullable": true
              }
            },
            "required": [
              "diff_url",
              "html_url",
              "patch_url",
              "url"
            ]
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "draft": {
            "type": "boolean"
          },
          "closed_by": {
            "$ref": "#/components/schemas/nullable-simple-user"
          },
          "body_html": {
            "type": "string"
          },
          "body_text": {
            "type": "string"
          },
          "timeline_url": {
            "type": "string",
            "format": "uri"
          },
          "repository": {
            "$ref": "#/components/schemas/repository"
          },
          "performed_via_github_app": {
            "$ref": "#/components/schemas/nullable-integration"
          },
          "author_association": {
            "$ref": "#/components/schemas/author-association"
          },
          "reactions": {
            "$ref": "#/components/schemas/reaction-rollup"
          }
        },
        "required": [
          "assignee",
          "closed_at",
          "comments",
          "comments_url",
          "events_url",
          "html_url",
          "id",
          "node_id",
          "labels",
          "labels_url",
          "milestone",
          "number",
          "repository_url",
          "state",
          "locked",
          "title",
          "url",
          "user",
          "author_association",
          "created_at",
          "updated_at"
        ],
        "nullable": true
      },
      "issue-event-label": {
        "title": "Issue Event Label",
        "description": "Issue Event Label",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "color"
        ]
      },
      "issue-event-dismissed-review": {
        "title": "Issue Event Dismissed Review",
        "type": "object",
        "properties": {
          "state": {
            "type": "string"
          },
          "review_id": {
            "type": "integer"
          },
          "dismissal_message": {
            "type": "string",
            "nullable": true
          },
          "dismissal_commit_id": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "state",
          "review_id",
          "dismissal_message"
        ]
      },
      "issue-event-milestone": {
        "title": "Issue Event Milestone",
        "description": "Issue Event Milestone",
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "issue-event-project-card": {
        "title": "Issue Event Project Card",
        "description": "Issue Event Project Card",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "id": {
            "type": "integer"
          },
          "project_url": {
            "type": "string",
            "format": "uri"
          },
          "project_id": {
            "type": "integer"
          },
          "column_name": {
            "type": "string"
          },
          "previous_column_name": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "id",
          "project_url",
          "project_id",
          "column_name"
        ]
      },
      "issue-event-rename": {
        "title": "Issue Event Rename",
        "description": "Issue Event Rename",
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "team-simple": {
        "title": "Team Simple",
        "description": "Groups of organization members that gives permissions on specified repositories.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the team",
            "type": "integer",
            "example": 1
          },
          "node_id": {
            "type": "string",
            "example": "MDQ6VGVhbTE="
          },
          "url": {
            "description": "URL for the team",
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/organizations/1/team/1"
          },
          "members_url": {
            "type": "string",
            "example": "https://api.github.com/organizations/1/team/1/members{/member}"
          },
          "name": {
            "description": "Name of the team",
            "type": "string",
            "example": "Justice League"
          },
          "description": {
            "description": "Description of the team",
            "type": "string",
            "nullable": true,
            "example": "A great team."
          },
          "permission": {
            "description": "Permission that the team will have for its repositories",
            "type": "string",
            "example": "admin"
          },
          "privacy": {
            "description": "The level of privacy this team should have",
            "type": "string",
            "example": "closed"
          },
          "notification_setting": {
            "description": "The notification setting the team has set",
            "type": "string",
            "example": "notifications_enabled"
          },
          "html_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/orgs/rails/teams/core"
          },
          "repositories_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.github.com/organizations/1/team/1/repos"
          },
          "slug": {
            "type": "string",
            "example": "justice-league"
          },
          "ldap_dn": {
            "description": "Distinguished Name (DN) that team maps to within LDAP environment",
            "example": "uid=example,ou=users,dc=github,dc=com",
            "type": "string"
          }
        },
        "required": [
          "id",
          "node_id",
          "url",
          "members_url",
          "name",
          "description",
          "permission",
          "html_url",
          "repositories_url",
          "slug"
        ]
      },
      "release-asset": {
        "title": "Release Asset",
        "description": "Data related to a release.",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "browser_download_url": {
            "type": "string",
            "format": "uri"
          },
          "id": {
            "type": "integer"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "description": "The file name of the asset.",
            "type": "string",
            "example": "Team Environment"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "description": "State of the release asset.",
            "type": "string",
            "enum": [
              "uploaded",
              "open"
            ]
          },
          "content_type": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "download_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "uploader": {
            "$ref": "#/components/schemas/nullable-simple-user"
          }
        },
        "required": [
          "id",
          "name",
          "content_type",
          "size",
          "state",
          "url",
          "node_id",
          "download_count",
          "label",
          "uploader",
          "browser_download_url",
          "created_at",
          "updated_at"
        ]
      },
      "nullable-alert-updated-at": {
        "type": "string",
        "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "format": "date-time",
        "readOnly": true,
        "nullable": true
      },
      "search-result-text-matches": {
        "title": "Search Result Text Matches",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "object_url": {
              "type": "string"
            },
            "object_type": {
              "nullable": true,
              "type": "string"
            },
            "property": {
              "type": "string"
            },
            "fragment": {
              "type": "string"
            },
            "matches": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string"
                  },
                  "indices": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "examples": {
      "global-hook-items": {
        "value": [
          {
            "type": "Global",
            "id": 1,
            "name": "web",
            "active": true,
            "events": [
              "organization",
              "user"
            ],
            "config": {
              "url": "https://example.com",
              "content_type": "json",
              "insecure_ssl": "0",
              "secret": "********"
            },
            "updated_at": "2017-12-07T00:14:59Z",
            "created_at": "2017-12-07T00:14:59Z",
            "url": "https://api.github.com/admin/hooks/1",
            "ping_url": "https://api.github.com/admin/hooks/1/pings"
          }
        ]
      },
      "global-hook": {
        "value": {
          "type": "Global",
          "id": 1,
          "name": "web",
          "active": true,
          "events": [
            "organization",
            "user"
          ],
          "config": {
            "url": "https://example.com",
            "content_type": "json",
            "insecure_ssl": "0",
            "secret": "********"
          },
          "updated_at": "2017-12-07T00:14:59Z",
          "created_at": "2017-12-07T00:14:59Z",
          "url": "https://api.github.com/admin/hooks/1",
          "ping_url": "https://api.github.com/admin/hooks/1/pings"
        }
      },
      "global-hook-2": {
        "value": {
          "type": "Global",
          "id": 1,
          "name": "web",
          "active": true,
          "events": [
            "organization"
          ],
          "config": {
            "url": "https://example.com",
            "content_type": "form",
            "insecure_ssl": "0"
          },
          "updated_at": "2017-12-07T00:14:59Z",
          "created_at": "2017-12-07T00:14:59Z",
          "url": "https://api.github.com/admin/hooks/1",
          "ping_url": "https://api.github.com/admin/hooks/1/pings"
        }
      },
      "enterprise-public-key-items": {
        "value": [
          {
            "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
            "id": 2,
            "url": "https://api.github.com/user/keys/2",
            "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
            "created_at": "2020-06-11T21:31:57Z",
            "verified": false,
            "read_only": false,
            "last_used": "2020-06-11T22:31:57Z",
            "user_id": 1,
            "repository_id": 2
          },
          {
            "key": "9Og8iYjAyymI9LvABpJerYrMxURPc8r+dB7TJyvv1234",
            "id": 3,
            "url": "https://api.github.com/user/keys/2",
            "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
            "created_at": "2020-06-11T21:31:57Z",
            "verified": false,
            "read_only": false,
            "last_used": "2020-06-11T22:31:57Z",
            "user_id": 1,
            "repository_id": 2
          }
        ]
      },
      "organization-simple": {
        "value": {
          "login": "github",
          "id": 1,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "url": "https://api.github.com/orgs/github",
          "repos_url": "https://api.github.com/orgs/github/repos",
          "events_url": "https://api.github.com/orgs/github/events",
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "issues_url": "https://api.github.com/orgs/github/issues",
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "description": "A great organization"
        }
      },
      "pre-receive-environment-items": {
        "value": [
          {
            "id": 1,
            "name": "Default",
            "image_url": "githubenterprise://internal",
            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1",
            "html_url": "https://github.example.com/admin/pre-receive-environments/1",
            "default_environment": true,
            "created_at": "2016-05-20T11:35:45-05:00",
            "hooks_count": 14,
            "download": {
              "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1/downloads/latest",
              "state": "not_started",
              "downloaded_at": "2016-05-26T07:42:53-05:00",
              "message": null
            }
          },
          {
            "id": 2,
            "name": "DevTools Hook Env",
            "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
            "html_url": "https://github.example.com/admin/pre-receive-environments/2",
            "default_environment": false,
            "created_at": "2016-05-20T11:35:45-05:00",
            "hooks_count": 1,
            "download": {
              "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
              "state": "success",
              "downloaded_at": "2016-05-26T07:42:53-05:00",
              "message": null
            }
          }
        ]
      },
      "pre-receive-environment": {
        "value": {
          "id": 2,
          "name": "DevTools Hook Env",
          "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
          "html_url": "https://github.example.com/admin/pre-receive-environments/2",
          "default_environment": false,
          "created_at": "2016-05-20T11:35:45-05:00",
          "hooks_count": 1,
          "download": {
            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
            "state": "not_started",
            "downloaded_at": null,
            "message": null
          }
        }
      },
      "pre-receive-environment-default-response": {
        "value": {
          "id": 2,
          "name": "DevTools Hook Env",
          "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
          "html_url": "https://github.example.com/admin/pre-receive-environments/2",
          "default_environment": false,
          "created_at": "2016-05-20T11:35:45-05:00",
          "hooks_count": 1,
          "download": {
            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
            "state": "success",
            "downloaded_at": "2016-05-26T07:42:53-05:00",
            "message": null
          }
        }
      },
      "pre-receive-environment-download-status-default-response": {
        "value": {
          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/3/downloads/latest",
          "state": "not_started",
          "downloaded_at": null,
          "message": null
        }
      },
      "pre-receive-environment-download-status": {
        "value": {
          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/3/downloads/latest",
          "state": "success",
          "downloaded_at": "2016-05-26T07:42:53-05:00",
          "message": null
        }
      },
      "authorization-items": {
        "value": [
          {
            "id": 1,
            "url": "https://api.github.com/authorizations/1",
            "scopes": [
              "public_repo"
            ],
            "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
            "token_last_eight": "Ae178B4a",
            "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
            "app": {
              "url": "http://my-github-app.com",
              "name": "my github app",
              "client_id": "abcde12345fghij67890"
            },
            "note": "optional note",
            "note_url": "http://optional/note/url",
            "updated_at": "2011-09-06T20:39:23Z",
            "created_at": "2011-09-06T17:26:27Z",
            "expires_at": "2011-09-08T17:26:27Z",
            "fingerprint": "jklmnop12345678"
          }
        ]
      },
      "authorization": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
          "token_last_eight": "Ae178B4a",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "expires_at": "2011-10-06T17:26:27Z",
          "fingerprint": ""
        }
      },
      "base-installation-items": {
        "value": [
          {
            "id": 1,
            "account": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
            "repositories_url": "https://api.github.com/installation/repositories",
            "html_url": "https://github.com/organizations/github/settings/installations/1",
            "app_id": 1,
            "target_id": 1,
            "target_type": "Organization",
            "permissions": {
              "checks": "write",
              "metadata": "read",
              "contents": "read"
            },
            "events": [
              "push",
              "pull_request"
            ],
            "single_file_name": "config.yaml",
            "has_multiple_single_files": true,
            "single_file_paths": [
              "config.yml",
              ".github/issue_TEMPLATE.md"
            ],
            "repository_selection": "selected",
            "created_at": "2017-07-08T16:18:44-04:00",
            "updated_at": "2017-07-08T16:18:44-04:00",
            "app_slug": "github-actions",
            "suspended_at": null,
            "suspended_by": null
          }
        ]
      },
      "base-installation": {
        "value": {
          "id": 1,
          "account": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
          "repositories_url": "https://api.github.com/installation/repositories",
          "html_url": "https://github.com/organizations/github/settings/installations/1",
          "app_id": 1,
          "target_id": 1,
          "target_type": "Organization",
          "permissions": {
            "checks": "write",
            "metadata": "read",
            "contents": "read"
          },
          "events": [
            "push",
            "pull_request"
          ],
          "single_file_name": "config.yaml",
          "has_multiple_single_files": true,
          "single_file_paths": [
            "config.yml",
            ".github/issue_TEMPLATE.md"
          ],
          "repository_selection": "selected",
          "created_at": "2017-07-08T16:18:44-04:00",
          "updated_at": "2017-07-08T16:18:44-04:00",
          "app_slug": "github-actions",
          "suspended_at": null,
          "suspended_by": null
        }
      },
      "installation-token": {
        "value": {
          "token": "ghs_16C7e42F292c6912E7710c838347Ae178B4a",
          "expires_at": "2016-07-11T22:14:10Z",
          "permissions": {
            "issues": "write",
            "contents": "read"
          },
          "repository_selection": "selected",
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://github.com/licenses/mit"
              },
              "forks": 1,
              "open_issues": 1,
              "watchers": 1
            }
          ]
        }
      },
      "authorization-with-user": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo",
            "user"
          ],
          "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
          "token_last_eight": "Ae178B4a",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "Iv1.8a61f9b3a7aba766"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678",
          "expires_at": "2011-09-08T17:26:27Z",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "announcement": {
        "summary": "Announcement banner",
        "value": {
          "announcement": "Very **important** announcement about _something_.",
          "expires_at": "2021-01-01T00:00:00.000+00:00",
          "user_dismissible": false
        }
      },
      "license-info": {
        "value": {
          "seats": 1400,
          "seats_used": 1316,
          "seats_available": 84,
          "kind": "standard",
          "days_until_expiration": 365,
          "expire_at": "2016/02/06 12:41:52 -0600"
        }
      },
      "enterprise-overview": {
        "value": {
          "repos": {
            "total_repos": 212,
            "root_repos": 194,
            "fork_repos": 18,
            "org_repos": 51,
            "total_pushes": 3082,
            "total_wikis": 15
          },
          "hooks": {
            "total_hooks": 27,
            "active_hooks": 23,
            "inactive_hooks": 4
          },
          "pages": {
            "total_pages": 36
          },
          "orgs": {
            "total_orgs": 33,
            "disabled_orgs": 0,
            "total_teams": 60,
            "total_team_members": 314
          },
          "users": {
            "total_users": 254,
            "admin_users": 45,
            "suspended_users": 21
          },
          "pulls": {
            "total_pulls": 86,
            "merged_pulls": 60,
            "mergeable_pulls": 21,
            "unmergeable_pulls": 3
          },
          "issues": {
            "total_issues": 179,
            "open_issues": 83,
            "closed_issues": 96
          },
          "milestones": {
            "total_milestones": 7,
            "open_milestones": 6,
            "closed_milestones": 1
          },
          "gists": {
            "total_gists": 178,
            "private_gists": 151,
            "public_gists": 25
          },
          "comments": {
            "total_commit_comments": 6,
            "total_gist_comments": 28,
            "total_issue_comments": 366,
            "total_pull_request_comments": 30
          }
        }
      },
      "actions-enterprise-permissions": {
        "value": {
          "enabled_organizations": "all",
          "allowed_actions": "selected",
          "selected_actions_url": "https://api.github.com/enterprises/2/actions/permissions/selected-actions"
        }
      },
      "organization-targets": {
        "value": {
          "total_count": 1,
          "organizations": [
            {
              "login": "octocat",
              "id": 161335,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "url": "https://api.github.com/orgs/octo-org",
              "repos_url": "https://api.github.com/orgs/octo-org/repos",
              "events_url": "https://api.github.com/orgs/octo-org/events",
              "hooks_url": "https://api.github.com/orgs/octo-org/hooks",
              "issues_url": "https://api.github.com/orgs/octo-org/issues",
              "members_url": "https://api.github.com/orgs/octo-org/members{/member}",
              "public_members_url": "https://api.github.com/orgs/octo-org/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            }
          ]
        }
      },
      "selected-actions": {
        "value": {
          "github_owned_allowed": true,
          "verified_allowed": false,
          "patterns_allowed": [
            "monalisa/octocat@*",
            "docker/*"
          ]
        }
      },
      "runner-groups-enterprise": {
        "value": {
          "total_count": 3,
          "runner_groups": [
            {
              "id": 1,
              "name": "Default",
              "visibility": "all",
              "default": true,
              "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner_groups/1/runners",
              "allows_public_repositories": false,
              "restricted_to_workflows": false,
              "selected_workflows": [],
              "workflow_restrictions_read_only": false
            },
            {
              "id": 2,
              "name": "octo-runner-group",
              "visibility": "selected",
              "default": false,
              "selected_organizations_url": "https://api.github.com/enterprises/octo-corp/actions/runner_groups/2/organizations",
              "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner_groups/2/runners",
              "allows_public_repositories": true,
              "restricted_to_workflows": true,
              "selected_workflows": [
                "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
              ],
              "workflow_restrictions_read_only": false
            },
            {
              "id": 3,
              "name": "expensive-hardware",
              "visibility": "private",
              "default": false,
              "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner_groups/3/runners",
              "allows_public_repositories": true,
              "restricted_to_workflows": false,
              "selected_workflows": [
                "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
              ],
              "workflow_restrictions_read_only": false
            }
          ]
        }
      },
      "runner-group-enterprise": {
        "value": {
          "id": 2,
          "name": "octo-runner-group",
          "visibility": "selected",
          "default": false,
          "selected_organizations_url": "https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/organizations",
          "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/runners",
          "allows_public_repositories": false,
          "restricted_to_workflows": true,
          "selected_workflows": [
            "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
          ],
          "workflow_restrictions_read_only": false
        }
      },
      "runner-group-update-enterprise": {
        "value": {
          "id": 2,
          "name": "Expensive hardware runners",
          "visibility": "selected",
          "default": false,
          "selected_organizations_url": "https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/organizations",
          "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/runners",
          "allows_public_repositories": true,
          "restricted_to_workflows": false,
          "selected_workflows": [
            "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
          ],
          "workflow_restrictions_read_only": false
        }
      },
      "runner-paginated": {
        "value": {
          "total_count": 2,
          "runners": [
            {
              "id": 23,
              "name": "linux_runner",
              "os": "linux",
              "status": "online",
              "busy": true,
              "labels": [
                {
                  "id": 5,
                  "name": "self-hosted",
                  "type": "read-only"
                },
                {
                  "id": 7,
                  "name": "X64",
                  "type": "read-only"
                },
                {
                  "id": 11,
                  "name": "Linux",
                  "type": "read-only"
                }
              ]
            },
            {
              "id": 24,
              "name": "mac_runner",
              "os": "macos",
              "status": "offline",
              "busy": false,
              "labels": [
                {
                  "id": 5,
                  "name": "self-hosted",
                  "type": "read-only"
                },
                {
                  "id": 7,
                  "name": "X64",
                  "type": "read-only"
                },
                {
                  "id": 20,
                  "name": "macOS",
                  "type": "read-only"
                },
                {
                  "id": 21,
                  "name": "no-gpu",
                  "type": "custom"
                }
              ]
            }
          ]
        }
      },
      "runner-application-items": {
        "value": [
          {
            "os": "osx",
            "architecture": "x64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-osx-x64-2.164.0.tar.gz",
            "filename": "actions-runner-osx-x64-2.164.0.tar.gz"
          },
          {
            "os": "linux",
            "architecture": "x64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-x64-2.164.0.tar.gz",
            "filename": "actions-runner-linux-x64-2.164.0.tar.gz"
          },
          {
            "os": "linux",
            "architecture": "arm",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm-2.164.0.tar.gz",
            "filename": "actions-runner-linux-arm-2.164.0.tar.gz"
          },
          {
            "os": "win",
            "architecture": "x64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-win-x64-2.164.0.zip",
            "filename": "actions-runner-win-x64-2.164.0.zip"
          },
          {
            "os": "linux",
            "architecture": "arm64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm64-2.164.0.tar.gz",
            "filename": "actions-runner-linux-arm64-2.164.0.tar.gz"
          }
        ]
      },
      "authentication-token": {
        "value": {
          "token": "LLBF3JGZDX3P5PMEXLND6TS6FCWO6",
          "expires_at": "2020-01-22T12:13:35.123-08:00"
        }
      },
      "authentication-token-2": {
        "value": {
          "token": "AABF3JGZDX3P5PMEXLND6TS6FCWO6",
          "expires_at": "2020-01-29T12:13:35.123-08:00"
        }
      },
      "runner": {
        "value": {
          "id": 23,
          "name": "MBP",
          "os": "macos",
          "status": "online",
          "busy": true,
          "labels": [
            {
              "id": 5,
              "name": "self-hosted",
              "type": "read-only"
            },
            {
              "id": 7,
              "name": "X64",
              "type": "read-only"
            },
            {
              "id": 20,
              "name": "macOS",
              "type": "read-only"
            },
            {
              "id": 21,
              "name": "no-gpu",
              "type": "custom"
            }
          ]
        }
      },
      "audit-log": {
        "value": [
          {
            "actor_ip": "88.123.45.123",
            "from": "pull_requests#merge",
            "device_cookie": null,
            "actor": "mona-admin",
            "actor_id": 7,
            "repo": "octo-org/octo-repo",
            "repo_id": 17,
            "business": "github",
            "business_id": 1,
            "org": "octo-org",
            "org_id": 8,
            "action": "pull_request.merge",
            "@timestamp": 1635940599755,
            "created_at": 1635940599755,
            "operation_type": "modify",
            "actor_location": {
              "country_code": "GB",
              "country_name": "United Kingdom",
              "region": "ENG",
              "region_name": "England",
              "city": "Louth",
              "postal_code": "LN11",
              "location": {
                "lat": 53.4457,
                "lon": 0.141
              }
            },
            "data": {
              "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ...",
              "method": "POST",
              "request_id": "e4dabc4d-ba16-4bca-1234-649be7ae1188",
              "server_id": "5d17aab5-fd9f-abcd-a820-16bed246441b",
              "request_category": "other",
              "controller_action": "merge",
              "url": "https://example.com/octo-org/octo-repo/pull/1/merge",
              "client_id": 322299977.1635936,
              "referrer": "https://example.com/octo-org/octo-repo/pull/1",
              "actor_session": 1,
              "pull_request_id": 1,
              "category_type": "Resource Management"
            }
          },
          {
            "actor_ip": "88.123.45.123",
            "from": "pull_request_review_events#create",
            "device_cookie": null,
            "actor": "mona-admin",
            "actor_id": 7,
            "business_id": 1,
            "org_id": 8,
            "action": "pull_request_review.submit",
            "@timestamp": 1635940593079,
            "created_at": 1635940593079,
            "operation_type": "modify",
            "actor_location": {
              "country_code": "GB",
              "country_name": "United Kingdom",
              "region": "ENG",
              "region_name": "England",
              "city": "Louth",
              "postal_code": "LN11",
              "location": {
                "lat": 53.4457,
                "lon": 0.141
              }
            },
            "data": {
              "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ...",
              "method": "PUT",
              "request_id": "c0f63bb7-17b6-4796-940c-12345c5a581b",
              "server_id": "2abc1234-f651-43e3-9696-e942ad5f8c89",
              "request_category": "other",
              "controller_action": "create",
              "url": "https://example.com/octo-org/octo-repo/pull/1/reviews",
              "client_id": 322299977.1635936,
              "referrer": "https://example.com/octo-org/octo-repo/pull/1/files",
              "actor_session": 1,
              "spammy": false,
              "pull_request_id": 1,
              "body": null,
              "allowed": true,
              "id": 1,
              "state": 40,
              "issue_id": 1,
              "review_id": 1,
              "category_type": "Resource Management"
            }
          },
          {
            "actor_ip": "88.123.45.123",
            "from": "pull_requests#create",
            "device_cookie": null,
            "actor": "mona",
            "actor_id": 9,
            "user_id": 9,
            "repo": "octo-org/octo-repo",
            "repo_id": 17,
            "business": "github",
            "business_id": 1,
            "org": "octo-org",
            "org_id": 8,
            "action": "pull_request.create",
            "@timestamp": 1635940554161,
            "created_at": 1635940554161,
            "operation_type": "create",
            "actor_location": {
              "country_code": "GB",
              "country_name": "United Kingdom",
              "region": "ENG",
              "region_name": "England",
              "city": "Louth",
              "postal_code": "LN11",
              "location": {
                "lat": 53.4457,
                "lon": 0.141
              }
            },
            "data": {
              "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ...",
              "method": "POST",
              "request_id": "2773abeb-477f-4ebf-a017-f8e8a206c305",
              "server_id": "796e3115-4ce8-4606-8fd0-99ea57a2e12b",
              "request_category": "other",
              "controller_action": "create",
              "url": "https://example.com/octo-org/octo-repo/pull/create?base=octo-org%3Amain&head=mona%3Apatch-1",
              "client_id": 386351111.163594,
              "referrer": "https://example.com/octo-org/octo-repo/compare/main...mona:patch-1",
              "actor_session": 2,
              "pull_request_id": 1,
              "category_type": "Resource Management"
            }
          }
        ]
      },
      "repository-paginated-2": {
        "value": {
          "total_count": 1,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://github.com/licenses/mit"
              },
              "forks": 1,
              "open_issues": 1,
              "watchers": 1
            }
          ]
        }
      },
      "issue-with-repo-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDU6SXNzdWUx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "repository_url": "https://api.github.com/repos/octocat/Hello-World",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347",
            "number": 1347,
            "state": "open",
            "title": "Found a bug",
            "body": "I'm having a problem with this.",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513",
                "default": true
              }
            ],
            "assignee": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": {
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "id": 1002604,
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "state": "open",
              "title": "v1.0",
              "description": "Tracking milestone for version 1.0",
              "creator": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 4,
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "updated_at": "2014-03-03T18:58:10Z",
              "closed_at": "2013-02-12T13:22:01Z",
              "due_on": "2012-10-09T23:39:01Z"
            },
            "locked": true,
            "active_lock_reason": "too heated",
            "comments": 0,
            "pull_request": {
              "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
              "html_url": "https://github.com/octocat/Hello-World/pull/1347",
              "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
              "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
            },
            "closed_at": null,
            "created_at": "2011-04-22T13:33:48Z",
            "updated_at": "2011-04-22T13:33:48Z",
            "repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://github.com/licenses/mit"
              },
              "forks": 1,
              "open_issues": 1,
              "watchers": 1
            },
            "author_association": "COLLABORATOR"
          }
        ]
      },
      "api-overview": {
        "value": {
          "verifiable_password_authentication": true,
          "ssh_key_fingerprints": {
            "SHA256_RSA": 1234567890,
            "SHA256_DSA": 1234567890,
            "SHA256_ECDSA": 1234567890,
            "SHA256_ED25519": 1234567890
          },
          "hooks": [
            "192.0.2.1"
          ],
          "web": [
            "192.0.2.1"
          ],
          "api": [
            "192.0.2.1"
          ],
          "git": [
            "192.0.2.1"
          ],
          "packages": [
            "192.0.2.1"
          ],
          "pages": [
            "192.0.2.1"
          ],
          "importer": [
            "192.0.2.1"
          ],
          "actions": [
            "192.0.2.1"
          ],
          "dependabot": [
            "192.0.2.1"
          ]
        }
      },
      "thread-items": {
        "value": [
          {
            "id": "1",
            "repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
            },
            "subject": {
              "title": "Greetings",
              "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123",
              "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
              "type": "Issue"
            },
            "reason": "subscribed",
            "unread": true,
            "updated_at": "2014-11-07T22:01:45Z",
            "last_read_at": "2014-11-07T22:01:45Z",
            "url": "https://api.github.com/notifications/threads/1",
            "subscription_url": "https://api.github.com/notifications/threads/1/subscription"
          }
        ]
      },
      "thread": {
        "value": {
          "id": "1",
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "subject": {
            "title": "Greetings",
            "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123",
            "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
            "type": "Issue"
          },
          "reason": "subscribed",
          "unread": true,
          "updated_at": "2014-11-07T22:01:45Z",
          "last_read_at": "2014-11-07T22:01:45Z",
          "url": "https://api.github.com/notifications/threads/1",
          "subscription_url": "https://api.github.com/notifications/threads/1/subscription"
        }
      },
      "organization-full": {
        "value": {
          "login": "github",
          "id": 1,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "url": "https://api.github.com/orgs/github",
          "repos_url": "https://api.github.com/orgs/github/repos",
          "events_url": "https://api.github.com/orgs/github/events",
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "issues_url": "https://api.github.com/orgs/github/issues",
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "description": "A great organization",
          "name": "github",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "twitter_username": "github",
          "is_verified": true,
          "has_organization_projects": true,
          "has_repository_projects": true,
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "html_url": "https://github.com/octocat",
          "created_at": "2008-01-14T04:33:35Z",
          "type": "Organization",
          "total_private_repos": 100,
          "owned_private_repos": 100,
          "private_gists": 81,
          "disk_usage": 10000,
          "collaborators": 8,
          "billing_email": "mona@github.com",
          "plan": {
            "name": "Medium",
            "space": 400,
            "private_repos": 20,
            "filled_seats": 4,
            "seats": 5
          },
          "default_repository_permission": "read",
          "members_can_create_repositories": true,
          "two_factor_requirement_enabled": true,
          "members_allowed_repository_creation_type": "all",
          "members_can_create_public_repositories": false,
          "members_can_create_private_repositories": false,
          "members_can_create_internal_repositories": false,
          "members_can_create_pages": true,
          "members_can_create_public_pages": true,
          "members_can_create_private_pages": true,
          "members_can_fork_private_repositories": false,
          "web_commit_signoff_required": false,
          "updated_at": "2014-03-03T18:58:10Z",
          "dependency_graph_enabled_for_new_repositories": false,
          "dependabot_alerts_enabled_for_new_repositories": false,
          "dependabot_security_updates_enabled_for_new_repositories": false,
          "advanced_security_enabled_for_new_repositories": false,
          "secret_scanning_enabled_for_new_repositories": false,
          "secret_scanning_push_protection_enabled_for_new_repositories": false,
          "secret_scanning_push_protection_custom_link": false,
          "secret_scanning_push_protection_custom_link_enabled": "https://github.com/octo-org/octo-repo/blob/main/im-blocked.md"
        }
      },
      "repository-paginated": {
        "value": {
          "total_count": 1,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://github.com/licenses/mit"
              },
              "forks": 1,
              "open_issues": 1,
              "watchers": 1
            }
          ]
        }
      },
      "runner-groups-org": {
        "value": {
          "total_count": 3,
          "runner_groups": [
            {
              "id": 1,
              "name": "Default",
              "visibility": "all",
              "default": true,
              "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/1/runners",
              "inherited": false,
              "allows_public_repositories": true,
              "restricted_to_workflows": false,
              "selected_workflows": [],
              "workflow_restrictions_read_only": false
            },
            {
              "id": 2,
              "name": "octo-runner-group",
              "visibility": "selected",
              "default": false,
              "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/repositories",
              "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
              "inherited": true,
              "allows_public_repositories": true,
              "restricted_to_workflows": true,
              "selected_workflows": [
                "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
              ],
              "workflow_restrictions_read_only": true
            },
            {
              "id": 3,
              "name": "expensive-hardware",
              "visibility": "private",
              "default": false,
              "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/3/runners",
              "inherited": false,
              "allows_public_repositories": true,
              "restricted_to_workflows": false,
              "selected_workflows": [
                "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
              ],
              "workflow_restrictions_read_only": false
            }
          ]
        }
      },
      "runner-group": {
        "value": {
          "id": 2,
          "name": "octo-runner-group",
          "visibility": "selected",
          "default": false,
          "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner-groups/2/repositories",
          "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
          "inherited": false,
          "allows_public_repositories": true,
          "restricted_to_workflows": true,
          "selected_workflows": [
            "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
          ],
          "workflow_restrictions_read_only": false
        }
      },
      "runner-group-item": {
        "value": {
          "id": 2,
          "name": "octo-runner-group",
          "visibility": "selected",
          "default": false,
          "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/repositories",
          "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
          "inherited": false,
          "allows_public_repositories": true,
          "restricted_to_workflows": true,
          "selected_workflows": [
            "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
          ],
          "workflow_restrictions_read_only": false
        }
      },
      "public-repository-paginated": {
        "value": {
          "total_count": 1,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
            }
          ]
        }
      },
      "code-scanning-organization-alert-items": {
        "value": [
          {
            "number": 4,
            "created_at": "2020-02-13T12:29:18Z",
            "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/4",
            "html_url": "https://github.com/octocat/hello-world/code-scanning/4",
            "state": "open",
            "dismissed_by": null,
            "dismissed_at": null,
            "dismissed_reason": null,
            "rule": {
              "id": "js/zipslip",
              "severity": "error",
              "description": "Arbitrary file write during zip extraction",
              "name": "js/zipslip"
            },
            "tool": {
              "name": "CodeQL",
              "guid": null,
              "version": "2.4.0"
            },
            "most_recent_instance": {
              "ref": "refs/heads/main",
              "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
              "category": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
              "environment": "{}",
              "state": "open",
              "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
              "message": {
                "text": "This path depends on a user-provided value."
              },
              "location": {
                "path": "spec-main/api-session-spec.ts",
                "start_line": 917,
                "end_line": 917,
                "start_column": 7,
                "end_column": 18
              },
              "classifications": [
                "test"
              ]
            },
            "instances_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/4/instances",
            "repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks"
            }
          },
          {
            "number": 3,
            "created_at": "2020-02-13T12:29:18Z",
            "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/3",
            "html_url": "https://github.com/octocat/hello-world/code-scanning/3",
            "state": "dismissed",
            "dismissed_by": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "dismissed_at": "2020-02-14T12:29:18Z",
            "dismissed_reason": "false positive",
            "rule": {
              "id": "js/zipslip",
              "severity": "error",
              "description": "Arbitrary file write during zip extraction",
              "name": "js/zipslip"
            },
            "tool": {
              "name": "CodeQL",
              "guid": null,
              "version": "2.4.0"
            },
            "most_recent_instance": {
              "ref": "refs/heads/main",
              "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
              "category": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
              "environment": "{}",
              "state": "open",
              "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
              "message": {
                "text": "This path depends on a user-provided value."
              },
              "location": {
                "path": "lib/ab12-gen.js",
                "start_line": 917,
                "end_line": 917,
                "start_column": 7,
                "end_column": 18
              },
              "classifications": []
            },
            "instances_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/3/instances",
            "repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks"
            }
          }
        ]
      },
      "external-group": {
        "value": {
          "group_id": "123",
          "group_name": "Octocat admins",
          "updated_at": "2021-01-24T11:31:04-06:00",
          "teams": [
            {
              "team_id": 1,
              "team_name": "team-test"
            },
            {
              "team_id": 2,
              "team_name": "team-test2"
            }
          ],
          "members": [
            {
              "member_id": 1,
              "member_login": "mona-lisa_eocsaxrs",
              "member_name": "Mona Lisa",
              "member_email": "mona_lisa@github.com"
            },
            {
              "member_id": 2,
              "member_login": "octo-lisa_eocsaxrs",
              "member_name": "Octo Lisa",
              "member_email": "octo_lisa@github.com"
            }
          ]
        }
      },
      "external-groups": {
        "value": {
          "groups": [
            {
              "group_id": "123",
              "group_name": "Octocat admins",
              "updated_at": "2021-01-24T11:31:04-06:00"
            },
            {
              "group_id": "456",
              "group_name": "Octocat docs members",
              "updated_at": "2021-03-24T11:31:04-06:00"
            }
          ]
        }
      },
      "installation": {
        "value": {
          "id": 1,
          "account": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "avatar_url": "https://github.com/images/error/hubot_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/github",
            "html_url": "https://github.com/github",
            "followers_url": "https://api.github.com/users/github/followers",
            "following_url": "https://api.github.com/users/github/following{/other_user}",
            "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/github/subscriptions",
            "organizations_url": "https://api.github.com/users/github/orgs",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "received_events_url": "https://api.github.com/users/github/received_events",
            "type": "Organization",
            "site_admin": false
          },
          "repository_selection": "all",
          "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
          "repositories_url": "https://api.github.com/installation/repositories",
          "html_url": "https://github.com/organizations/github/settings/installations/1",
          "app_id": 1,
          "target_id": 1,
          "target_type": "Organization",
          "permissions": {
            "checks": "write",
            "metadata": "read",
            "contents": "read"
          },
          "events": [
            "push",
            "pull_request"
          ],
          "created_at": "2018-02-09T20:51:14Z",
          "updated_at": "2018-02-09T20:51:14Z",
          "single_file_name": "config.yml",
          "has_multiple_single_files": true,
          "single_file_paths": [
            "config.yml",
            ".github/issue_TEMPLATE.md"
          ],
          "app_slug": "github-actions",
          "suspended_at": null,
          "suspended_by": null
        }
      },
      "installation-paginated": {
        "value": {
          "total_count": 1,
          "installations": [
            {
              "id": 25381,
              "account": {
                "login": "octo-org",
                "id": 6811672,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY4MTE2NzI=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/6811672?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octo-org",
                "html_url": "https://github.com/octo-org",
                "followers_url": "https://api.github.com/users/octo-org/followers",
                "following_url": "https://api.github.com/users/octo-org/following{/other_user}",
                "gists_url": "https://api.github.com/users/octo-org/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octo-org/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octo-org/subscriptions",
                "organizations_url": "https://api.github.com/users/octo-org/orgs",
                "repos_url": "https://api.github.com/users/octo-org/repos",
                "events_url": "https://api.github.com/users/octo-org/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octo-org/received_events",
                "type": "Organization",
                "site_admin": false
              },
              "repository_selection": "selected",
              "access_tokens_url": "https://api.github.com/app/installations/25381/access_tokens",
              "repositories_url": "https://api.github.com/installation/repositories",
              "html_url": "https://github.com/organizations/octo-org/settings/installations/25381",
              "app_id": 2218,
              "target_id": 6811672,
              "target_type": "Organization",
              "permissions": {
                "deployments": "write",
                "metadata": "read",
                "pull_requests": "read",
                "statuses": "read"
              },
              "events": [
                "deployment",
                "deployment_status"
              ],
              "created_at": "2017-05-16T08:47:09.000-07:00",
              "updated_at": "2017-06-06T11:23:23.000-07:00",
              "single_file_name": "config.yml",
              "has_multiple_single_files": true,
              "single_file_paths": [
                "config.yml",
                ".github/issue_TEMPLATE.md"
              ],
              "app_slug": "github-actions",
              "suspended_at": null,
              "suspended_by": null
            }
          ]
        }
      },
      "migration-with-short-org-items": {
        "value": [
          {
            "id": 79,
            "owner": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": true
            },
            "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "state": "pending",
            "lock_repositories": true,
            "exclude_attachments": false,
            "exclude_releases": false,
            "exclude_owner_projects": false,
            "repositories": [
              {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "language": null,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": true,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": null,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "allow_auto_merge": false,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://api.github.com/licenses/mit"
                },
                "forks": 1,
                "open_issues": 1,
                "watchers": 1
              }
            ],
            "url": "https://api.github.com/orgs/octo-org/migrations/79",
            "created_at": "2015-07-06T15:33:38-07:00",
            "updated_at": "2015-07-06T15:33:38-07:00",
            "node_id": "MDQ6VXNlcjE="
          }
        ]
      },
      "migration-with-short-org-2": {
        "value": {
          "id": 79,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "owner": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": true
          },
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "state": "pending",
          "lock_repositories": true,
          "exclude_attachments": false,
          "exclude_releases": false,
          "exclude_owner_projects": false,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://api.github.com/licenses/mit"
              },
              "forks": 1,
              "open_issues": 1,
              "watchers": 1
            }
          ],
          "url": "https://api.github.com/orgs/octo-org/migrations/79",
          "created_at": "2015-07-06T15:33:38-07:00",
          "updated_at": "2015-07-06T15:33:38-07:00"
        }
      },
      "migration-with-short-org": {
        "value": {
          "id": 79,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "owner": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": true
          },
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "state": "exported",
          "lock_repositories": true,
          "exclude_attachments": false,
          "exclude_releases": false,
          "exclude_owner_projects": false,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://api.github.com/licenses/mit"
              },
              "forks": 1,
              "open_issues": 1,
              "watchers": 1
            }
          ],
          "url": "https://api.github.com/orgs/octo-org/migrations/79",
          "created_at": "2015-07-06T15:33:38-07:00",
          "updated_at": "2015-07-06T15:33:38-07:00"
        }
      },
      "minimal-repository-items": {
        "value": [
          {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": false,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "has_discussions": false,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "security_and_analysis": {
              "advanced_security": {
                "status": "enabled"
              },
              "secret_scanning": {
                "status": "enabled"
              },
              "secret_scanning_push_protection": {
                "status": "disabled"
              }
            }
          }
        ]
      },
      "repository": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "organization": null,
          "language": null,
          "forks": 9,
          "forks_count": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "watchers": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues": 0,
          "open_issues_count": 0,
          "is_template": true,
          "license": {
            "key": "mit",
            "name": "MIT License",
            "url": "https://api.github.com/licenses/mit",
            "spdx_id": "MIT",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "html_url": "https://api.github.com/licenses/mit"
          },
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "admin": false,
            "push": false,
            "pull": true
          },
          "allow_rebase_merge": true,
          "template_repository": null,
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "allow_auto_merge": false,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "subscribers_count": 42,
          "network_count": 0
        }
      },
      "team-repository-alternative-response-with-repository-permissions": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "language": null,
          "forks_count": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "is_template": false,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "admin": false,
            "maintain": false,
            "push": false,
            "triage": false,
            "pull": true
          },
          "role_name": "read",
          "allow_rebase_merge": true,
          "template_repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World-Template",
            "full_name": "octocat/Hello-World-Template",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World-Template",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World-Template",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World-Template.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World-Template.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
            "homepage": "https://github.com",
            "language": null,
            "forks": 9,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "watchers": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues": 0,
            "open_issues_count": 0,
            "is_template": true,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "pull": true,
              "triage": false,
              "push": false,
              "maintain": false,
              "admin": false
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "allow_auto_merge": false,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "subscribers_count": 42,
          "network_count": 0,
          "license": {
            "key": "mit",
            "name": "MIT License",
            "url": "https://api.github.com/licenses/mit",
            "spdx_id": "MIT",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "html_url": "https://api.github.com/licenses/mit"
          },
          "forks": 1,
          "open_issues": 1,
          "watchers": 1
        }
      },
      "rate-limit-overview": {
        "value": {
          "resources": {
            "core": {
              "limit": 5000,
              "remaining": 4999,
              "reset": 1372700873,
              "used": 1
            },
            "search": {
              "limit": 30,
              "remaining": 18,
              "reset": 1372697452,
              "used": 12
            },
            "graphql": {
              "limit": 5000,
              "remaining": 4993,
              "reset": 1372700389,
              "used": 7
            },
            "integration_manifest": {
              "limit": 5000,
              "remaining": 4999,
              "reset": 1551806725,
              "used": 1
            },
            "code_scanning_upload": {
              "limit": 500,
              "remaining": 499,
              "reset": 1551806725,
              "used": 1
            }
          },
          "rate": {
            "limit": 5000,
            "remaining": 4999,
            "reset": 1372700873,
            "used": 1
          }
        }
      },
      "full-repository-default-response": {
        "summary": "Default response",
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "language": null,
          "forks_count": 9,
          "forks": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "watchers": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "open_issues": 0,
          "is_template": false,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "has_discussions": false,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "pull": true,
            "push": false,
            "admin": false
          },
          "allow_rebase_merge": true,
          "template_repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World-Template",
            "full_name": "octocat/Hello-World-Template",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World-Template",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World-Template",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World-Template.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World-Template.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
            "homepage": "https://github.com",
            "language": null,
            "forks": 9,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "watchers": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues": 0,
            "open_issues_count": 0,
            "is_template": true,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "allow_auto_merge": false,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "subscribers_count": 42,
          "network_count": 0,
          "license": {
            "key": "mit",
            "name": "MIT License",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit",
            "node_id": "MDc6TGljZW5zZW1pdA=="
          },
          "organization": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "Organization",
            "site_admin": false
          },
          "parent": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "forks": 1,
            "open_issues": 1,
            "watchers": 1
          },
          "source": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "forks": 1,
            "open_issues": 1,
            "watchers": 1,
            "security_and_analysis": {
              "advanced_security": {
                "status": "enabled"
              },
              "secret_scanning": {
                "status": "enabled"
              },
              "secret_scanning_push_protection": {
                "status": "disabled"
              }
            }
          }
        }
      },
      "full-repository": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "license": {
            "key": "mit",
            "name": "MIT License",
            "url": "https://api.github.com/licenses/mit",
            "spdx_id": "MIT",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "html_url": "https://github.com/licenses/mit"
          },
          "language": null,
          "forks_count": 9,
          "forks": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "watchers": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "open_issues": 0,
          "is_template": false,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "pull": true,
            "push": false,
            "admin": false
          },
          "allow_rebase_merge": true,
          "template_repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World-Template",
            "full_name": "octocat/Hello-World-Template",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World-Template",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World-Template",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World-Template.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World-Template.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
            "homepage": "https://github.com",
            "language": null,
            "forks": 9,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "watchers": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues": 0,
            "open_issues_count": 0,
            "is_template": true,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "allow_auto_merge": false,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "allow_forking": true,
          "web_commit_signoff_required": false,
          "subscribers_count": 42,
          "network_count": 0,
          "organization": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "Organization",
            "site_admin": false
          },
          "parent": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "forks": 1,
            "open_issues": 1,
            "watchers": 1
          },
          "source": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "forks": 1,
            "open_issues": 1,
            "watchers": 1
          }
        }
      },
      "artifact-paginated": {
        "value": {
          "total_count": 2,
          "artifacts": [
            {
              "id": 11,
              "node_id": "MDg6QXJ0aWZhY3QxMQ==",
              "name": "Rails",
              "size_in_bytes": 556,
              "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11",
              "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
              "expired": false,
              "created_at": "2020-01-10T14:59:22Z",
              "expires_at": "2020-03-21T14:59:22Z",
              "updated_at": "2020-02-21T14:59:22Z",
              "workflow_run": {
                "id": 2332938,
                "repository_id": 1296269,
                "head_repository_id": 1296269,
                "head_branch": "main",
                "head_sha": "328faa0536e6fef19753d9d91dc96a9931694ce3"
              }
            },
            {
              "id": 13,
              "node_id": "MDg6QXJ0aWZhY3QxMw==",
              "name": "Test output",
              "size_in_bytes": 453,
              "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13",
              "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip",
              "expired": false,
              "created_at": "2020-01-10T14:59:22Z",
              "expires_at": "2020-03-21T14:59:22Z",
              "updated_at": "2020-02-21T14:59:22Z",
              "workflow_run": {
                "id": 2332942,
                "repository_id": 1296269,
                "head_repository_id": 1296269,
                "head_branch": "main",
                "head_sha": "178f4f6090b3fccad4a65b3e83d076a622d59652"
              }
            }
          ]
        }
      },
      "job": {
        "value": {
          "id": 399444496,
          "run_id": 29679449,
          "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
          "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
          "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
          "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496",
          "html_url": "https://github.com/octo-org/octo-repo/runs/399444496",
          "status": "completed",
          "conclusion": "success",
          "started_at": "2020-01-20T17:42:40Z",
          "completed_at": "2020-01-20T17:44:39Z",
          "name": "build",
          "steps": [
            {
              "name": "Set up job",
              "status": "completed",
              "conclusion": "success",
              "number": 1,
              "started_at": "2020-01-20T09:42:40.000-08:00",
              "completed_at": "2020-01-20T09:42:41.000-08:00"
            },
            {
              "name": "Run actions/checkout@v2",
              "status": "completed",
              "conclusion": "success",
              "number": 2,
              "started_at": "2020-01-20T09:42:41.000-08:00",
              "completed_at": "2020-01-20T09:42:45.000-08:00"
            },
            {
              "name": "Set up Ruby",
              "status": "completed",
              "conclusion": "success",
              "number": 3,
              "started_at": "2020-01-20T09:42:45.000-08:00",
              "completed_at": "2020-01-20T09:42:45.000-08:00"
            },
            {
              "name": "Run actions/cache@v3",
              "status": "completed",
              "conclusion": "success",
              "number": 4,
              "started_at": "2020-01-20T09:42:45.000-08:00",
              "completed_at": "2020-01-20T09:42:48.000-08:00"
            },
            {
              "name": "Install Bundler",
              "status": "completed",
              "conclusion": "success",
              "number": 5,
              "started_at": "2020-01-20T09:42:48.000-08:00",
              "completed_at": "2020-01-20T09:42:52.000-08:00"
            },
            {
              "name": "Install Gems",
              "status": "completed",
              "conclusion": "success",
              "number": 6,
              "started_at": "2020-01-20T09:42:52.000-08:00",
              "completed_at": "2020-01-20T09:42:53.000-08:00"
            },
            {
              "name": "Run Tests",
              "status": "completed",
              "conclusion": "success",
              "number": 7,
              "started_at": "2020-01-20T09:42:53.000-08:00",
              "completed_at": "2020-01-20T09:42:59.000-08:00"
            },
            {
              "name": "Deploy to Heroku",
              "status": "completed",
              "conclusion": "success",
              "number": 8,
              "started_at": "2020-01-20T09:42:59.000-08:00",
              "completed_at": "2020-01-20T09:44:39.000-08:00"
            },
            {
              "name": "Post actions/cache@v3",
              "status": "completed",
              "conclusion": "success",
              "number": 16,
              "started_at": "2020-01-20T09:44:39.000-08:00",
              "completed_at": "2020-01-20T09:44:39.000-08:00"
            },
            {
              "name": "Complete job",
              "status": "completed",
              "conclusion": "success",
              "number": 17,
              "started_at": "2020-01-20T09:44:39.000-08:00",
              "completed_at": "2020-01-20T09:44:39.000-08:00"
            }
          ],
          "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496",
          "labels": [
            "self-hosted",
            "foo",
            "bar"
          ],
          "runner_id": 1,
          "runner_name": "my runner",
          "runner_group_id": 2,
          "runner_group_name": "my runner group",
          "workflow_name": "CI",
          "head_branch": "main"
        }
      },
      "workflow-run-paginated": {
        "value": {
          "total_count": 1,
          "workflow_runs": [
            {
              "id": 30433642,
              "name": "Build",
              "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
              "check_suite_id": 42,
              "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
              "head_branch": "master",
              "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
              "run_number": 562,
              "event": "push",
              "status": "queued",
              "conclusion": null,
              "workflow_id": 159038,
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
              "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
              "pull_requests": [],
              "created_at": "2020-01-22T19:33:08Z",
              "updated_at": "2020-01-22T19:33:08Z",
              "actor": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "run_attempt": 1,
              "run_started_at": "2020-01-22T19:33:08Z",
              "triggering_actor": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
              "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
              "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
              "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
              "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
              "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
              "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
              "head_commit": {
                "id": "acb5820ced9479c074f688cc328bf03f341a511d",
                "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
                "message": "Create linter.yaml",
                "timestamp": "2020-01-22T19:33:05Z",
                "author": {
                  "name": "Octo Cat",
                  "email": "octocat@github.com"
                },
                "committer": {
                  "name": "GitHub",
                  "email": "noreply@github.com"
                }
              },
              "repository": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
              },
              "head_repository": {
                "id": 217723378,
                "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
                "name": "octo-repo",
                "full_name": "octo-org/octo-repo",
                "private": true,
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "html_url": "https://github.com/octo-org/octo-repo",
                "description": null,
                "fork": false,
                "url": "https://api.github.com/repos/octo-org/octo-repo",
                "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
                "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
                "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
                "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
                "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
                "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
                "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
                "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
                "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
                "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
                "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
                "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
                "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
                "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
                "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
                "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
                "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
                "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
                "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
                "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
                "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
                "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
                "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
                "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
                "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
                "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
                "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
                "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
                "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
                "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
                "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
                "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
                "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
                "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
              }
            }
          ]
        }
      },
      "workflow-run": {
        "value": {
          "id": 30433642,
          "name": "Build",
          "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
          "check_suite_id": 42,
          "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
          "head_branch": "main",
          "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
          "path": ".github/workflows/build.yml@main",
          "run_number": 562,
          "event": "push",
          "display_title": "Update README.md",
          "status": "queued",
          "conclusion": null,
          "workflow_id": 159038,
          "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
          "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
          "pull_requests": [],
          "created_at": "2020-01-22T19:33:08Z",
          "updated_at": "2020-01-22T19:33:08Z",
          "actor": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "run_attempt": 1,
          "referenced_workflows": [
            {
              "path": "octocat/Hello-World/.github/workflows/deploy.yml@main",
              "sha": "86e8bc9ecf7d38b1ed2d2cfb8eb87ba9b35b01db",
              "ref": "refs/heads/main"
            },
            {
              "path": "octo-org/octo-repo/.github/workflows/report.yml@v2",
              "sha": "79e9790903e1c3373b1a3e3a941d57405478a232",
              "ref": "refs/tags/v2"
            },
            {
              "path": "octo-org/octo-repo/.github/workflows/secure.yml@1595d4b6de6a9e9751fb270a41019ce507d4099e",
              "sha": "1595d4b6de6a9e9751fb270a41019ce507d4099e"
            }
          ],
          "run_started_at": "2020-01-22T19:33:08Z",
          "triggering_actor": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
          "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
          "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
          "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
          "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
          "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
          "previous_attempt_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/attempts/1",
          "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
          "head_commit": {
            "id": "acb5820ced9479c074f688cc328bf03f341a511d",
            "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
            "message": "Create linter.yaml",
            "timestamp": "2020-01-22T19:33:05Z",
            "author": {
              "name": "Octo Cat",
              "email": "octocat@github.com"
            },
            "committer": {
              "name": "GitHub",
              "email": "noreply@github.com"
            }
          },
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "head_repository": {
            "id": 217723378,
            "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
            "name": "octo-repo",
            "full_name": "octo-org/octo-repo",
            "private": true,
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "html_url": "https://github.com/octo-org/octo-repo",
            "description": null,
            "fork": false,
            "url": "https://api.github.com/repos/octo-org/octo-repo",
            "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
            "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
            "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
            "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
            "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
            "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
            "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
            "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
            "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
            "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
            "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
            "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
            "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
            "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
            "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
            "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
            "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
            "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
            "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
            "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
            "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
          }
        }
      },
      "job-paginated": {
        "value": {
          "total_count": 1,
          "jobs": [
            {
              "id": 399444496,
              "run_id": 29679449,
              "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
              "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
              "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496",
              "html_url": "https://github.com/octo-org/octo-repo/runs/399444496",
              "status": "completed",
              "conclusion": "success",
              "started_at": "2020-01-20T17:42:40Z",
              "completed_at": "2020-01-20T17:44:39Z",
              "name": "build",
              "steps": [
                {
                  "name": "Set up job",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 1,
                  "started_at": "2020-01-20T09:42:40.000-08:00",
                  "completed_at": "2020-01-20T09:42:41.000-08:00"
                },
                {
                  "name": "Run actions/checkout@v2",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 2,
                  "started_at": "2020-01-20T09:42:41.000-08:00",
                  "completed_at": "2020-01-20T09:42:45.000-08:00"
                },
                {
                  "name": "Set up Ruby",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 3,
                  "started_at": "2020-01-20T09:42:45.000-08:00",
                  "completed_at": "2020-01-20T09:42:45.000-08:00"
                },
                {
                  "name": "Run actions/cache@v3",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 4,
                  "started_at": "2020-01-20T09:42:45.000-08:00",
                  "completed_at": "2020-01-20T09:42:48.000-08:00"
                },
                {
                  "name": "Install Bundler",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 5,
                  "started_at": "2020-01-20T09:42:48.000-08:00",
                  "completed_at": "2020-01-20T09:42:52.000-08:00"
                },
                {
                  "name": "Install Gems",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 6,
                  "started_at": "2020-01-20T09:42:52.000-08:00",
                  "completed_at": "2020-01-20T09:42:53.000-08:00"
                },
                {
                  "name": "Run Tests",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 7,
                  "started_at": "2020-01-20T09:42:53.000-08:00",
                  "completed_at": "2020-01-20T09:42:59.000-08:00"
                },
                {
                  "name": "Deploy to Heroku",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 8,
                  "started_at": "2020-01-20T09:42:59.000-08:00",
                  "completed_at": "2020-01-20T09:44:39.000-08:00"
                },
                {
                  "name": "Post actions/cache@v3",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 16,
                  "started_at": "2020-01-20T09:44:39.000-08:00",
                  "completed_at": "2020-01-20T09:44:39.000-08:00"
                },
                {
                  "name": "Complete job",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 17,
                  "started_at": "2020-01-20T09:44:39.000-08:00",
                  "completed_at": "2020-01-20T09:44:39.000-08:00"
                }
              ],
              "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496",
              "labels": [
                "self-hosted",
                "foo",
                "bar"
              ],
              "runner_id": 1,
              "runner_name": "my runner",
              "runner_group_id": 2,
              "runner_group_name": "my runner group",
              "workflow_name": "CI",
              "head_branch": "main"
            }
          ]
        }
      },
      "autolink-items": {
        "value": [
          {
            "id": 1,
            "key_prefix": "TICKET-",
            "url_template": "https://example.com/TICKET?query=<num>"
          }
        ]
      },
      "autolink": {
        "value": {
          "id": 1,
          "key_prefix": "TICKET-",
          "url_template": "https://example.com/TICKET?query=<num>"
        }
      },
      "short-branch-with-protection-items": {
        "value": [
          {
            "name": "master",
            "commit": {
              "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
            },
            "protected": true,
            "protection": {
              "required_status_checks": {
                "enforcement_level": "non_admins",
                "contexts": [
                  "ci-test",
                  "linter"
                ]
              }
            },
            "protection_url": "https://api.github.com/repos/octocat/hello-world/branches/master/protection"
          }
        ]
      },
      "branch-get": {
        "value": {
          "name": "main",
          "commit": {
            "sha": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
            "node_id": "MDY6Q29tbWl0MTI5NjI2OTo3ZmQxYTYwYjAxZjkxYjMxNGY1OTk1NWE0ZTRkNGU4MGQ4ZWRmMTFk",
            "commit": {
              "author": {
                "name": "The Octocat",
                "email": "octocat@nowhere.com",
                "date": "2012-03-06T23:06:50Z"
              },
              "committer": {
                "name": "The Octocat",
                "email": "octocat@nowhere.com",
                "date": "2012-03-06T23:06:50Z"
              },
              "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
              "tree": {
                "sha": "b4eecafa9be2f2006ce1b709d6857b07069b4608",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/b4eecafa9be2f2006ce1b709d6857b07069b4608"
              },
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
              "comment_count": 77,
              "verification": {
                "verified": false,
                "reason": "unsigned",
                "signature": null,
                "payload": null
              }
            },
            "url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
            "html_url": "https://github.com/octocat/Hello-World/commit/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d/comments",
            "author": {
              "login": "octocat",
              "id": 583231,
              "node_id": "MDQ6VXNlcjU4MzIzMQ==",
              "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "committer": {
              "login": "octocat",
              "id": 583231,
              "node_id": "MDQ6VXNlcjU4MzIzMQ==",
              "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "parents": [
              {
                "sha": "553c2077f0edc3d5dc5d17262f6aa498e69d6f8e",
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e",
                "html_url": "https://github.com/octocat/Hello-World/commit/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e"
              },
              {
                "sha": "762941318ee16e59dabbacb1b4049eec22f0d303",
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/762941318ee16e59dabbacb1b4049eec22f0d303",
                "html_url": "https://github.com/octocat/Hello-World/commit/762941318ee16e59dabbacb1b4049eec22f0d303"
              }
            ]
          },
          "_links": {
            "self": "https://api.github.com/repos/octocat/Hello-World/branches/main",
            "html": "https://github.com/octocat/Hello-World/tree/main"
          },
          "protected": false,
          "protection": {
            "enabled": false,
            "required_status_checks": {
              "enforcement_level": "off",
              "contexts": [],
              "checks": []
            }
          },
          "protection_url": "https://api.github.com/repos/octocat/Hello-World/branches/main/protection"
        }
      },
      "branch-protection": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection",
          "required_status_checks": {
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks",
            "contexts": [
              "continuous-integration/travis-ci"
            ],
            "contexts_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts",
            "enforcement_level": "non_admins"
          },
          "enforce_admins": {
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins",
            "enabled": true
          },
          "required_pull_request_reviews": {
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews",
            "dismissal_restrictions": {
              "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
              "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams",
              "users": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ],
              "teams": [
                {
                  "id": 1,
                  "node_id": "MDQ6VGVhbTE=",
                  "url": "https://api.github.com/teams/1",
                  "html_url": "https://github.com/orgs/github/teams/justice-league",
                  "name": "Justice League",
                  "slug": "justice-league",
                  "description": "A great team.",
                  "privacy": "closed",
                  "notification_setting": "notifications_enabled",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/1/members{/member}",
                  "repositories_url": "https://api.github.com/teams/1/repos",
                  "parent": null
                }
              ],
              "apps": [
                {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "hooks_url": "https://api.github.com/orgs/github/hooks",
                    "issues_url": "https://api.github.com/orgs/github/issues",
                    "members_url": "https://api.github.com/orgs/github/members{/member}",
                    "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "description": "A great organization"
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                }
              ]
            },
            "dismiss_stale_reviews": true,
            "require_code_owner_reviews": true,
            "required_approving_review_count": 2
          },
          "restrictions": {
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions",
            "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
            "apps_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/apps",
            "users": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "teams": [
              {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "notification_setting": "notifications_enabled",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "parent": null
              }
            ],
            "apps": [
              {
                "id": 1,
                "slug": "octoapp",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                },
                "name": "Octocat App",
                "description": "",
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "permissions": {
                  "metadata": "read",
                  "contents": "read",
                  "issues": "write",
                  "single_file": "write"
                },
                "events": [
                  "push",
                  "pull_request"
                ]
              }
            ]
          },
          "required_linear_history": {
            "enabled": true
          },
          "allow_force_pushes": {
            "enabled": true
          },
          "allow_deletions": {
            "enabled": true
          },
          "required_conversation_resolution": {
            "enabled": true
          }
        }
      },
      "branch-protection-update": {
        "value": {
          "url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection",
          "required_status_checks": {
            "url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/required_status_checks",
            "strict": true,
            "contexts": [
              "continuous-integration/travis-ci"
            ],
            "contexts_url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/required_status_checks/contexts",
            "checks": [
              {
                "context": "continuous-integration/travis-ci",
                "app_id": null
              }
            ]
          },
          "restrictions": {
            "url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/restrictions",
            "users_url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/restrictions/users",
            "teams_url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/restrictions/teams",
            "apps_url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/restrictions/apps",
            "users": [],
            "teams": [],
            "apps": []
          },
          "required_pull_request_reviews": {
            "url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/required_pull_request_reviews",
            "dismiss_stale_reviews": true,
            "require_code_owner_reviews": true,
            "required_approving_review_count": 2,
            "dismissal_restrictions": {
              "url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/dismissal_restrictions",
              "users_url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/dismissal_restrictions/users",
              "teams_url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/dismissal_restrictions/teams",
              "users": [],
              "teams": [],
              "apps": []
            }
          },
          "required_signatures": {
            "url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/required_signatures",
            "enabled": false
          },
          "enforce_admins": {
            "url": "https://api.github.com/repos/octocat/hello-world/branches/main/protection/enforce_admins",
            "enabled": true
          },
          "required_linear_history": {
            "enabled": true
          },
          "allow_force_pushes": {
            "enabled": true
          },
          "allow_deletions": {
            "enabled": true
          },
          "block_creations": {
            "enabled": true
          },
          "required_conversation_resolution": {
            "enabled": true
          }
        }
      },
      "protected-branch-pull-request-review": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews",
          "dismissal_restrictions": {
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
            "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams",
            "users": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "teams": [
              {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "notification_setting": "notifications_enabled",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "parent": null
              }
            ],
            "apps": [
              {
                "id": 1,
                "slug": "octoapp",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                },
                "name": "Octocat App",
                "description": "",
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "permissions": {
                  "metadata": "read",
                  "contents": "read",
                  "issues": "write",
                  "single_file": "write"
                },
                "events": [
                  "push",
                  "pull_request"
                ]
              }
            ]
          },
          "dismiss_stale_reviews": true,
          "require_code_owner_reviews": true,
          "required_approving_review_count": 2
        }
      },
      "check-suite": {
        "value": {
          "id": 5,
          "node_id": "MDEwOkNoZWNrU3VpdGU1",
          "head_branch": "master",
          "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3",
          "status": "completed",
          "conclusion": "neutral",
          "url": "https://api.github.com/repos/github/hello-world/check-suites/5",
          "before": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
          "after": "d6fde92930d4715a2b49857d24b940956b26d2d3",
          "pull_requests": [],
          "created_at": "2017-07-08T16:18:44-04:00",
          "updated_at": "2017-07-08T16:18:44-04:00",
          "app": {
            "id": 1,
            "slug": "octoapp",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": true
            },
            "name": "Octocat App",
            "description": "",
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "created_at": "2017-07-08T16:18:44-04:00",
            "updated_at": "2017-07-08T16:18:44-04:00",
            "permissions": {
              "metadata": "read",
              "contents": "read",
              "issues": "write",
              "single_file": "write"
            },
            "events": [
              "push",
              "pull_request"
            ]
          },
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "template_repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World-Template",
              "full_name": "octocat/Hello-World-Template",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World-Template",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World-Template",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World-Template.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World-Template.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
              "homepage": "https://github.com",
              "language": null,
              "forks": 9,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "watchers": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues": 0,
              "open_issues_count": 0,
              "is_template": true,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://api.github.com/licenses/mit"
              },
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            },
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": false,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "delete_branch_on_merge": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "head_commit": {
            "id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
            "tree_id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
            "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
            "timestamp": "2016-10-10T00:00:00Z",
            "author": {
              "name": "The Octocat",
              "email": "octocat@nowhere.com"
            },
            "committer": {
              "name": "The Octocat",
              "email": "octocat@nowhere.com"
            }
          },
          "latest_check_runs_count": 1,
          "check_runs_url": "https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs"
        }
      },
      "check-suite-preference": {
        "value": {
          "preferences": {
            "auto_trigger_checks": [
              {
                "app_id": 2,
                "setting": true
              },
              {
                "app_id": 4,
                "setting": false
              }
            ]
          },
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": false,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "template_repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World-Template",
              "full_name": "octocat/Hello-World-Template",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World-Template",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World-Template",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World-Template.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World-Template.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
              "homepage": "https://github.com",
              "language": null,
              "forks": 9,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "watchers": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues": 0,
              "open_issues_count": 0,
              "is_template": true,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://api.github.com/licenses/mit"
              },
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          }
        }
      },
      "code-scanning-alert-items": {
        "value": [
          {
            "number": 4,
            "created_at": "2020-02-13T12:29:18Z",
            "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/4",
            "html_url": "https://github.com/octocat/hello-world/code-scanning/4",
            "state": "open",
            "dismissed_by": null,
            "dismissed_at": null,
            "dismissed_reason": null,
            "rule": {
              "id": "js/zipslip",
              "severity": "error",
              "description": "Arbitrary file write during zip extraction",
              "name": "js/zipslip"
            },
            "tool": {
              "name": "CodeQL",
              "guid": null,
              "version": "2.4.0"
            },
            "most_recent_instance": {
              "ref": "refs/heads/main",
              "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
              "category": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
              "environment": "{}",
              "state": "open",
              "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
              "message": {
                "text": "This path depends on a user-provided value."
              },
              "location": {
                "path": "spec-main/api-session-spec.ts",
                "start_line": 917,
                "end_line": 917,
                "start_column": 7,
                "end_column": 18
              },
              "classifications": [
                "test"
              ]
            },
            "instances_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/4/instances"
          },
          {
            "number": 3,
            "created_at": "2020-02-13T12:29:18Z",
            "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/3",
            "html_url": "https://github.com/octocat/hello-world/code-scanning/3",
            "state": "dismissed",
            "dismissed_by": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "dismissed_at": "2020-02-14T12:29:18Z",
            "dismissed_reason": "false positive",
            "rule": {
              "id": "js/zipslip",
              "severity": "error",
              "description": "Arbitrary file write during zip extraction",
              "name": "js/zipslip"
            },
            "tool": {
              "name": "CodeQL",
              "guid": null,
              "version": "2.4.0"
            },
            "most_recent_instance": {
              "ref": "refs/heads/main",
              "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
              "category": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
              "environment": "{}",
              "state": "open",
              "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
              "message": {
                "text": "This path depends on a user-provided value."
              },
              "location": {
                "path": "lib/ab12-gen.js",
                "start_line": 917,
                "end_line": 917,
                "start_column": 7,
                "end_column": 18
              },
              "classifications": []
            },
            "instances_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/3/instances"
          }
        ]
      },
      "code-scanning-alert": {
        "value": {
          "number": 42,
          "created_at": "2020-06-19T11:21:34Z",
          "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42",
          "html_url": "https://github.com/octocat/hello-world/code-scanning/42",
          "state": "dismissed",
          "dismissed_by": {
            "login": "octocat",
            "id": 54933897,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "dismissed_at": "2020-02-14T12:29:18Z",
          "dismissed_reason": "false positive",
          "dismissed_comment": "This alert is not actually correct, because there's a sanitizer included in the library.",
          "rule": {
            "id": "js/zipslip",
            "severity": "error",
            "security_severity_level": "high",
            "description": "Arbitrary file write during zip extraction (\"Zip Slip\")",
            "name": "js/zipslip",
            "full_description": "Extracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten.",
            "tags": [
              "security",
              "external/cwe/cwe-022"
            ],
            "help": "# Arbitrary file write during zip extraction (\"Zip Slip\")\\nExtracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten ...",
            "help_uri": "https://codeql.github.com/"
          },
          "tool": {
            "name": "CodeQL",
            "guid": null,
            "version": "2.4.0"
          },
          "most_recent_instance": {
            "ref": "refs/heads/main",
            "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
            "category": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
            "environment": "{}",
            "state": "dismissed",
            "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
            "message": {
              "text": "This path depends on a user-provided value."
            },
            "location": {
              "path": "spec-main/api-session-spec.ts",
              "start_line": 917,
              "end_line": 917,
              "start_column": 7,
              "end_column": 18
            },
            "classifications": [
              "test"
            ]
          },
          "instances_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42/instances"
        }
      },
      "code-scanning-alert-dismissed": {
        "value": {
          "number": 42,
          "created_at": "2020-08-25T21:28:36Z",
          "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42",
          "html_url": "https://github.com/octocat/hello-world/code-scanning/42",
          "state": "dismissed",
          "dismissed_by": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "dismissed_at": "2020-09-02T22:34:56Z",
          "dismissed_reason": "false positive",
          "dismissed_comment": "This alert is not actually correct, because there's a sanitizer included in the library.",
          "rule": {
            "id": "js/zipslip",
            "severity": "error",
            "security_severity_level": "high",
            "description": "Arbitrary file write during zip extraction (\"Zip Slip\")",
            "name": "js/zipslip",
            "full_description": "Extracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten.",
            "tags": [
              "security",
              "external/cwe/cwe-022"
            ],
            "help": "# Arbitrary file write during zip extraction (\"Zip Slip\")\\nExtracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten ...",
            "help_uri": "https://codeql.github.com/"
          },
          "tool": {
            "name": "CodeQL",
            "guid": null,
            "version": "2.4.0"
          },
          "most_recent_instance": {
            "ref": "refs/heads/main",
            "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
            "category": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
            "environment": "{}",
            "state": "dismissed",
            "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
            "message": {
              "text": "This path depends on a user-provided value."
            },
            "location": {
              "path": "spec-main/api-session-spec.ts",
              "start_line": 917,
              "end_line": 917,
              "start_column": 7,
              "end_column": 18
            },
            "classifications": [
              "test"
            ]
          },
          "instances_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42/instances"
        }
      },
      "code-scanning-sarif-upload": {
        "summary": "Default response",
        "value": {
          "id": "47177e22-5596-11eb-80a1-c1e54ef945c6",
          "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/sarifs/47177e22-5596-11eb-80a1-c1e54ef945c6"
        }
      },
      "collaborator-items": {
        "value": [
          {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false,
            "permissions": {
              "pull": true,
              "triage": true,
              "push": true,
              "maintain": false,
              "admin": false
            },
            "role_name": "write"
          }
        ]
      },
      "repository-invitation-response-when-a-new-invitation-is-created": {
        "value": {
          "id": 1,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "invitee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "inviter": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "permissions": "write",
          "created_at": "2016-06-13T14:52:50-05:00",
          "url": "https://api.github.com/user/repository_invitations/1296269",
          "html_url": "https://github.com/octocat/Hello-World/invitations"
        }
      },
      "repository-collaborator-permission-response-if-user-has-admin-permissions": {
        "value": {
          "permission": "admin",
          "role_name": "admin",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "reaction": {
        "value": {
          "id": 1,
          "node_id": "MDg6UmVhY3Rpb24x",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "content": "heart",
          "created_at": "2016-05-20T20:09:31Z"
        }
      },
      "pull-request-simple-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
            "id": 1,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
            "html_url": "https://github.com/octocat/Hello-World/pull/1347",
            "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
            "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
            "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
            "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
            "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "number": 1347,
            "state": "open",
            "locked": true,
            "title": "Amazing new feature",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "body": "Please pull these awesome changes in!",
            "labels": [
              {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513",
                "default": true
              }
            ],
            "milestone": {
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "id": 1002604,
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "state": "open",
              "title": "v1.0",
              "description": "Tracking milestone for version 1.0",
              "creator": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 4,
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "updated_at": "2014-03-03T18:58:10Z",
              "closed_at": "2013-02-12T13:22:01Z",
              "due_on": "2012-10-09T23:39:01Z"
            },
            "active_lock_reason": "too heated",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:01:12Z",
            "closed_at": "2011-01-26T19:01:12Z",
            "merged_at": "2011-01-26T19:01:12Z",
            "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
            "assignee": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              {
                "login": "hubot",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hubot",
                "html_url": "https://github.com/hubot",
                "followers_url": "https://api.github.com/users/hubot/followers",
                "following_url": "https://api.github.com/users/hubot/following{/other_user}",
                "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
                "organizations_url": "https://api.github.com/users/hubot/orgs",
                "repos_url": "https://api.github.com/users/hubot/repos",
                "events_url": "https://api.github.com/users/hubot/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hubot/received_events",
                "type": "User",
                "site_admin": true
              }
            ],
            "requested_reviewers": [
              {
                "login": "other_user",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/other_user_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/other_user",
                "html_url": "https://github.com/other_user",
                "followers_url": "https://api.github.com/users/other_user/followers",
                "following_url": "https://api.github.com/users/other_user/following{/other_user}",
                "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
                "organizations_url": "https://api.github.com/users/other_user/orgs",
                "repos_url": "https://api.github.com/users/other_user/repos",
                "events_url": "https://api.github.com/users/other_user/events{/privacy}",
                "received_events_url": "https://api.github.com/users/other_user/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "requested_teams": [
              {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "notification_setting": "notifications_enabled",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "parent": null
              }
            ],
            "head": {
              "label": "octocat:new-topic",
              "ref": "new-topic",
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "repo": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "language": null,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": true,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": null,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "allow_auto_merge": false,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://github.com/licenses/mit"
                },
                "forks": 1,
                "open_issues": 1,
                "watchers": 1
              }
            },
            "base": {
              "label": "octocat:master",
              "ref": "master",
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "repo": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "language": null,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": true,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": null,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "allow_auto_merge": false,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://github.com/licenses/mit"
                },
                "forks": 1,
                "open_issues": 1,
                "watchers": 1
              }
            },
            "_links": {
              "self": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
              },
              "html": {
                "href": "https://github.com/octocat/Hello-World/pull/1347"
              },
              "issue": {
                "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
              },
              "comments": {
                "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
              },
              "review_comments": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
              },
              "review_comment": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
              },
              "commits": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
              },
              "statuses": {
                "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
              }
            },
            "author_association": "OWNER",
            "auto_merge": null,
            "draft": false
          }
        ]
      },
      "check-suite-paginated": {
        "value": {
          "total_count": 1,
          "check_suites": [
            {
              "id": 5,
              "node_id": "MDEwOkNoZWNrU3VpdGU1",
              "head_branch": "master",
              "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3",
              "status": "completed",
              "conclusion": "neutral",
              "url": "https://api.github.com/repos/github/hello-world/check-suites/5",
              "before": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
              "after": "d6fde92930d4715a2b49857d24b940956b26d2d3",
              "pull_requests": [],
              "app": {
                "id": 1,
                "slug": "octoapp",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": true
                },
                "name": "Octocat App",
                "description": "",
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "permissions": {
                  "metadata": "read",
                  "contents": "read",
                  "issues": "write",
                  "single_file": "write"
                },
                "events": [
                  "push",
                  "pull_request"
                ]
              },
              "repository": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "language": null,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": true,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "delete_branch_on_merge": true,
                "subscribers_count": 42,
                "network_count": 0
              },
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "head_commit": {
                "id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                "tree_id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
                "timestamp": "2016-10-10T00:00:00Z",
                "author": {
                  "name": "The Octocat",
                  "email": "octocat@nowhere.com"
                },
                "committer": {
                  "name": "The Octocat",
                  "email": "octocat@nowhere.com"
                }
              },
              "latest_check_runs_count": 1,
              "check_runs_url": "https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs"
            }
          ]
        }
      },
      "combined-commit-status": {
        "value": {
          "state": "success",
          "statuses": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "id": 1,
              "node_id": "MDY6U3RhdHVzMQ==",
              "state": "success",
              "description": "Build has completed successfully",
              "target_url": "https://ci.example.com/1000/output",
              "context": "continuous-integration/jenkins",
              "created_at": "2012-07-20T01:19:13Z",
              "updated_at": "2012-07-20T01:19:13Z"
            },
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "id": 2,
              "node_id": "MDY6U3RhdHVzMg==",
              "state": "success",
              "description": "Testing has completed successfully",
              "target_url": "https://ci.example.com/2000/output",
              "context": "security/brakeman",
              "created_at": "2012-08-20T01:19:13Z",
              "updated_at": "2012-08-20T01:19:13Z"
            }
          ],
          "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "total_count": 2,
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "commit_url": "https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "url": "https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e/status"
        }
      },
      "repo-events-items": {
        "value": [
          {
            "id": "22249084964",
            "type": "PushEvent",
            "actor": {
              "id": 583231,
              "login": "octocat",
              "display_login": "octocat",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
            },
            "repo": {
              "id": 1296269,
              "name": "octocat/Hello-World",
              "url": "https://api.github.com/repos/octocat/Hello-World"
            },
            "payload": {
              "push_id": 10115855396,
              "size": 1,
              "distinct_size": 1,
              "ref": "refs/heads/master",
              "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
              "before": "883efe034920928c47fe18598c01249d1a9fdabd",
              "commits": [
                {
                  "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                  "author": {
                    "email": "octocat@github.com",
                    "name": "Monalisa Octocat"
                  },
                  "message": "commit",
                  "distinct": true,
                  "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
                }
              ]
            },
            "public": true,
            "created_at": "2022-06-09T12:47:28Z"
          },
          {
            "id": "22237752260",
            "type": "WatchEvent",
            "actor": {
              "id": 583231,
              "login": "octocat",
              "display_login": "octocat",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
            },
            "repo": {
              "id": 1296269,
              "name": "octocat/Hello-World",
              "url": "https://api.github.com/repos/octocat/Hello-World"
            },
            "payload": {
              "action": "started"
            },
            "public": true,
            "created_at": "2022-06-08T23:29:25Z"
          }
        ]
      },
      "minimal-repository-items-2": {
        "value": [
          {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": true,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "delete_branch_on_merge": true,
            "subscribers_count": 42,
            "network_count": 0,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit",
              "node_id": "MDc6TGljZW5zZW1pdA=="
            }
          }
        ]
      },
      "repository-invitation-items": {
        "value": [
          {
            "id": 1,
            "repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
            },
            "invitee": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "inviter": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "permissions": "write",
            "created_at": "2016-06-13T14:52:50-05:00",
            "url": "https://api.github.com/user/repository_invitations/1296269",
            "html_url": "https://github.com/octocat/Hello-World/invitations",
            "node_id": "MDQ6VXNlcjE="
          }
        ]
      },
      "repository-invitation": {
        "value": {
          "id": 1,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
          },
          "invitee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "inviter": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "permissions": "write",
          "created_at": "2016-06-13T14:52:50-05:00",
          "expired": false,
          "url": "https://api.github.com/user/repository_invitations/1296269",
          "html_url": "https://github.com/octocat/Hello-World/invitations"
        }
      },
      "issue-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDU6SXNzdWUx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "repository_url": "https://api.github.com/repos/octocat/Hello-World",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347",
            "number": 1347,
            "state": "open",
            "title": "Found a bug",
            "body": "I'm having a problem with this.",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513",
                "default": true
              }
            ],
            "assignee": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": {
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "id": 1002604,
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "state": "open",
              "title": "v1.0",
              "description": "Tracking milestone for version 1.0",
              "creator": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 4,
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "updated_at": "2014-03-03T18:58:10Z",
              "closed_at": "2013-02-12T13:22:01Z",
              "due_on": "2012-10-09T23:39:01Z"
            },
            "locked": true,
            "active_lock_reason": "too heated",
            "comments": 0,
            "pull_request": {
              "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
              "html_url": "https://github.com/octocat/Hello-World/pull/1347",
              "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
              "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
            },
            "closed_at": null,
            "created_at": "2011-04-22T13:33:48Z",
            "updated_at": "2011-04-22T13:33:48Z",
            "closed_by": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "author_association": "COLLABORATOR",
            "state_reason": "completed"
          }
        ]
      },
      "issue": {
        "value": {
          "id": 1,
          "node_id": "MDU6SXNzdWUx",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "repository_url": "https://api.github.com/repos/octocat/Hello-World",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
          "html_url": "https://github.com/octocat/Hello-World/issues/1347",
          "number": 1347,
          "state": "open",
          "title": "Found a bug",
          "body": "I'm having a problem with this.",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 208045946,
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
              "name": "bug",
              "description": "Something isn't working",
              "color": "f29513",
              "default": true
            }
          ],
          "assignee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "milestone": {
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "id": 1002604,
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "state": "open",
            "title": "v1.0",
            "description": "Tracking milestone for version 1.0",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 4,
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "updated_at": "2014-03-03T18:58:10Z",
            "closed_at": "2013-02-12T13:22:01Z",
            "due_on": "2012-10-09T23:39:01Z"
          },
          "locked": true,
          "active_lock_reason": "too heated",
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
            "html_url": "https://github.com/octocat/Hello-World/pull/1347",
            "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
            "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
          },
          "closed_at": null,
          "created_at": "2011-04-22T13:33:48Z",
          "updated_at": "2011-04-22T13:33:48Z",
          "closed_by": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "author_association": "COLLABORATOR",
          "state_reason": "completed"
        }
      },
      "issue-event-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDEwOklzc3VlRXZlbnQx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1",
            "actor": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "event": "closed",
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "created_at": "2011-04-14T16:00:49Z",
            "issue": {
              "id": 1,
              "node_id": "MDU6SXNzdWUx",
              "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
              "repository_url": "https://api.github.com/repos/octocat/Hello-World",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
              "html_url": "https://github.com/octocat/Hello-World/issues/1347",
              "number": 1347,
              "state": "open",
              "title": "Found a bug",
              "body": "I'm having a problem with this.",
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "labels": [
                {
                  "id": 208045946,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                  "name": "bug",
                  "description": "Something isn't working",
                  "color": "f29513",
                  "default": true
                }
              ],
              "assignee": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "assignees": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ],
              "milestone": {
                "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                "id": 1002604,
                "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                "number": 1,
                "state": "open",
                "title": "v1.0",
                "description": "Tracking milestone for version 1.0",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "open_issues": 4,
                "closed_issues": 8,
                "created_at": "2011-04-10T20:09:31Z",
                "updated_at": "2014-03-03T18:58:10Z",
                "closed_at": "2013-02-12T13:22:01Z",
                "due_on": "2012-10-09T23:39:01Z"
              },
              "locked": true,
              "active_lock_reason": "too heated",
              "comments": 0,
              "pull_request": {
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
              },
              "closed_at": null,
              "created_at": "2011-04-22T13:33:48Z",
              "updated_at": "2011-04-22T13:33:48Z",
              "author_association": "COLLABORATOR",
              "state_reason": "completed"
            }
          }
        ]
      },
      "issue-event": {
        "value": {
          "id": 1,
          "node_id": "MDEwOklzc3VlRXZlbnQx",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1",
          "actor": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "event": "closed",
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "created_at": "2011-04-14T16:00:49Z",
          "issue": {
            "id": 1,
            "node_id": "MDU6SXNzdWUx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "repository_url": "https://api.github.com/repos/octocat/Hello-World",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347",
            "number": 1347,
            "state": "open",
            "title": "Found a bug",
            "body": "I'm having a problem with this.",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513",
                "default": true
              }
            ],
            "assignee": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": {
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "id": 1002604,
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "state": "open",
              "title": "v1.0",
              "description": "Tracking milestone for version 1.0",
              "creator": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 4,
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "updated_at": "2014-03-03T18:58:10Z",
              "closed_at": "2013-02-12T13:22:01Z",
              "due_on": "2012-10-09T23:39:01Z"
            },
            "locked": true,
            "performed_via_github_app": {
              "id": 1,
              "slug": "octoapp",
              "node_id": "MDExOkludGVncmF0aW9uMQ==",
              "owner": {
                "login": "github",
                "id": 1,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                "url": "https://api.github.com/orgs/github",
                "repos_url": "https://api.github.com/orgs/github/repos",
                "events_url": "https://api.github.com/orgs/github/events",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": true
              },
              "name": "Octocat App",
              "description": "",
              "external_url": "https://example.com",
              "html_url": "https://github.com/apps/octoapp",
              "created_at": "2017-07-08T16:18:44-04:00",
              "updated_at": "2017-07-08T16:18:44-04:00",
              "permissions": {
                "metadata": "read",
                "contents": "read",
                "issues": "write",
                "single_file": "write"
              },
              "events": [
                "push",
                "pull_request"
              ]
            },
            "comments": 0,
            "pull_request": {
              "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
              "html_url": "https://github.com/octocat/Hello-World/pull/1347",
              "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
              "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
            },
            "closed_at": null,
            "created_at": "2011-04-22T13:33:48Z",
            "updated_at": "2011-04-22T13:33:48Z",
            "author_association": "COLLABORATOR",
            "state_reason": "completed"
          }
        }
      },
      "deploy-key-items": {
        "value": {}
      },
      "deploy-key": {
        "value": {
          "id": 1,
          "key": "ssh-rsa AAA...",
          "url": "https://api.github.com/repos/octocat/Hello-World/keys/1",
          "title": "octocat@octomac",
          "verified": true,
          "created_at": "2014-12-10T15:53:42Z",
          "read_only": true
        }
      },
      "pull-request": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
          "id": 1,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
          "html_url": "https://github.com/octocat/Hello-World/pull/1347",
          "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
          "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
          "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
          "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
          "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "number": 1347,
          "state": "open",
          "locked": true,
          "title": "Amazing new feature",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Please pull these awesome changes in!",
          "labels": [
            {
              "id": 208045946,
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
              "name": "bug",
              "description": "Something isn't working",
              "color": "f29513",
              "default": true
            }
          ],
          "milestone": {
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "id": 1002604,
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "state": "open",
            "title": "v1.0",
            "description": "Tracking milestone for version 1.0",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 4,
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "updated_at": "2014-03-03T18:58:10Z",
            "closed_at": "2013-02-12T13:22:01Z",
            "due_on": "2012-10-09T23:39:01Z"
          },
          "active_lock_reason": "too heated",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:01:12Z",
          "closed_at": "2011-01-26T19:01:12Z",
          "merged_at": "2011-01-26T19:01:12Z",
          "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
          "assignee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "hubot",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/hubot",
              "html_url": "https://github.com/hubot",
              "followers_url": "https://api.github.com/users/hubot/followers",
              "following_url": "https://api.github.com/users/hubot/following{/other_user}",
              "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
              "organizations_url": "https://api.github.com/users/hubot/orgs",
              "repos_url": "https://api.github.com/users/hubot/repos",
              "events_url": "https://api.github.com/users/hubot/events{/privacy}",
              "received_events_url": "https://api.github.com/users/hubot/received_events",
              "type": "User",
              "site_admin": true
            }
          ],
          "requested_reviewers": [
            {
              "login": "other_user",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/other_user",
              "html_url": "https://github.com/other_user",
              "followers_url": "https://api.github.com/users/other_user/followers",
              "following_url": "https://api.github.com/users/other_user/following{/other_user}",
              "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
              "organizations_url": "https://api.github.com/users/other_user/orgs",
              "repos_url": "https://api.github.com/users/other_user/repos",
              "events_url": "https://api.github.com/users/other_user/events{/privacy}",
              "received_events_url": "https://api.github.com/users/other_user/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "requested_teams": [
            {
              "id": 1,
              "node_id": "MDQ6VGVhbTE=",
              "url": "https://api.github.com/teams/1",
              "html_url": "https://github.com/orgs/github/teams/justice-league",
              "name": "Justice League",
              "slug": "justice-league",
              "description": "A great team.",
              "privacy": "closed",
              "notification_setting": "notifications_enabled",
              "permission": "admin",
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "repositories_url": "https://api.github.com/teams/1/repos"
            }
          ],
          "head": {
            "label": "octocat:new-topic",
            "ref": "new-topic",
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "repo": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "has_discussions": false,
              "archived": false,
              "disabled": false,
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_merge_commit": true,
              "allow_forking": true,
              "forks": 123,
              "open_issues": 123,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA=="
              },
              "watchers": 123
            }
          },
          "base": {
            "label": "octocat:master",
            "ref": "master",
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "repo": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "has_discussions": false,
              "archived": false,
              "disabled": false,
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_merge_commit": true,
              "forks": 123,
              "open_issues": 123,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA=="
              },
              "watchers": 123
            }
          },
          "_links": {
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
            },
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1347"
            },
            "issue": {
              "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
            },
            "comments": {
              "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
            },
            "review_comments": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
            },
            "review_comment": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
            },
            "commits": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
            },
            "statuses": {
              "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
            }
          },
          "author_association": "OWNER",
          "auto_merge": null,
          "draft": false,
          "merged": false,
          "mergeable": true,
          "rebaseable": true,
          "mergeable_state": "clean",
          "merged_by": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "comments": 10,
          "review_comments": 0,
          "maintainer_can_modify": true,
          "commits": 3,
          "additions": 100,
          "deletions": 3,
          "changed_files": 5
        }
      },
      "pull-request-review-comment-example-for-a-multi-line-comment": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
          "pull_request_review_id": 42,
          "id": 10,
          "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
          "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
          "path": "file1.txt",
          "position": 1,
          "original_position": 4,
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
          "in_reply_to_id": 8,
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Great stuff!",
          "created_at": "2011-04-14T16:00:49Z",
          "updated_at": "2011-04-14T16:00:49Z",
          "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
          "author_association": "NONE",
          "_links": {
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
            },
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
            }
          },
          "start_line": 1,
          "original_start_line": 1,
          "start_side": "RIGHT",
          "line": 2,
          "original_line": 2,
          "side": "RIGHT"
        }
      },
      "release": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
          "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
          "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
          "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
          "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
          "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
          "discussion_url": "https://github.com/octocat/Hello-World/discussions/90",
          "id": 1,
          "node_id": "MDc6UmVsZWFzZTE=",
          "tag_name": "v1.0.0",
          "target_commitish": "master",
          "name": "v1.0.0",
          "body": "Description of the release",
          "draft": false,
          "prerelease": false,
          "created_at": "2013-02-27T19:35:32Z",
          "published_at": "2013-02-27T19:35:32Z",
          "author": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assets": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
              "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
              "id": 1,
              "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
              "name": "example.zip",
              "label": "short description",
              "state": "uploaded",
              "content_type": "application/zip",
              "size": 1024,
              "download_count": 42,
              "created_at": "2013-02-27T19:35:32Z",
              "updated_at": "2013-02-27T19:35:32Z",
              "uploader": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            }
          ]
        }
      },
      "reaction-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDg6UmVhY3Rpb24x",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "content": "heart",
            "created_at": "2016-05-20T20:09:31Z"
          }
        ]
      },
      "secret-scanning-alert-list": {
        "value": [
          {
            "number": 2,
            "created_at": "2020-11-06T18:48:51Z",
            "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/2",
            "html_url": "https://github.com/owner/private-repo/security/secret-scanning/2",
            "state": "resolved",
            "resolution": "false_positive",
            "resolved_at": "2020-11-07T02:47:13Z",
            "resolved_by": {
              "login": "monalisa",
              "id": 2,
              "node_id": "MDQ6VXNlcjI=",
              "avatar_url": "https://alambic.github.com/avatars/u/2?",
              "gravatar_id": "",
              "url": "https://api.github.com/users/monalisa",
              "html_url": "https://github.com/monalisa",
              "followers_url": "https://api.github.com/users/monalisa/followers",
              "following_url": "https://api.github.com/users/monalisa/following{/other_user}",
              "gists_url": "https://api.github.com/users/monalisa/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/monalisa/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/monalisa/subscriptions",
              "organizations_url": "https://api.github.com/users/monalisa/orgs",
              "repos_url": "https://api.github.com/users/monalisa/repos",
              "events_url": "https://api.github.com/users/monalisa/events{/privacy}",
              "received_events_url": "https://api.github.com/users/monalisa/received_events",
              "type": "User",
              "site_admin": true
            },
            "secret_type": "adafruit_io_key",
            "secret": "aio_XXXXXXXXXXXXXXXXXXXXXXXXXXXX"
          },
          {
            "number": 1,
            "created_at": "2020-11-06T18:18:30Z",
            "url": "https://api.github.com/repos/owner/repo/secret-scanning/alerts/1",
            "html_url": "https://github.com/owner/repo/security/secret-scanning/1",
            "state": "open",
            "resolution": null,
            "resolved_at": null,
            "resolved_by": null,
            "secret_type": "mailchimp_api_key",
            "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2"
          }
        ]
      },
      "secret-scanning-alert-open": {
        "value": {
          "number": 42,
          "created_at": "2020-11-06T18:18:30Z",
          "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42",
          "html_url": "https://github.com/owner/private-repo/security/secret-scanning/42",
          "locations_url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42/locations",
          "state": "open",
          "secret_type": "mailchimp_api_key",
          "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2"
        }
      },
      "secret-scanning-alert-resolved": {
        "value": {
          "number": 42,
          "created_at": "2020-11-06T18:18:30Z",
          "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42",
          "html_url": "https://github.com/owner/private-repo/security/secret-scanning/42",
          "locations_url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42/locations",
          "state": "resolved",
          "resolution": "used_in_tests",
          "resolved_at": "2020-11-16T22:42:07Z",
          "resolved_by": {
            "login": "monalisa",
            "id": 2,
            "node_id": "MDQ6VXNlcjI=",
            "avatar_url": "https://alambic.github.com/avatars/u/2?",
            "gravatar_id": "",
            "url": "https://api.github.com/users/monalisa",
            "html_url": "https://github.com/monalisa",
            "followers_url": "https://api.github.com/users/monalisa/followers",
            "following_url": "https://api.github.com/users/monalisa/following{/other_user}",
            "gists_url": "https://api.github.com/users/monalisa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/monalisa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/monalisa/subscriptions",
            "organizations_url": "https://api.github.com/users/monalisa/orgs",
            "repos_url": "https://api.github.com/users/monalisa/repos",
            "events_url": "https://api.github.com/users/monalisa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/monalisa/received_events",
            "type": "User",
            "site_admin": true
          },
          "secret_type": "mailchimp_api_key",
          "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2",
          "resolution_comment": "Example comment"
        }
      },
      "minimal-repository": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "language": null,
          "forks_count": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "is_template": false,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "admin": false,
            "push": false,
            "pull": true
          },
          "template_repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World-Template",
            "full_name": "octocat/Hello-World-Template",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World-Template",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World-Template",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World-Template.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World-Template.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
            "homepage": "https://github.com",
            "language": null,
            "forks": 9,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "watchers": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues": 0,
            "open_issues_count": 0,
            "is_template": true,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "allow_forking": true,
            "subscribers_count": 42,
            "network_count": 0
          }
        }
      },
      "repository-3": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "language": null,
          "forks_count": 9,
          "forks": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "watchers": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "open_issues": 0,
          "is_template": false,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "admin": false,
            "push": false,
            "pull": true
          },
          "allow_rebase_merge": true,
          "allow_auto_merge": false,
          "license": {
            "key": "mit",
            "name": "MIT License",
            "url": "https://api.github.com/licenses/mit",
            "spdx_id": "MIT",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "html_url": "https://github.com/licenses/mit"
          }
        }
      },
      "code-search-result-item-paginated": {
        "value": {
          "total_count": 7,
          "incomplete_results": false,
          "items": [
            {
              "name": "classes.js",
              "path": "src/attributes/classes.js",
              "sha": "d7212f9dee2dcc18f084d7df8f417b80846ded5a",
              "url": "https://api.github.com/repositories/167174/contents/src/attributes/classes.js?ref=825ac3773694e0cd23ee74895fd5aeb535b27da4",
              "git_url": "https://api.github.com/repositories/167174/git/blobs/d7212f9dee2dcc18f084d7df8f417b80846ded5a",
              "html_url": "https://github.com/jquery/jquery/blob/825ac3773694e0cd23ee74895fd5aeb535b27da4/src/attributes/classes.js",
              "repository": {
                "id": 167174,
                "node_id": "MDEwOlJlcG9zaXRvcnkxNjcxNzQ=",
                "name": "jquery",
                "full_name": "jquery/jquery",
                "owner": {
                  "login": "jquery",
                  "id": 70142,
                  "node_id": "MDQ6VXNlcjcwMTQy",
                  "avatar_url": "https://0.gravatar.com/avatar/6906f317a4733f4379b06c32229ef02f?d=https%3A%2F%2Fidenticons.github.com%2Ff426f04f2f9813718fb806b30e0093de.png",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/jquery",
                  "html_url": "https://github.com/jquery",
                  "followers_url": "https://api.github.com/users/jquery/followers",
                  "following_url": "https://api.github.com/users/jquery/following{/other_user}",
                  "gists_url": "https://api.github.com/users/jquery/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/jquery/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/jquery/subscriptions",
                  "organizations_url": "https://api.github.com/users/jquery/orgs",
                  "repos_url": "https://api.github.com/users/jquery/repos",
                  "events_url": "https://api.github.com/users/jquery/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/jquery/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/jquery/jquery",
                "description": "jQuery JavaScript Library",
                "fork": false,
                "url": "https://api.github.com/repos/jquery/jquery",
                "forks_url": "https://api.github.com/repos/jquery/jquery/forks",
                "keys_url": "https://api.github.com/repos/jquery/jquery/keys{/key_id}",
                "collaborators_url": "https://api.github.com/repos/jquery/jquery/collaborators{/collaborator}",
                "teams_url": "https://api.github.com/repos/jquery/jquery/teams",
                "hooks_url": "https://api.github.com/repos/jquery/jquery/hooks",
                "issue_events_url": "https://api.github.com/repos/jquery/jquery/issues/events{/number}",
                "events_url": "https://api.github.com/repos/jquery/jquery/events",
                "assignees_url": "https://api.github.com/repos/jquery/jquery/assignees{/user}",
                "branches_url": "https://api.github.com/repos/jquery/jquery/branches{/branch}",
                "tags_url": "https://api.github.com/repos/jquery/jquery/tags",
                "blobs_url": "https://api.github.com/repos/jquery/jquery/git/blobs{/sha}",
                "git_tags_url": "https://api.github.com/repos/jquery/jquery/git/tags{/sha}",
                "git_refs_url": "https://api.github.com/repos/jquery/jquery/git/refs{/sha}",
                "trees_url": "https://api.github.com/repos/jquery/jquery/git/trees{/sha}",
                "statuses_url": "https://api.github.com/repos/jquery/jquery/statuses/{sha}",
                "languages_url": "https://api.github.com/repos/jquery/jquery/languages",
                "stargazers_url": "https://api.github.com/repos/jquery/jquery/stargazers",
                "contributors_url": "https://api.github.com/repos/jquery/jquery/contributors",
                "subscribers_url": "https://api.github.com/repos/jquery/jquery/subscribers",
                "subscription_url": "https://api.github.com/repos/jquery/jquery/subscription",
                "commits_url": "https://api.github.com/repos/jquery/jquery/commits{/sha}",
                "git_commits_url": "https://api.github.com/repos/jquery/jquery/git/commits{/sha}",
                "comments_url": "https://api.github.com/repos/jquery/jquery/comments{/number}",
                "issue_comment_url": "https://api.github.com/repos/jquery/jquery/issues/comments/{number}",
                "contents_url": "https://api.github.com/repos/jquery/jquery/contents/{+path}",
                "compare_url": "https://api.github.com/repos/jquery/jquery/compare/{base}...{head}",
                "merges_url": "https://api.github.com/repos/jquery/jquery/merges",
                "archive_url": "https://api.github.com/repos/jquery/jquery/{archive_format}{/ref}",
                "downloads_url": "https://api.github.com/repos/jquery/jquery/downloads",
                "issues_url": "https://api.github.com/repos/jquery/jquery/issues{/number}",
                "pulls_url": "https://api.github.com/repos/jquery/jquery/pulls{/number}",
                "milestones_url": "https://api.github.com/repos/jquery/jquery/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/jquery/jquery/notifications{?since,all,participating}",
                "labels_url": "https://api.github.com/repos/jquery/jquery/labels{/name}",
                "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
                "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
              },
              "score": 1
            }
          ]
        }
      },
      "commit-search-result-item-paginated": {
        "value": {
          "total_count": 1,
          "incomplete_results": false,
          "items": [
            {
              "url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
              "sha": "bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
              "html_url": "https://github.com/octocat/Spoon-Knife/commit/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
              "comments_url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f/comments",
              "commit": {
                "url": "https://api.github.com/repos/octocat/Spoon-Knife/git/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
                "author": {
                  "date": "2014-02-04T14:38:36-08:00",
                  "name": "The Octocat",
                  "email": "octocat@nowhere.com"
                },
                "committer": {
                  "date": "2014-02-12T15:18:55-08:00",
                  "name": "The Octocat",
                  "email": "octocat@nowhere.com"
                },
                "message": "Create styles.css and updated README",
                "tree": {
                  "url": "https://api.github.com/repos/octocat/Spoon-Knife/git/trees/a639e96f9038797fba6e0469f94a4b0cc459fa68",
                  "sha": "a639e96f9038797fba6e0469f94a4b0cc459fa68"
                },
                "comment_count": 8
              },
              "author": {
                "login": "octocat",
                "id": 583231,
                "node_id": "MDQ6VXNlcjU4MzIzMQ==",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=3",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "committer": {},
              "parents": [
                {
                  "url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/a30c19e3f13765a3b48829788bc1cb8b4e95cee4",
                  "html_url": "https://github.com/octocat/Spoon-Knife/commit/a30c19e3f13765a3b48829788bc1cb8b4e95cee4",
                  "sha": "a30c19e3f13765a3b48829788bc1cb8b4e95cee4"
                }
              ],
              "repository": {
                "id": 1300192,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMzAwMTky",
                "name": "Spoon-Knife",
                "full_name": "octocat/Spoon-Knife",
                "owner": {
                  "login": "octocat",
                  "id": 583231,
                  "node_id": "MDQ6VXNlcjU4MzIzMQ==",
                  "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=3",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Spoon-Knife",
                "description": "This repo is for demonstration purposes only.",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Spoon-Knife",
                "forks_url": "https://api.github.com/repos/octocat/Spoon-Knife/forks",
                "keys_url": "https://api.github.com/repos/octocat/Spoon-Knife/keys{/key_id}",
                "collaborators_url": "https://api.github.com/repos/octocat/Spoon-Knife/collaborators{/collaborator}",
                "teams_url": "https://api.github.com/repos/octocat/Spoon-Knife/teams",
                "hooks_url": "https://api.github.com/repos/octocat/Spoon-Knife/hooks",
                "issue_events_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues/events{/number}",
                "events_url": "https://api.github.com/repos/octocat/Spoon-Knife/events",
                "assignees_url": "https://api.github.com/repos/octocat/Spoon-Knife/assignees{/user}",
                "branches_url": "https://api.github.com/repos/octocat/Spoon-Knife/branches{/branch}",
                "tags_url": "https://api.github.com/repos/octocat/Spoon-Knife/tags",
                "blobs_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/blobs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/tags{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/refs{/sha}",
                "trees_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/trees{/sha}",
                "statuses_url": "https://api.github.com/repos/octocat/Spoon-Knife/statuses/{sha}",
                "languages_url": "https://api.github.com/repos/octocat/Spoon-Knife/languages",
                "stargazers_url": "https://api.github.com/repos/octocat/Spoon-Knife/stargazers",
                "contributors_url": "https://api.github.com/repos/octocat/Spoon-Knife/contributors",
                "subscribers_url": "https://api.github.com/repos/octocat/Spoon-Knife/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Spoon-Knife/subscription",
                "commits_url": "https://api.github.com/repos/octocat/Spoon-Knife/commits{/sha}",
                "git_commits_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/commits{/sha}",
                "comments_url": "https://api.github.com/repos/octocat/Spoon-Knife/comments{/number}",
                "issue_comment_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues/comments{/number}",
                "contents_url": "https://api.github.com/repos/octocat/Spoon-Knife/contents/{+path}",
                "compare_url": "https://api.github.com/repos/octocat/Spoon-Knife/compare/{base}...{head}",
                "merges_url": "https://api.github.com/repos/octocat/Spoon-Knife/merges",
                "archive_url": "https://api.github.com/repos/octocat/Spoon-Knife/{archive_format}{/ref}",
                "downloads_url": "https://api.github.com/repos/octocat/Spoon-Knife/downloads",
                "issues_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues{/number}",
                "pulls_url": "https://api.github.com/repos/octocat/Spoon-Knife/pulls{/number}",
                "milestones_url": "https://api.github.com/repos/octocat/Spoon-Knife/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Spoon-Knife/notifications{?since,all,participating}",
                "labels_url": "https://api.github.com/repos/octocat/Spoon-Knife/labels{/name}",
                "releases_url": "https://api.github.com/repos/octocat/Spoon-Knife/releases{/id}",
                "deployments_url": "https://api.github.com/repos/octocat/Spoon-Knife/deployments"
              },
              "score": 1,
              "node_id": "MDQ6VXNlcjU4MzIzMQ=="
            }
          ]
        }
      },
      "issue-search-result-item-paginated": {
        "value": {
          "total_count": 280,
          "incomplete_results": false,
          "items": [
            {
              "url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132",
              "repository_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit",
              "labels_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/labels{/name}",
              "comments_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/comments",
              "events_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/events",
              "html_url": "https://github.com/batterseapower/pinyin-toolkit/issues/132",
              "id": 35802,
              "node_id": "MDU6SXNzdWUzNTgwMg==",
              "number": 132,
              "title": "Line Number Indexes Beyond 20 Not Displayed",
              "user": {
                "login": "Nick3C",
                "id": 90254,
                "node_id": "MDQ6VXNlcjkwMjU0",
                "avatar_url": "https://secure.gravatar.com/avatar/934442aadfe3b2f4630510de416c5718?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Nick3C",
                "html_url": "https://github.com/Nick3C",
                "followers_url": "https://api.github.com/users/Nick3C/followers",
                "following_url": "https://api.github.com/users/Nick3C/following{/other_user}",
                "gists_url": "https://api.github.com/users/Nick3C/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Nick3C/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Nick3C/subscriptions",
                "organizations_url": "https://api.github.com/users/Nick3C/orgs",
                "repos_url": "https://api.github.com/users/Nick3C/repos",
                "events_url": "https://api.github.com/users/Nick3C/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Nick3C/received_events",
                "type": "User",
                "site_admin": true
              },
              "labels": [
                {
                  "id": 4,
                  "node_id": "MDU6TGFiZWw0",
                  "url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/labels/bug",
                  "name": "bug",
                  "color": "ff0000"
                }
              ],
              "state": "open",
              "assignee": null,
              "milestone": {
                "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                "id": 1002604,
                "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                "number": 1,
                "state": "open",
                "title": "v1.0",
                "description": "Tracking milestone for version 1.0",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "open_issues": 4,
                "closed_issues": 8,
                "created_at": "2011-04-10T20:09:31Z",
                "updated_at": "2014-03-03T18:58:10Z",
                "closed_at": "2013-02-12T13:22:01Z",
                "due_on": "2012-10-09T23:39:01Z"
              },
              "comments": 15,
              "created_at": "2009-07-12T20:10:41Z",
              "updated_at": "2009-07-19T09:23:43Z",
              "closed_at": null,
              "pull_request": {
                "url": "https://api/github.com/repos/octocat/Hello-World/pull/1347",
                "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                "patch_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
              },
              "body": "...",
              "score": 1,
              "locked": true,
              "author_association": "COLLABORATOR",
              "state_reason": "completed"
            }
          ]
        }
      },
      "team-repository-alternative-response-with-extra-repository-information": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "language": null,
          "forks_count": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "is_template": false,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "admin": false,
            "maintain": false,
            "push": false,
            "triage": false,
            "pull": true
          },
          "role_name": "read",
          "allow_rebase_merge": true,
          "template_repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World-Template",
            "full_name": "octocat/Hello-World-Template",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World-Template",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World-Template",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World-Template.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World-Template.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
            "homepage": "https://github.com",
            "language": null,
            "forks": 9,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "watchers": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues": 0,
            "open_issues_count": 0,
            "is_template": true,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://api.github.com/licenses/mit"
            },
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "pull": true,
              "triage": false,
              "push": false,
              "maintain": false,
              "admin": false
            },
            "allow_rebase_merge": true,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "allow_auto_merge": false,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "subscribers_count": 42,
          "network_count": 0,
          "license": {
            "key": "mit",
            "name": "MIT License",
            "url": "https://api.github.com/licenses/mit",
            "spdx_id": "MIT",
            "node_id": "MDc6TGljZW5zZW1pdA==",
            "html_url": "https://api.github.com/licenses/mit"
          },
          "forks": 1,
          "open_issues": 1,
          "watchers": 1
        }
      },
      "base-installation-for-auth-user-paginated": {
        "value": {
          "total_count": 2,
          "installations": [
            {
              "id": 1,
              "account": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
              "repositories_url": "https://api.github.com/installation/repositories",
              "html_url": "https://github.com/organizations/github/settings/installations/1",
              "app_id": 1,
              "target_id": 1,
              "target_type": "Organization",
              "permissions": {
                "checks": "write",
                "metadata": "read",
                "contents": "read"
              },
              "events": [
                "push",
                "pull_request"
              ],
              "single_file_name": "config.yaml",
              "has_multiple_single_files": true,
              "single_file_paths": [
                "config.yml",
                ".github/issue_TEMPLATE.md"
              ],
              "repository_selection": "all",
              "created_at": "2017-07-08T16:18:44-04:00",
              "updated_at": "2017-07-08T16:18:44-04:00",
              "app_slug": "github-actions",
              "suspended_at": null,
              "suspended_by": null
            },
            {
              "id": 3,
              "account": {
                "login": "octocat",
                "id": 2,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
              "repositories_url": "https://api.github.com/installation/repositories",
              "html_url": "https://github.com/organizations/github/settings/installations/1",
              "app_id": 1,
              "target_id": 1,
              "target_type": "Organization",
              "permissions": {
                "checks": "write",
                "metadata": "read",
                "contents": "read"
              },
              "events": [
                "push",
                "pull_request"
              ],
              "single_file_name": "config.yaml",
              "has_multiple_single_files": true,
              "single_file_paths": [
                "config.yml",
                ".github/issue_TEMPLATE.md"
              ],
              "repository_selection": "all",
              "created_at": "2017-07-08T16:18:44-04:00",
              "updated_at": "2017-07-08T16:18:44-04:00",
              "app_slug": "github-actions",
              "suspended_at": null,
              "suspended_by": null
            }
          ]
        }
      },
      "migration-items": {
        "value": [
          {
            "id": 79,
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "state": "pending",
            "lock_repositories": true,
            "exclude_attachments": false,
            "exclude_releases": false,
            "exclude_owner_projects": false,
            "repositories": [
              {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "language": null,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": true,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": null,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "allow_auto_merge": false,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://api.github.com/licenses/mit"
                },
                "forks": 1,
                "open_issues": 1,
                "watchers": 1
              }
            ],
            "url": "https://api.github.com/orgs/octo-org/migrations/79",
            "created_at": "2015-07-06T15:33:38-07:00",
            "updated_at": "2015-07-06T15:33:38-07:00",
            "node_id": "MDQ6VXNlcjE="
          }
        ]
      },
      "migration-2": {
        "value": {
          "id": 79,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "state": "pending",
          "lock_repositories": true,
          "exclude_attachments": false,
          "exclude_releases": false,
          "exclude_owner_projects": false,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://api.github.com/licenses/mit"
              },
              "forks": 1,
              "open_issues": 1,
              "watchers": 1
            }
          ],
          "url": "https://api.github.com/orgs/octo-org/migrations/79",
          "created_at": "2015-07-06T15:33:38-07:00",
          "updated_at": "2015-07-06T15:33:38-07:00"
        }
      },
      "repository-items-default-response": {
        "summary": "Default response",
        "value": [
          {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "allow_auto_merge": false,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "url": "https://api.github.com/licenses/mit",
              "spdx_id": "MIT",
              "node_id": "MDc6TGljZW5zZW1pdA==",
              "html_url": "https://github.com/licenses/mit"
            },
            "forks": 1,
            "open_issues": 1,
            "watchers": 1
          }
        ]
      },
      "starred-repository-items-alternative-response-with-star-creation-timestamps": {
        "summary": "Alternative response with star creation timestamps",
        "value": [
          {
            "starred_at": "2011-01-16T19:06:43Z",
            "repo": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "allow_auto_merge": false,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0,
              "license": {
                "key": "mit",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "https://github.com/licenses/mit"
              },
              "forks": 1,
              "open_issues": 1,
              "watchers": 1
            }
          }
        ]
      },
      "user-events-items": {
        "value": [
          {
            "id": "22249084947",
            "type": "WatchEvent",
            "actor": {
              "id": 583231,
              "login": "octocat",
              "display_login": "octocat",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
            },
            "repo": {
              "id": 1296269,
              "name": "octocat/Hello-World",
              "url": "https://api.github.com/repos/octocat/Hello-World"
            },
            "payload": {
              "action": "started"
            },
            "public": true,
            "created_at": "2022-06-09T12:47:28Z"
          },
          {
            "id": "22249084964",
            "type": "PushEvent",
            "actor": {
              "id": 583231,
              "login": "octocat",
              "display_login": "octocat",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
            },
            "repo": {
              "id": 1296269,
              "name": "octocat/Hello-World",
              "url": "https://api.github.com/repos/octocat/Hello-World"
            },
            "payload": {
              "push_id": 10115855396,
              "size": 1,
              "distinct_size": 1,
              "ref": "refs/heads/master",
              "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
              "before": "883efe034920928c47fe18598c01249d1a9fdabd",
              "commits": [
                {
                  "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                  "author": {
                    "email": "octocat@github.com",
                    "name": "Monalisa Octocat"
                  },
                  "message": "commit",
                  "distinct": true,
                  "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
                }
              ]
            },
            "public": false,
            "created_at": "2022-06-07T07:50:26Z"
          }
        ]
      },
      "user-org-events-items": {
        "value": [
          {
            "id": "22249084964",
            "type": "PushEvent",
            "actor": {
              "id": 583231,
              "login": "octocat",
              "display_login": "octocat",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
            },
            "repo": {
              "id": 1296269,
              "name": "octocat/Hello-World",
              "url": "https://api.github.com/repos/octocat/Hello-World"
            },
            "payload": {
              "push_id": 10115855396,
              "size": 1,
              "distinct_size": 1,
              "ref": "refs/heads/master",
              "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
              "before": "883efe034920928c47fe18598c01249d1a9fdabd",
              "commits": [
                {
                  "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
                  "author": {
                    "email": "octocat@github.com",
                    "name": "Monalisa Octocat"
                  },
                  "message": "commit",
                  "distinct": true,
                  "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
                }
              ]
            },
            "public": false,
            "created_at": "2022-06-09T12:47:28Z"
          },
          {
            "id": "22196946742",
            "type": "CreateEvent",
            "actor": {
              "id": 583231,
              "login": "octocat",
              "display_login": "octocat",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
            },
            "repo": {
              "id": 1296269,
              "name": "octocat/Hello-World",
              "url": "https://api.github.com/repos/octocat/Hello-World"
            },
            "payload": {
              "ref": null,
              "ref_type": "repository",
              "master_branch": "master",
              "description": null,
              "pusher_type": "user"
            },
            "public": false,
            "created_at": "2022-06-07T07:50:26Z",
            "org": {
              "id": 9919,
              "login": "github",
              "gravatar_id": "",
              "url": "https://api.github.com/orgs/github",
              "avatar_url": "https://avatars.githubusercontent.com/u/9919?"
            }
          }
        ]
      }
    },
    "headers": {
      "link": {
        "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
        "schema": {
          "type": "string"
        }
      },
      "x-rate-limit-limit": {
        "example": 5000,
        "schema": {
          "type": "integer"
        }
      },
      "x-rate-limit-remaining": {
        "example": 4999,
        "schema": {
          "type": "integer"
        }
      },
      "x-rate-limit-reset": {
        "example": 1590701888,
        "schema": {
          "type": "integer",
          "format": "timestamp"
        }
      }
    },
    "responses": {
      "not_found": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "requires_authentication": {
        "description": "Requires authentication",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "validation_failed": {
        "description": "Validation failed, or the endpoint has been spammed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/validation-error"
            }
          }
        }
      },
      "not_modified": {
        "description": "Not modified"
      },
      "conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "service_unavailable": {
        "description": "Service unavailable",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "moved_permanently": {
        "description": "Moved permanently",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "temporary_redirect": {
        "description": "Temporary Redirect",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "validation_failed_simple": {
        "description": "Validation failed, or the endpoint has been spammed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/validation-error-simple"
            }
          }
        }
      },
      "code_scanning_forbidden_read": {
        "description": "Response if GitHub Advanced Security is not enabled for this repository",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "code_scanning_forbidden_write": {
        "description": "Response if the repository is archived or if GitHub Advanced Security is not enabled for this repository",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/basic-error"
            }
          }
        }
      },
      "preview_header_missing": {
        "description": "Preview header missing",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "message",
                "documentation_url"
              ],
              "properties": {
                "message": {
                  "type": "string"
                },
                "documentation_url": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "bad_request": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/basic-error"
            }
          },
          "application/scim+json": {
            "schema": {
              "$ref": "#/components/schemas/scim-error"
            }
          }
        }
      },
      "gone": {
        "description": "Gone",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/basic-error"
            }
          }
        }
      }
    }
  }
}
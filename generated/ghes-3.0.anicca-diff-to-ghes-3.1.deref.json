{
  "info": null,
  "paths": {
    "added": [],
    "changed": {
      "/app": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://docs.github.com/enterprise-server@3.1/rest/reference/apps#list-installations-for-the-authenticated-app)\" endpoint.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
              "to": "Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://docs.github.com/enterprise-server@3.0/rest/reference/apps#list-installations-for-the-authenticated-app)\" endpoint.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/app/hook/config": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
              "to": "Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": null,
                          "nullable_changed": null,
                          "properties_changed": {
                            "added": [],
                            "changed": {
                              "secret": {
                                "description_changed": {
                                  "from": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                                  "to": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#delivery-headers)."
                                },
                                "enum_changed": null,
                                "format_changed": null,
                                "items_changed": null,
                                "nullable_changed": null,
                                "properties_changed": null,
                                "required_changed": null,
                                "type_changed": null
                              }
                            },
                            "removed": []
                          },
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/app/installations": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "You must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n\nThe permissions the installation has are included under the `permissions` key.",
              "to": "You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n\nThe permissions the installation has are included under the `permissions` key."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/app/installations/{installation_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
              "to": "Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/applications/grants": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nYou can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `[\"repo\", \"user\"]`.",
              "to": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nYou can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `[\"repo\", \"user\"]`."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/applications/grants/{grant_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
              "to": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/applications/{client_id}/tokens/{access_token}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
              "to": "**Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/apps/{app_slug}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).\n\nIf the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
              "to": "**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).\n\nIf the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/authorizations": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
              "to": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/authorizations/{authorization_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
              "to": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/feeds": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:\n\n*   **Timeline**: The GitHub Enterprise Server global public timeline\n*   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#hypermedia)\n*   **Current user public**: The public timeline for the authenticated user\n*   **Current user**: The private timeline for the authenticated user\n*   **Current user actor**: The private timeline for activity created by the authenticated user\n*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.\n\n**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.",
              "to": "GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:\n\n*   **Timeline**: The GitHub Enterprise Server global public timeline\n*   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#hypermedia)\n*   **Current user public**: The public timeline for the authenticated user\n*   **Current user**: The private timeline for the authenticated user\n*   **Current user actor**: The private timeline for activity created by the authenticated user\n*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.\n\n**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": null,
                          "nullable_changed": null,
                          "properties_changed": {
                            "added": [],
                            "changed": {},
                            "removed": [
                              [
                                "security_advisories_url",
                                {
                                  "example": "https://github.com/security-advisories",
                                  "type": "string"
                                }
                              ]
                            ]
                          },
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/gists/public": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List public gists sorted by most recently updated to least recently updated.\n\nNote: With [pagination](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.",
              "to": "List public gists sorted by most recently updated to least recently updated.\n\nNote: With [pagination](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/gists/{gist_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": null,
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": null,
                          "nullable_changed": null,
                          "properties_changed": {
                            "added": [],
                            "changed": {
                              "forks": {
                                "description_changed": null,
                                "enum_changed": null,
                                "format_changed": null,
                                "items_changed": {
                                  "description_changed": null,
                                  "enum_changed": null,
                                  "format_changed": null,
                                  "items_changed": null,
                                  "nullable_changed": null,
                                  "properties_changed": {
                                    "added": [],
                                    "changed": {
                                      "user": {
                                        "description_changed": null,
                                        "enum_changed": null,
                                        "format_changed": null,
                                        "items_changed": null,
                                        "nullable_changed": null,
                                        "properties_changed": {
                                          "added": [],
                                          "changed": {},
                                          "removed": [
                                            [
                                              "twitter_username",
                                              {
                                                "nullable": true,
                                                "type": "string"
                                              }
                                            ]
                                          ]
                                        },
                                        "required_changed": null,
                                        "type_changed": null
                                      }
                                    },
                                    "removed": []
                                  },
                                  "required_changed": null,
                                  "type_changed": null
                                },
                                "nullable_changed": null,
                                "properties_changed": null,
                                "required_changed": null,
                                "type_changed": null
                              }
                            },
                            "removed": []
                          },
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/gists/{gist_id}/forks": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": null,
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": {
                            "description_changed": null,
                            "enum_changed": null,
                            "format_changed": null,
                            "items_changed": null,
                            "nullable_changed": null,
                            "properties_changed": {
                              "added": [],
                              "changed": {
                                "forks": {
                                  "description_changed": null,
                                  "enum_changed": null,
                                  "format_changed": null,
                                  "items_changed": {
                                    "description_changed": null,
                                    "enum_changed": null,
                                    "format_changed": null,
                                    "items_changed": null,
                                    "nullable_changed": null,
                                    "properties_changed": {
                                      "added": [],
                                      "changed": {
                                        "user": {
                                          "description_changed": null,
                                          "enum_changed": null,
                                          "format_changed": null,
                                          "items_changed": null,
                                          "nullable_changed": null,
                                          "properties_changed": {
                                            "added": [],
                                            "changed": {},
                                            "removed": [
                                              [
                                                "twitter_username",
                                                {
                                                  "nullable": true,
                                                  "type": "string"
                                                }
                                              ]
                                            ]
                                          },
                                          "required_changed": null,
                                          "type_changed": null
                                        }
                                      },
                                      "removed": []
                                    },
                                    "required_changed": null,
                                    "type_changed": null
                                  },
                                  "nullable_changed": null,
                                  "properties_changed": null,
                                  "required_changed": null,
                                  "type_changed": null
                                }
                              },
                              "removed": []
                            },
                            "required_changed": null,
                            "type_changed": null
                          },
                          "nullable_changed": null,
                          "properties_changed": null,
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/gists/{gist_id}/{sha}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": null,
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": null,
                          "nullable_changed": null,
                          "properties_changed": {
                            "added": [],
                            "changed": {
                              "forks": {
                                "description_changed": null,
                                "enum_changed": null,
                                "format_changed": null,
                                "items_changed": {
                                  "description_changed": null,
                                  "enum_changed": null,
                                  "format_changed": null,
                                  "items_changed": null,
                                  "nullable_changed": null,
                                  "properties_changed": {
                                    "added": [],
                                    "changed": {
                                      "user": {
                                        "description_changed": null,
                                        "enum_changed": null,
                                        "format_changed": null,
                                        "items_changed": null,
                                        "nullable_changed": null,
                                        "properties_changed": {
                                          "added": [],
                                          "changed": {},
                                          "removed": [
                                            [
                                              "twitter_username",
                                              {
                                                "nullable": true,
                                                "type": "string"
                                              }
                                            ]
                                          ]
                                        },
                                        "required_changed": null,
                                        "type_changed": null
                                      }
                                    },
                                    "removed": []
                                  },
                                  "required_changed": null,
                                  "type_changed": null
                                },
                                "nullable_changed": null,
                                "properties_changed": null,
                                "required_changed": null,
                                "type_changed": null
                              }
                            },
                            "removed": []
                          },
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/gitignore/templates": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List all templates available to pass as an option when [creating a repository](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-a-repository-for-the-authenticated-user).",
              "to": "List all templates available to pass as an option when [creating a repository](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-repository-for-the-authenticated-user)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/gitignore/templates/{name}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "The API also allows fetching the source of a single template.\nUse the raw [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) to get the raw contents.",
              "to": "The API also allows fetching the source of a single template.\nUse the raw [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) to get the raw contents."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/installation/repositories": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List repositories that an app installation can access.\n\nYou must use an [installation access token](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
              "to": "List repositories that an app installation can access.\n\nYou must use an [installation access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/issues": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you.\n\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests)\" endpoint.",
              "to": "List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you.\n\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)\" endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/notifications/threads/{thread_id}/subscription": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@3.1/rest/reference/activity#get-a-repository-subscription).\n\nNote that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.",
              "to": "This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#get-a-repository-subscription).\n\nNote that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/organizations": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists all organizations, in the order that they were created on GitHub Enterprise Server.\n\n**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.",
              "to": "Lists all organizations, in the order that they were created on GitHub Enterprise Server.\n\n**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n\nGitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See \"[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/)\" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below.\"",
              "to": "To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n\nGitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See \"[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/)\" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below.\""
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/hooks/{hook_id}/config": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": null,
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": null,
                          "nullable_changed": null,
                          "properties_changed": {
                            "added": [],
                            "changed": {
                              "secret": {
                                "description_changed": {
                                  "from": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                                  "to": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#delivery-headers)."
                                },
                                "enum_changed": null,
                                "format_changed": null,
                                "items_changed": null,
                                "nullable_changed": null,
                                "properties_changed": null,
                                "required_changed": null,
                                "type_changed": null
                              }
                            },
                            "removed": []
                          },
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/installation": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
              "to": "Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/issues": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List issues in an organization assigned to the authenticated user.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests)\" endpoint.",
              "to": "List issues in an organization assigned to the authenticated user.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)\" endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/teams/{team_slug}/discussions": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.",
              "to": "List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.",
              "to": "Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.",
              "to": "List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.",
              "to": "Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.",
              "to": "List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.",
              "to": "List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/teams/{team_slug}/memberships/{username}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Team members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#create-a-team).",
              "to": "Team members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-team)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.\n\nIf a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.",
              "to": "Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.\n\nIf a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/actions/runs": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
              "to": "Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).",
              "to": "Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.",
              "to": "List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/comments": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/).\n\nComments are ordered by ascending ID.",
              "to": "Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/).\n\nComments are ordered by ascending ID."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#comments).",
              "to": "List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#comments)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests) endpoint.",
              "to": "Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests) endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": {
                            "description_changed": null,
                            "enum_changed": null,
                            "format_changed": null,
                            "items_changed": null,
                            "nullable_changed": null,
                            "properties_changed": {
                              "added": [],
                              "changed": {},
                              "removed": [
                                [
                                  "auto_merge",
                                  {
                                    "description": "The status of auto merging a pull request.",
                                    "nullable": true,
                                    "properties": {
                                      "commit_message": {
                                        "description": "Commit message for the merge commit.",
                                        "type": "string"
                                      },
                                      "commit_title": {
                                        "description": "Title for the merge commit message.",
                                        "type": "string"
                                      },
                                      "enabled_by": {
                                        "description": "Simple User",
                                        "nullable": true,
                                        "properties": {
                                          "avatar_url": {
                                            "example": "https://github.com/images/error/octocat_happy.gif",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "email": {
                                            "nullable": true,
                                            "type": "string"
                                          },
                                          "events_url": {
                                            "example": "https://api.github.com/users/octocat/events{/privacy}",
                                            "type": "string"
                                          },
                                          "followers_url": {
                                            "example": "https://api.github.com/users/octocat/followers",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "following_url": {
                                            "example": "https://api.github.com/users/octocat/following{/other_user}",
                                            "type": "string"
                                          },
                                          "gists_url": {
                                            "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                            "type": "string"
                                          },
                                          "gravatar_id": {
                                            "example": "41d064eb2195891e12d0413f63227ea7",
                                            "nullable": true,
                                            "type": "string"
                                          },
                                          "html_url": {
                                            "example": "https://github.com/octocat",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "id": {
                                            "example": 1,
                                            "type": "integer"
                                          },
                                          "login": {
                                            "example": "octocat",
                                            "type": "string"
                                          },
                                          "name": {
                                            "nullable": true,
                                            "type": "string"
                                          },
                                          "node_id": {
                                            "example": "MDQ6VXNlcjE=",
                                            "type": "string"
                                          },
                                          "organizations_url": {
                                            "example": "https://api.github.com/users/octocat/orgs",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "received_events_url": {
                                            "example": "https://api.github.com/users/octocat/received_events",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "repos_url": {
                                            "example": "https://api.github.com/users/octocat/repos",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "site_admin": { "type": "boolean" },
                                          "starred_at": {
                                            "example": "\"2020-07-09T00:17:55Z\"",
                                            "type": "string"
                                          },
                                          "starred_url": {
                                            "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                            "type": "string"
                                          },
                                          "subscriptions_url": {
                                            "example": "https://api.github.com/users/octocat/subscriptions",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "type": {
                                            "example": "User",
                                            "type": "string"
                                          },
                                          "url": {
                                            "example": "https://api.github.com/users/octocat",
                                            "format": "uri",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "avatar_url",
                                          "events_url",
                                          "followers_url",
                                          "following_url",
                                          "gists_url",
                                          "gravatar_id",
                                          "html_url",
                                          "id",
                                          "node_id",
                                          "login",
                                          "organizations_url",
                                          "received_events_url",
                                          "repos_url",
                                          "site_admin",
                                          "starred_url",
                                          "subscriptions_url",
                                          "type",
                                          "url"
                                        ],
                                        "title": "Simple User",
                                        "type": "object"
                                      },
                                      "merge_method": {
                                        "description": "The merge method to use.",
                                        "enum": ["merge", "squash", "rebase"],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "enabled_by",
                                      "merge_method",
                                      "commit_title",
                                      "commit_message"
                                    ],
                                    "title": "Auto merge",
                                    "type": "object"
                                  }
                                ]
                              ]
                            },
                            "required_changed": {
                              "added": [],
                              "removed": ["auto_merge"]
                            },
                            "type_changed": null
                          },
                          "nullable_changed": null,
                          "properties_changed": null,
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/commits/{ref}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n\n**Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.\n\nYou can pass the appropriate [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.\n\nTo return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
              "to": "Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n\n**Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.\n\nYou can pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.\n\nTo return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |"
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/commits/{ref}/status": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\nThe most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`",
              "to": "Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\nThe most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`"
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/compare/{basehead}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.\n\nThe response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n\nThe response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n\n**Working with large comparisons**\n\nThe response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-commits) to enumerate all commits in the range.\n\nFor comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long\nto generate. You can typically resolve this error by using a smaller commit range.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
              "to": "The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.\n\nThe response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n\nThe response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n\n**Working with large comparisons**\n\nThe response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commits) to enumerate all commits in the range.\n\nFor comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long\nto generate. You can typically resolve this error by using a smaller commit range.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |"
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/contents/{path}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit\n`:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories. \n\nFiles and symlinks support [a custom media type](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types) for\nretrieving the raw content or rendered HTML (when supported). All content types support [a custom media\ntype](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent\nobject format.\n\n**Note**:\n*   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@3.1/rest/reference/git#trees).\n*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees\nAPI](https://docs.github.com/enterprise-server@3.1/rest/reference/git#get-a-tree).\n*   This API supports files up to 1 megabyte in size.\n\n#### If the content is a directory\nThe response will be an array of objects, one object for each item in the directory.\nWhen listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value\n_should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).\nIn the next major version of the API, the type will be returned as \"submodule\".\n\n#### If the content is a symlink \nIf the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the\nAPI responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object \ndescribing the symlink itself.\n\n#### If the content is a submodule\nThe `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific\ncommit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out\nthe submodule at that specific commit.\n\nIf the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the\ngithub.com URLs (`html_url` and `_links[\"html\"]`) will have null values.",
              "to": "Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit\n`:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories. \n\nFiles and symlinks support [a custom media type](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for\nretrieving the raw content or rendered HTML (when supported). All content types support [a custom media\ntype](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent\nobject format.\n\n**Note**:\n*   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@3.0/rest/reference/git#trees).\n*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees\nAPI](https://docs.github.com/enterprise-server@3.0/rest/reference/git#get-a-tree).\n*   This API supports files up to 1 megabyte in size.\n\n#### If the content is a directory\nThe response will be an array of objects, one object for each item in the directory.\nWhen listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value\n_should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).\nIn the next major version of the API, the type will be returned as \"submodule\".\n\n#### If the content is a symlink \nIf the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the\nAPI responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object \ndescribing the symlink itself.\n\n#### If the content is a submodule\nThe `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific\ncommit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out\nthe submodule at that specific commit.\n\nIf the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the\ngithub.com URLs (`html_url` and `_links[\"html\"]`) will have null values."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/git/matching-refs/{ref}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n\nWhen you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n\n**Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.1/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n\nIf you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.",
              "to": "Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n\nWhen you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n\n**Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.0/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n\nIf you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/git/ref/{ref}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.\n\n**Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.1/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".",
              "to": "Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.\n\n**Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.0/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\"."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/hooks": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": null,
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": {
                            "description_changed": null,
                            "enum_changed": null,
                            "format_changed": null,
                            "items_changed": null,
                            "nullable_changed": null,
                            "properties_changed": {
                              "added": [],
                              "changed": {
                                "config": {
                                  "description_changed": null,
                                  "enum_changed": null,
                                  "format_changed": null,
                                  "items_changed": null,
                                  "nullable_changed": null,
                                  "properties_changed": {
                                    "added": [],
                                    "changed": {
                                      "secret": {
                                        "description_changed": {
                                          "from": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                                          "to": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#delivery-headers)."
                                        },
                                        "enum_changed": null,
                                        "format_changed": null,
                                        "items_changed": null,
                                        "nullable_changed": null,
                                        "properties_changed": null,
                                        "required_changed": null,
                                        "type_changed": null
                                      }
                                    },
                                    "removed": []
                                  },
                                  "required_changed": null,
                                  "type_changed": null
                                }
                              },
                              "removed": []
                            },
                            "required_changed": null,
                            "type_changed": null
                          },
                          "nullable_changed": null,
                          "properties_changed": null,
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/hooks/{hook_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": null,
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": null,
                          "nullable_changed": null,
                          "properties_changed": {
                            "added": [],
                            "changed": {
                              "config": {
                                "description_changed": null,
                                "enum_changed": null,
                                "format_changed": null,
                                "items_changed": null,
                                "nullable_changed": null,
                                "properties_changed": {
                                  "added": [],
                                  "changed": {
                                    "secret": {
                                      "description_changed": {
                                        "from": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                                        "to": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#delivery-headers)."
                                      },
                                      "enum_changed": null,
                                      "format_changed": null,
                                      "items_changed": null,
                                      "nullable_changed": null,
                                      "properties_changed": null,
                                      "required_changed": null,
                                      "type_changed": null
                                    }
                                  },
                                  "removed": []
                                },
                                "required_changed": null,
                                "type_changed": null
                              }
                            },
                            "removed": []
                          },
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/hooks/{hook_id}/config": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": null,
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": null,
                          "nullable_changed": null,
                          "properties_changed": {
                            "added": [],
                            "changed": {
                              "secret": {
                                "description_changed": {
                                  "from": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                                  "to": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#delivery-headers)."
                                },
                                "enum_changed": null,
                                "format_changed": null,
                                "items_changed": null,
                                "nullable_changed": null,
                                "properties_changed": null,
                                "required_changed": null,
                                "type_changed": null
                              }
                            },
                            "removed": []
                          },
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/installation": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
              "to": "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/issues": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List issues in a repository.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests)\" endpoint.",
              "to": "List issues in a repository.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)\" endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.1/rest/reference/issues#comments).",
              "to": "List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#comments)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/issues/{issue_number}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was\n[transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\nto the [`issues`](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#issues) webhook.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests)\" endpoint.",
              "to": "The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was\n[transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\nto the [`issues`](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#issues) webhook.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)\" endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List the reactions to an [issue](https://docs.github.com/enterprise-server@3.1/rest/reference/issues).",
              "to": "List the reactions to an [issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/license": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "This method returns the contents of the repository's license file, if one is detected.\n\nSimilar to [Get repository content](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.",
              "to": "This method returns the contents of the repository's license file, if one is detected.\n\nSimilar to [Get repository content](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types) for retrieving the raw license content or rendered license HTML."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/pulls": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": null,
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": {
                            "description_changed": null,
                            "enum_changed": null,
                            "format_changed": null,
                            "items_changed": null,
                            "nullable_changed": null,
                            "properties_changed": {
                              "added": [],
                              "changed": {},
                              "removed": [
                                [
                                  "auto_merge",
                                  {
                                    "description": "The status of auto merging a pull request.",
                                    "nullable": true,
                                    "properties": {
                                      "commit_message": {
                                        "description": "Commit message for the merge commit.",
                                        "type": "string"
                                      },
                                      "commit_title": {
                                        "description": "Title for the merge commit message.",
                                        "type": "string"
                                      },
                                      "enabled_by": {
                                        "description": "Simple User",
                                        "nullable": true,
                                        "properties": {
                                          "avatar_url": {
                                            "example": "https://github.com/images/error/octocat_happy.gif",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "email": {
                                            "nullable": true,
                                            "type": "string"
                                          },
                                          "events_url": {
                                            "example": "https://api.github.com/users/octocat/events{/privacy}",
                                            "type": "string"
                                          },
                                          "followers_url": {
                                            "example": "https://api.github.com/users/octocat/followers",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "following_url": {
                                            "example": "https://api.github.com/users/octocat/following{/other_user}",
                                            "type": "string"
                                          },
                                          "gists_url": {
                                            "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                            "type": "string"
                                          },
                                          "gravatar_id": {
                                            "example": "41d064eb2195891e12d0413f63227ea7",
                                            "nullable": true,
                                            "type": "string"
                                          },
                                          "html_url": {
                                            "example": "https://github.com/octocat",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "id": {
                                            "example": 1,
                                            "type": "integer"
                                          },
                                          "login": {
                                            "example": "octocat",
                                            "type": "string"
                                          },
                                          "name": {
                                            "nullable": true,
                                            "type": "string"
                                          },
                                          "node_id": {
                                            "example": "MDQ6VXNlcjE=",
                                            "type": "string"
                                          },
                                          "organizations_url": {
                                            "example": "https://api.github.com/users/octocat/orgs",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "received_events_url": {
                                            "example": "https://api.github.com/users/octocat/received_events",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "repos_url": {
                                            "example": "https://api.github.com/users/octocat/repos",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "site_admin": { "type": "boolean" },
                                          "starred_at": {
                                            "example": "\"2020-07-09T00:17:55Z\"",
                                            "type": "string"
                                          },
                                          "starred_url": {
                                            "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                            "type": "string"
                                          },
                                          "subscriptions_url": {
                                            "example": "https://api.github.com/users/octocat/subscriptions",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "type": {
                                            "example": "User",
                                            "type": "string"
                                          },
                                          "url": {
                                            "example": "https://api.github.com/users/octocat",
                                            "format": "uri",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "avatar_url",
                                          "events_url",
                                          "followers_url",
                                          "following_url",
                                          "gists_url",
                                          "gravatar_id",
                                          "html_url",
                                          "id",
                                          "node_id",
                                          "login",
                                          "organizations_url",
                                          "received_events_url",
                                          "repos_url",
                                          "site_admin",
                                          "starred_url",
                                          "subscriptions_url",
                                          "type",
                                          "url"
                                        ],
                                        "title": "Simple User",
                                        "type": "object"
                                      },
                                      "merge_method": {
                                        "description": "The merge method to use.",
                                        "enum": ["merge", "squash", "rebase"],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "enabled_by",
                                      "merge_method",
                                      "commit_title",
                                      "commit_message"
                                    ],
                                    "title": "Auto merge",
                                    "type": "object"
                                  }
                                ]
                              ]
                            },
                            "required_changed": {
                              "added": [],
                              "removed": ["auto_merge"]
                            },
                            "type_changed": null
                          },
                          "nullable_changed": null,
                          "properties_changed": null,
                          "required_changed": null,
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#review-comments).",
              "to": "List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#review-comments)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/pulls/{pull_number}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists details of a pull request by providing its number.\n\nWhen you get, [create](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.1/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n\nThe value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n\nThe value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n\n*   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n*   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n*   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n\nPass the appropriate [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
              "to": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists details of a pull request by providing its number.\n\nWhen you get, [create](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.0/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\".\n\nThe value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n\nThe value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n\n*   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n*   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n*   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n\nPass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": {
              "added": [],
              "changed": {
                "200": {
                  "content": {
                    "added": [],
                    "changed": {
                      "application/json": {
                        "schema_added": null,
                        "schema_changed": {
                          "description_changed": null,
                          "enum_changed": null,
                          "format_changed": null,
                          "items_changed": null,
                          "nullable_changed": null,
                          "properties_changed": {
                            "added": [],
                            "changed": {},
                            "removed": [
                              [
                                "auto_merge",
                                {
                                  "description": "The status of auto merging a pull request.",
                                  "nullable": true,
                                  "properties": {
                                    "commit_message": {
                                      "description": "Commit message for the merge commit.",
                                      "type": "string"
                                    },
                                    "commit_title": {
                                      "description": "Title for the merge commit message.",
                                      "type": "string"
                                    },
                                    "enabled_by": {
                                      "description": "Simple User",
                                      "nullable": true,
                                      "properties": {
                                        "avatar_url": {
                                          "example": "https://github.com/images/error/octocat_happy.gif",
                                          "format": "uri",
                                          "type": "string"
                                        },
                                        "email": {
                                          "nullable": true,
                                          "type": "string"
                                        },
                                        "events_url": {
                                          "example": "https://api.github.com/users/octocat/events{/privacy}",
                                          "type": "string"
                                        },
                                        "followers_url": {
                                          "example": "https://api.github.com/users/octocat/followers",
                                          "format": "uri",
                                          "type": "string"
                                        },
                                        "following_url": {
                                          "example": "https://api.github.com/users/octocat/following{/other_user}",
                                          "type": "string"
                                        },
                                        "gists_url": {
                                          "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                          "type": "string"
                                        },
                                        "gravatar_id": {
                                          "example": "41d064eb2195891e12d0413f63227ea7",
                                          "nullable": true,
                                          "type": "string"
                                        },
                                        "html_url": {
                                          "example": "https://github.com/octocat",
                                          "format": "uri",
                                          "type": "string"
                                        },
                                        "id": {
                                          "example": 1,
                                          "type": "integer"
                                        },
                                        "login": {
                                          "example": "octocat",
                                          "type": "string"
                                        },
                                        "name": {
                                          "nullable": true,
                                          "type": "string"
                                        },
                                        "node_id": {
                                          "example": "MDQ6VXNlcjE=",
                                          "type": "string"
                                        },
                                        "organizations_url": {
                                          "example": "https://api.github.com/users/octocat/orgs",
                                          "format": "uri",
                                          "type": "string"
                                        },
                                        "received_events_url": {
                                          "example": "https://api.github.com/users/octocat/received_events",
                                          "format": "uri",
                                          "type": "string"
                                        },
                                        "repos_url": {
                                          "example": "https://api.github.com/users/octocat/repos",
                                          "format": "uri",
                                          "type": "string"
                                        },
                                        "site_admin": { "type": "boolean" },
                                        "starred_at": {
                                          "example": "\"2020-07-09T00:17:55Z\"",
                                          "type": "string"
                                        },
                                        "starred_url": {
                                          "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                          "type": "string"
                                        },
                                        "subscriptions_url": {
                                          "example": "https://api.github.com/users/octocat/subscriptions",
                                          "format": "uri",
                                          "type": "string"
                                        },
                                        "type": {
                                          "example": "User",
                                          "type": "string"
                                        },
                                        "url": {
                                          "example": "https://api.github.com/users/octocat",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "avatar_url",
                                        "events_url",
                                        "followers_url",
                                        "following_url",
                                        "gists_url",
                                        "gravatar_id",
                                        "html_url",
                                        "id",
                                        "node_id",
                                        "login",
                                        "organizations_url",
                                        "received_events_url",
                                        "repos_url",
                                        "site_admin",
                                        "starred_url",
                                        "subscriptions_url",
                                        "type",
                                        "url"
                                      ],
                                      "title": "Simple User",
                                      "type": "object"
                                    },
                                    "merge_method": {
                                      "description": "The merge method to use.",
                                      "enum": ["merge", "squash", "rebase"],
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "enabled_by",
                                    "merge_method",
                                    "commit_title",
                                    "commit_message"
                                  ],
                                  "title": "Auto merge",
                                  "type": "object"
                                }
                              ]
                            ]
                          },
                          "required_changed": {
                            "added": [],
                            "removed": ["auto_merge"]
                          },
                          "type_changed": null
                        },
                        "schema_removed": null
                      }
                    },
                    "removed": []
                  }
                }
              },
              "removed": []
            },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/pulls/{pull_number}/commits": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-commits) endpoint.",
              "to": "Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commits) endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/readme": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Gets the preferred README for a repository.\n\nREADMEs support [custom media types](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.",
              "to": "Gets the preferred README for a repository.\n\nREADMEs support [custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/readme/{dir}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Gets the README from a repository directory.\n\nREADMEs support [custom media types](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.",
              "to": "Gets the README from a repository directory.\n\nREADMEs support [custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/releases": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-repository-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases.",
              "to": "This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-repository-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/releases/assets/{asset_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.",
              "to": "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/releases/{release_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#hypermedia).",
              "to": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#hypermedia)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repos/{owner}/{repo}/stargazers": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists the people that have starred the repository.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) via the `Accept` header:",
              "to": "Lists the people that have starred the repository.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:"
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/repositories": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists all public repositories in the order that they were created.\n\nNote:\n- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.\n- Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.",
              "to": "Lists all public repositories in the order that they were created.\n\nNote:\n- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.\n- Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/search/code": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n\n`q=addClass+in:file+language:js+repo:jquery/jquery`\n\nThis query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n\n#### Considerations for code search\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\nlanguage:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.",
              "to": "Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n\n`q=addClass+in:file+language:js+repo:jquery/jquery`\n\nThis query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n\n#### Considerations for code search\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\nlanguage:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/search/commits": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\nmetadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n`q=repo:octocat/Spoon-Knife+css`",
              "to": "Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\nmetadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n`q=repo:octocat/Spoon-Knife+css`"
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/search/issues": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\nsearch results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\n`q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n\nThis query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.\n\n**Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see \"[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).\"",
              "to": "Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\nsearch results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\n`q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n\nThis query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.\n\n**Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see \"[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests).\""
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/search/labels": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\n`q=bug+defect+enhancement&repository_id=64778136`\n\nThe labels that best match the query appear first in the search results.",
              "to": "Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\n`q=bug+defect+enhancement&repository_id=64778136`\n\nThe labels that best match the query appear first in the search results."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/search/repositories": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).\n\nFor example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n\n`q=tetris+language:assembly&sort=stars&order=desc`\n\nThis query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.\n\nWhen you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:\n\n`q=topic:ruby+topic:rails`",
              "to": "Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).\n\nFor example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n\n`q=tetris+language:assembly&sort=stars&order=desc`\n\nThis query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.\n\nWhen you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:\n\n`q=topic:ruby+topic:rails`"
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/search/topics": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination). See \"[Searching topics](https://help.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.\n\nWhen searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).\n\nFor example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n\n`q=ruby+is:featured`\n\nThis query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.",
              "to": "Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination). See \"[Searching topics](https://help.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.\n\nWhen searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).\n\nFor example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n\n`q=ruby+is:featured`\n\nThis query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/search/users": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata).\n\nFor example, if you're looking for a list of popular users, you might try this query:\n\n`q=tom+repos:%3E42+followers:%3E1000`\n\nThis query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.",
              "to": "Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).\n\nFor example, if you're looking for a list of popular users, you might try this query:\n\n`q=tom+repos:%3E42+followers:%3E1000`\n\nThis query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-a-team-by-name) endpoint.",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-team-by-name) endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/discussions": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-discussions) endpoint.\n\nList all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-discussions) endpoint.\n\nList all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/discussions/{discussion_number}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-a-discussion) endpoint.\n\nGet a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-discussion) endpoint.\n\nGet a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/discussions/{discussion_number}/comments": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-discussion-comments) endpoint.\n\nList all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-discussion-comments) endpoint.\n\nList all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-a-discussion-comment) endpoint.\n\nGet a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-discussion-comment) endpoint.\n\nGet a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.\n\nList the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.\n\nList the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/discussions/{discussion_number}/reactions": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.\n\nList the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.\n\nList the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/members": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-team-members) endpoint.\n\nTeam members will include the members of child teams.",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-members) endpoint.\n\nTeam members will include the members of child teams."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/members/{username}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "The \"Get team member\" endpoint (described below) is deprecated.\n\nWe recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.\n\nTo list members in a team, the team must be visible to the authenticated user.",
              "to": "The \"Get team member\" endpoint (described below) is deprecated.\n\nWe recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.\n\nTo list members in a team, the team must be visible to the authenticated user."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/memberships/{username}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-team-membership-for-a-user) endpoint.\n\nTeam members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#create-a-team).",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-team-membership-for-a-user) endpoint.\n\nTeam members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-team)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/projects": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-team-projects) endpoint.\n\nLists the organization projects for a team.",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-projects) endpoint.\n\nLists the organization projects for a team."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/projects/{project_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#check-team-permissions-for-a-project) endpoint.\n\nChecks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#check-team-permissions-for-a-project) endpoint.\n\nChecks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/repos": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-team-repositories) endpoint.",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-repositories) endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/repos/{owner}/{repo}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Note**: Repositories inherited through a parent team will also be checked.\n\n**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) via the `Accept` header:",
              "to": "**Note**: Repositories inherited through a parent team will also be checked.\n\n**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:"
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/teams/{team_id}/teams": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-child-teams) endpoint.",
              "to": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-child-teams) endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/user/gpg_keys": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
              "to": "Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/user/gpg_keys/{gpg_key_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
              "to": "View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/user/installations": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key.",
              "to": "Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/user/installations/{installation_id}/repositories": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe access the user has to each repository is included in the hash under the `permissions` key.",
              "to": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe access the user has to each repository is included in the hash under the `permissions` key."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/user/issues": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List issues across owned and member repositories assigned to the authenticated user.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests)\" endpoint.",
              "to": "List issues across owned and member repositories assigned to the authenticated user.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)\" endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/user/keys": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
              "to": "Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/user/keys/{key_id}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
              "to": "View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/user/public_emails": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@3.1/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.",
              "to": "Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/user/starred": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists repositories the authenticated user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) via the `Accept` header:",
              "to": "Lists repositories the authenticated user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:"
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/user/teams": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/).",
              "to": "List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/)."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/users": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.",
              "to": "Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/users/{username}": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Provides publicly available information about someone with a GitHub account.\n\nGitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See \"[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below\"\n\nThe `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://docs.github.com/enterprise-server@3.1/rest/reference/users#emails)\".",
              "to": "Provides publicly available information about someone with a GitHub account.\n\nGitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See \"[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below\"\n\nThe `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://docs.github.com/enterprise-server@3.0/rest/reference/users#emails)\"."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/users/{username}/installation": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Enables an authenticated GitHub App to find the user’s installation information.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
              "to": "Enables an authenticated GitHub App to find the user’s installation information.\n\nYou must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/users/{username}/orgs": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.",
              "to": "List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead."
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      },
      "/users/{username}/starred": {
        "operations_added": [],
        "operations_changed": {
          "get": {
            "description": {
              "from": "Lists repositories a user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/) via the `Accept` header:",
              "to": "Lists repositories a user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:"
            },
            "operation_id": null,
            "parameters": { "added": [], "changed": {}, "removed": [] },
            "request_body": null,
            "responses": { "added": [], "changed": {}, "removed": [] },
            "summary": null,
            "tags": { "added": [], "removed": [] }
          }
        },
        "operations_removed": []
      }
    },
    "removed": [
      [
        "/orgs/{org}/audit-log",
        {
          "get": {
            "deprecated": null,
            "description": "Gets the audit log for an organization. For more information, see \"[Reviewing the audit log for your organization](https://docs.github.com/enterprise-server@3.1/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization).\"\n\nTo use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.",
            "externalDocs": {
              "description": "API method documentation",
              "url": "https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#get-audit-log"
            },
            "operationId": "orgs/get-audit-log",
            "parameters": [
              {
                "in": "path",
                "name": "org",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "allowReserved": null,
                "description": "A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.1/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).",
                "in": "query",
                "name": "phrase",
                "required": false,
                "schema": { "type": "string" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "The event types to include:\n\n- `web` - returns web (non-Git) events\n- `git` - returns Git events\n- `all` - returns both web and Git events\n\nThe default is `web`.",
                "in": "query",
                "name": "include",
                "required": false,
                "schema": { "enum": ["web", "git", "all"], "type": "string" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.",
                "in": "query",
                "name": "after",
                "required": false,
                "schema": { "type": "string" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.",
                "in": "query",
                "name": "before",
                "required": false,
                "schema": { "type": "string" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.\n\nThe default is `desc`.",
                "in": "query",
                "name": "order",
                "required": false,
                "schema": { "enum": ["desc", "asc"], "type": "string" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "Results per page (max 100)",
                "in": "query",
                "name": "per_page",
                "required": false,
                "schema": { "default": 30, "type": "integer" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "Page number of the results to fetch.",
                "in": "query",
                "name": "page",
                "required": false,
                "schema": { "default": 1, "type": "integer" },
                "style": "form"
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "examples": {
                      "default": {
                        "value": [
                          {
                            "@timestamp": 1606929874512,
                            "_document_id": "xJJFlFOhQ6b-5vaAFy9Rjw",
                            "action": "team.add_member",
                            "actor": "octocat",
                            "created_at": 1606929874512,
                            "org": "octo-corp",
                            "team": "octo-corp/example-team",
                            "user": "monalisa"
                          },
                          {
                            "@timestamp": 1606507117008,
                            "_document_id": "Vqvg6kZ4MYqwWRKFDzlMoQ",
                            "action": "org.create",
                            "actor": "octocat",
                            "created_at": 1606507117008,
                            "org": "octocat-test-org"
                          },
                          {
                            "@timestamp": 1605719148837,
                            "_document_id": "LwW2vpJZCDS-WUmo9Z-ifw",
                            "action": "repo.destroy",
                            "actor": "monalisa",
                            "created_at": 1605719148837,
                            "org": "mona-org",
                            "repo": "mona-org/mona-test-repo",
                            "visibility": "private"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "items": {
                        "properties": {
                          "@timestamp": {
                            "description": "The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).",
                            "type": "integer"
                          },
                          "_document_id": {
                            "description": "A unique identifier for an audit event.",
                            "type": "string"
                          },
                          "action": {
                            "description": "The name of the action that was performed, for example `user.login` or `repo.create`.",
                            "type": "string"
                          },
                          "active": { "type": "boolean" },
                          "active_was": { "type": "boolean" },
                          "actor": {
                            "description": "The actor who performed the action.",
                            "type": "string"
                          },
                          "actor_id": {
                            "description": "The id of the actor who performed the action.",
                            "type": "integer"
                          },
                          "actor_location": {
                            "properties": {
                              "country_name": { "type": "string" }
                            },
                            "type": "object"
                          },
                          "blocked_user": {
                            "description": "The username of the account being blocked.",
                            "type": "string"
                          },
                          "business": { "type": "string" },
                          "config": { "type": "array" },
                          "config_was": { "type": "array" },
                          "content_type": { "type": "string" },
                          "created_at": {
                            "description": "The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).",
                            "type": "integer"
                          },
                          "data": {
                            "additionalProperties": true,
                            "type": "object"
                          },
                          "deploy_key_fingerprint": { "type": "string" },
                          "emoji": { "type": "string" },
                          "events": { "type": "array" },
                          "events_were": { "type": "array" },
                          "explanation": { "type": "string" },
                          "fingerprint": { "type": "string" },
                          "hook_id": { "type": "integer" },
                          "limited_availability": { "type": "boolean" },
                          "message": { "type": "string" },
                          "name": { "type": "string" },
                          "old_user": { "type": "string" },
                          "openssh_public_key": { "type": "string" },
                          "org": { "type": "string" },
                          "org_id": { "type": "integer" },
                          "previous_visibility": { "type": "string" },
                          "read_only": { "type": "boolean" },
                          "repo": {
                            "description": "The name of the repository.",
                            "type": "string"
                          },
                          "repository": {
                            "description": "The name of the repository.",
                            "type": "string"
                          },
                          "repository_public": { "type": "boolean" },
                          "target_login": { "type": "string" },
                          "team": { "type": "string" },
                          "transport_protocol": {
                            "description": "The type of protocol (for example, HTTP or SSH) used to transfer Git data.",
                            "type": "integer"
                          },
                          "transport_protocol_name": {
                            "description": "A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.",
                            "type": "string"
                          },
                          "user": {
                            "description": "The user that was affected by the action performed (if available).",
                            "type": "string"
                          },
                          "visibility": {
                            "description": "The repository visibility, for example `public` or `private`.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "description": "Response"
              }
            },
            "summary": "Get the audit log for an organization",
            "tags": ["orgs"],
            "x-github": {
              "category": "orgs",
              "enabledForGitHubApps": true,
              "githubCloudOnly": true,
              "previews": [],
              "subcategory": null
            },
            "x-octokit": {}
          }
        }
      ],
      [
        "/repos/{owner}/{repo}/branches/{branch}/rename",
        {
          "post": {
            "deprecated": null,
            "description": "Renames a branch in a repository.\n\n**Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see \"[Renaming a branch](https://docs.github.com/enterprise-server@3.1/github/administering-a-repository/renaming-a-branch)\".\n\nThe permissions required to use this endpoint depends on whether you are renaming the default branch.\n\nTo rename a non-default branch:\n\n* Users must have push access.\n* GitHub Apps must have the `contents:write` repository permission.\n\nTo rename the default branch:\n\n* Users must have admin or owner permissions.\n* GitHub Apps must have the `administration:write` repository permission.",
            "externalDocs": {
              "description": "API method documentation",
              "url": "https://docs.github.com/enterprise-server@3.1/rest/reference/repos#rename-a-branch"
            },
            "operationId": "repos/rename-branch",
            "parameters": [
              {
                "in": "path",
                "name": "owner",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "in": "path",
                "name": "repo",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "description": "The name of the branch.",
                "in": "path",
                "name": "branch",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple",
                "x-multi-segment": true
              }
            ],
            "requestBody": {
              "content": {
                "application/json": {
                  "example": { "new_name": "my_renamed_branch" },
                  "schema": {
                    "properties": {
                      "new_name": {
                        "description": "The new name of the branch.",
                        "type": "string"
                      }
                    },
                    "required": ["new_name"],
                    "type": "object"
                  }
                }
              },
              "required": null
            },
            "responses": {
              "201": {
                "content": {
                  "application/json": {
                    "examples": {
                      "default": {
                        "value": {
                          "_links": {
                            "html": "https://github.com/octocat/Hello-World/tree/master",
                            "self": "https://api.github.com/repos/octocat/Hello-World/branches/master"
                          },
                          "commit": {
                            "author": {
                              "avatar_url": "https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
                              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                              "followers_url": "https://api.github.com/users/octocat/followers",
                              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                              "gravatar_id": "",
                              "html_url": "https://github.com/octocat",
                              "id": 583231,
                              "login": "octocat",
                              "node_id": "MDQ6VXNlcjE=",
                              "organizations_url": "https://api.github.com/users/octocat/orgs",
                              "received_events_url": "https://api.github.com/users/octocat/received_events",
                              "repos_url": "https://api.github.com/users/octocat/repos",
                              "site_admin": true,
                              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                              "type": "User",
                              "url": "https://api.github.com/users/octocat"
                            },
                            "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
                            "commit": {
                              "author": {
                                "date": "2012-03-06T15:06:50-08:00",
                                "email": "octocat@nowhere.com",
                                "name": "The Octocat"
                              },
                              "comment_count": 0,
                              "committer": {
                                "date": "2012-03-06T15:06:50-08:00",
                                "email": "octocat@nowhere.com",
                                "name": "The Octocat"
                              },
                              "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
                              "tree": {
                                "sha": "b4eecafa9be2f2006ce1b709d6857b07069b4608",
                                "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/b4eecafa9be2f2006ce1b709d6857b07069b4608"
                              },
                              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                              "verification": {
                                "payload": null,
                                "reason": "unsigned",
                                "signature": null,
                                "verified": false
                              }
                            },
                            "committer": {
                              "avatar_url": "https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
                              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                              "followers_url": "https://api.github.com/users/octocat/followers",
                              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                              "gravatar_id": "",
                              "html_url": "https://github.com/octocat",
                              "id": 583231,
                              "login": "octocat",
                              "node_id": "MDQ6VXNlcjE=",
                              "organizations_url": "https://api.github.com/users/octocat/orgs",
                              "received_events_url": "https://api.github.com/users/octocat/received_events",
                              "repos_url": "https://api.github.com/users/octocat/repos",
                              "site_admin": true,
                              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                              "type": "User",
                              "url": "https://api.github.com/users/octocat"
                            },
                            "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                            "node_id": "MDY6Q29tbWl0N2ZkMWE2MGIwMWY5MWIzMTRmNTk5NTVhNGU0ZDRlODBkOGVkZjExZA==",
                            "parents": [
                              {
                                "sha": "553c2077f0edc3d5dc5d17262f6aa498e69d6f8e",
                                "url": "https://api.github.com/repos/octocat/Hello-World/commits/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e"
                              },
                              {
                                "sha": "762941318ee16e59dabbacb1b4049eec22f0d303",
                                "url": "https://api.github.com/repos/octocat/Hello-World/commits/762941318ee16e59dabbacb1b4049eec22f0d303"
                              }
                            ],
                            "sha": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                            "url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d"
                          },
                          "name": "master",
                          "protected": true,
                          "protection": {
                            "required_status_checks": {
                              "contexts": ["ci-test", "linter"],
                              "enforcement_level": "non_admins"
                            }
                          },
                          "protection_url": "https://api.github.com/repos/octocat/hello-world/branches/master/protection"
                        }
                      }
                    },
                    "schema": {
                      "description": "Branch With Protection",
                      "properties": {
                        "_links": {
                          "properties": {
                            "html": { "type": "string" },
                            "self": { "format": "uri", "type": "string" }
                          },
                          "required": ["html", "self"],
                          "type": "object"
                        },
                        "commit": {
                          "description": "Commit",
                          "properties": {
                            "author": {
                              "allOf": [
                                {
                                  "description": "Simple User",
                                  "nullable": true,
                                  "properties": {
                                    "avatar_url": {
                                      "example": "https://github.com/images/error/octocat_happy.gif",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "email": {
                                      "nullable": true,
                                      "type": "string"
                                    },
                                    "events_url": {
                                      "example": "https://api.github.com/users/octocat/events{/privacy}",
                                      "type": "string"
                                    },
                                    "followers_url": {
                                      "example": "https://api.github.com/users/octocat/followers",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "following_url": {
                                      "example": "https://api.github.com/users/octocat/following{/other_user}",
                                      "type": "string"
                                    },
                                    "gists_url": {
                                      "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                      "type": "string"
                                    },
                                    "gravatar_id": {
                                      "example": "41d064eb2195891e12d0413f63227ea7",
                                      "nullable": true,
                                      "type": "string"
                                    },
                                    "html_url": {
                                      "example": "https://github.com/octocat",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "id": { "example": 1, "type": "integer" },
                                    "login": {
                                      "example": "octocat",
                                      "type": "string"
                                    },
                                    "name": {
                                      "nullable": true,
                                      "type": "string"
                                    },
                                    "node_id": {
                                      "example": "MDQ6VXNlcjE=",
                                      "type": "string"
                                    },
                                    "organizations_url": {
                                      "example": "https://api.github.com/users/octocat/orgs",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "received_events_url": {
                                      "example": "https://api.github.com/users/octocat/received_events",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "repos_url": {
                                      "example": "https://api.github.com/users/octocat/repos",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "site_admin": { "type": "boolean" },
                                    "starred_at": {
                                      "example": "\"2020-07-09T00:17:55Z\"",
                                      "type": "string"
                                    },
                                    "starred_url": {
                                      "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                      "type": "string"
                                    },
                                    "subscriptions_url": {
                                      "example": "https://api.github.com/users/octocat/subscriptions",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "type": {
                                      "example": "User",
                                      "type": "string"
                                    },
                                    "url": {
                                      "example": "https://api.github.com/users/octocat",
                                      "format": "uri",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "avatar_url",
                                    "events_url",
                                    "followers_url",
                                    "following_url",
                                    "gists_url",
                                    "gravatar_id",
                                    "html_url",
                                    "id",
                                    "node_id",
                                    "login",
                                    "organizations_url",
                                    "received_events_url",
                                    "repos_url",
                                    "site_admin",
                                    "starred_url",
                                    "subscriptions_url",
                                    "type",
                                    "url"
                                  ],
                                  "title": "Simple User",
                                  "type": "object"
                                }
                              ],
                              "nullable": true
                            },
                            "comments_url": {
                              "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
                              "format": "uri",
                              "type": "string"
                            },
                            "commit": {
                              "properties": {
                                "author": {
                                  "allOf": [
                                    {
                                      "description": "Metaproperties for Git author/committer information.",
                                      "properties": {
                                        "date": {
                                          "example": "\"2007-10-29T02:42:39.000-07:00\"",
                                          "type": "string"
                                        },
                                        "email": {
                                          "example": "\"chris@ozmm.org\"",
                                          "type": "string"
                                        },
                                        "name": {
                                          "example": "\"Chris Wanstrath\"",
                                          "type": "string"
                                        }
                                      },
                                      "title": "Git User",
                                      "type": "object"
                                    }
                                  ],
                                  "nullable": true
                                },
                                "comment_count": {
                                  "example": 0,
                                  "type": "integer"
                                },
                                "committer": {
                                  "allOf": [
                                    {
                                      "description": "Metaproperties for Git author/committer information.",
                                      "properties": {
                                        "date": {
                                          "example": "\"2007-10-29T02:42:39.000-07:00\"",
                                          "type": "string"
                                        },
                                        "email": {
                                          "example": "\"chris@ozmm.org\"",
                                          "type": "string"
                                        },
                                        "name": {
                                          "example": "\"Chris Wanstrath\"",
                                          "type": "string"
                                        }
                                      },
                                      "title": "Git User",
                                      "type": "object"
                                    }
                                  ],
                                  "nullable": true
                                },
                                "message": {
                                  "example": "Fix all the bugs",
                                  "type": "string"
                                },
                                "tree": {
                                  "properties": {
                                    "sha": {
                                      "example": "827efc6d56897b048c772eb4087f854f46256132",
                                      "type": "string"
                                    },
                                    "url": {
                                      "example": "https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132",
                                      "format": "uri",
                                      "type": "string"
                                    }
                                  },
                                  "required": ["sha", "url"],
                                  "type": "object"
                                },
                                "url": {
                                  "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                                  "format": "uri",
                                  "type": "string"
                                },
                                "verification": {
                                  "properties": {
                                    "payload": {
                                      "nullable": true,
                                      "type": "string"
                                    },
                                    "reason": { "type": "string" },
                                    "signature": {
                                      "nullable": true,
                                      "type": "string"
                                    },
                                    "verified": { "type": "boolean" }
                                  },
                                  "required": [
                                    "verified",
                                    "reason",
                                    "payload",
                                    "signature"
                                  ],
                                  "title": "Verification",
                                  "type": "object"
                                }
                              },
                              "required": [
                                "author",
                                "committer",
                                "comment_count",
                                "message",
                                "tree",
                                "url"
                              ],
                              "type": "object"
                            },
                            "committer": {
                              "allOf": [
                                {
                                  "description": "Simple User",
                                  "nullable": true,
                                  "properties": {
                                    "avatar_url": {
                                      "example": "https://github.com/images/error/octocat_happy.gif",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "email": {
                                      "nullable": true,
                                      "type": "string"
                                    },
                                    "events_url": {
                                      "example": "https://api.github.com/users/octocat/events{/privacy}",
                                      "type": "string"
                                    },
                                    "followers_url": {
                                      "example": "https://api.github.com/users/octocat/followers",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "following_url": {
                                      "example": "https://api.github.com/users/octocat/following{/other_user}",
                                      "type": "string"
                                    },
                                    "gists_url": {
                                      "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                      "type": "string"
                                    },
                                    "gravatar_id": {
                                      "example": "41d064eb2195891e12d0413f63227ea7",
                                      "nullable": true,
                                      "type": "string"
                                    },
                                    "html_url": {
                                      "example": "https://github.com/octocat",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "id": { "example": 1, "type": "integer" },
                                    "login": {
                                      "example": "octocat",
                                      "type": "string"
                                    },
                                    "name": {
                                      "nullable": true,
                                      "type": "string"
                                    },
                                    "node_id": {
                                      "example": "MDQ6VXNlcjE=",
                                      "type": "string"
                                    },
                                    "organizations_url": {
                                      "example": "https://api.github.com/users/octocat/orgs",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "received_events_url": {
                                      "example": "https://api.github.com/users/octocat/received_events",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "repos_url": {
                                      "example": "https://api.github.com/users/octocat/repos",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "site_admin": { "type": "boolean" },
                                    "starred_at": {
                                      "example": "\"2020-07-09T00:17:55Z\"",
                                      "type": "string"
                                    },
                                    "starred_url": {
                                      "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                      "type": "string"
                                    },
                                    "subscriptions_url": {
                                      "example": "https://api.github.com/users/octocat/subscriptions",
                                      "format": "uri",
                                      "type": "string"
                                    },
                                    "type": {
                                      "example": "User",
                                      "type": "string"
                                    },
                                    "url": {
                                      "example": "https://api.github.com/users/octocat",
                                      "format": "uri",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "avatar_url",
                                    "events_url",
                                    "followers_url",
                                    "following_url",
                                    "gists_url",
                                    "gravatar_id",
                                    "html_url",
                                    "id",
                                    "node_id",
                                    "login",
                                    "organizations_url",
                                    "received_events_url",
                                    "repos_url",
                                    "site_admin",
                                    "starred_url",
                                    "subscriptions_url",
                                    "type",
                                    "url"
                                  ],
                                  "title": "Simple User",
                                  "type": "object"
                                }
                              ],
                              "nullable": true
                            },
                            "files": {
                              "items": {
                                "properties": {
                                  "additions": { "type": "integer" },
                                  "blob_url": { "type": "string" },
                                  "changes": { "type": "integer" },
                                  "contents_url": {
                                    "example": "\"https://api.github.com/repos/owner-3d68404b07d25daeb2d4a6bf/AAA_Public_Repo/contents/geometry.js?ref=c3956841a7cb7e8ba4a6fd923568d86958f01573\"",
                                    "type": "string"
                                  },
                                  "deletions": { "type": "integer" },
                                  "filename": { "type": "string" },
                                  "patch": { "type": "string" },
                                  "previous_filename": {
                                    "example": "\"subdir/before_name.txt\"",
                                    "type": "string"
                                  },
                                  "raw_url": { "type": "string" },
                                  "sha": {
                                    "example": "\"1e8e60ce9733d5283f7836fa602b6365a66b2567\"",
                                    "type": "string"
                                  },
                                  "status": { "type": "string" }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "html_url": {
                              "example": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                              "format": "uri",
                              "type": "string"
                            },
                            "node_id": {
                              "example": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
                              "type": "string"
                            },
                            "parents": {
                              "items": {
                                "properties": {
                                  "html_url": {
                                    "example": "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd",
                                    "format": "uri",
                                    "type": "string"
                                  },
                                  "sha": {
                                    "example": "7638417db6d59f3c431d3e1f261cc637155684cd",
                                    "type": "string"
                                  },
                                  "url": {
                                    "example": "https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
                                    "format": "uri",
                                    "type": "string"
                                  }
                                },
                                "required": ["sha", "url"],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "sha": {
                              "example": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                              "type": "string"
                            },
                            "stats": {
                              "properties": {
                                "additions": { "type": "integer" },
                                "deletions": { "type": "integer" },
                                "total": { "type": "integer" }
                              },
                              "type": "object"
                            },
                            "url": {
                              "example": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                              "format": "uri",
                              "type": "string"
                            }
                          },
                          "required": [
                            "url",
                            "sha",
                            "node_id",
                            "html_url",
                            "comments_url",
                            "commit",
                            "author",
                            "committer",
                            "parents"
                          ],
                          "title": "Commit",
                          "type": "object"
                        },
                        "name": { "type": "string" },
                        "pattern": { "example": "\"mas*\"", "type": "string" },
                        "protected": { "type": "boolean" },
                        "protection": {
                          "description": "Branch Protection",
                          "properties": {
                            "allow_deletions": {
                              "properties": {
                                "enabled": { "type": "boolean" }
                              },
                              "type": "object"
                            },
                            "allow_force_pushes": {
                              "properties": {
                                "enabled": { "type": "boolean" }
                              },
                              "type": "object"
                            },
                            "enabled": { "type": "boolean" },
                            "enforce_admins": {
                              "description": "Protected Branch Admin Enforced",
                              "properties": {
                                "enabled": {
                                  "example": true,
                                  "type": "boolean"
                                },
                                "url": {
                                  "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins",
                                  "format": "uri",
                                  "type": "string"
                                }
                              },
                              "required": ["url", "enabled"],
                              "title": "Protected Branch Admin Enforced",
                              "type": "object"
                            },
                            "name": {
                              "example": "\"branch/with/protection\"",
                              "type": "string"
                            },
                            "protection_url": {
                              "example": "\"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection\"",
                              "type": "string"
                            },
                            "required_conversation_resolution": {
                              "properties": {
                                "enabled": { "type": "boolean" }
                              },
                              "type": "object"
                            },
                            "required_linear_history": {
                              "properties": {
                                "enabled": { "type": "boolean" }
                              },
                              "type": "object"
                            },
                            "required_pull_request_reviews": {
                              "description": "Protected Branch Pull Request Review",
                              "properties": {
                                "dismiss_stale_reviews": {
                                  "example": true,
                                  "type": "boolean"
                                },
                                "dismissal_restrictions": {
                                  "properties": {
                                    "teams": {
                                      "description": "The list of teams with review dismissal access.",
                                      "items": {
                                        "description": "Groups of organization members that gives permissions on specified repositories.",
                                        "properties": {
                                          "description": {
                                            "nullable": true,
                                            "type": "string"
                                          },
                                          "html_url": {
                                            "example": "https://github.com/orgs/rails/teams/core",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "id": { "type": "integer" },
                                          "members_url": { "type": "string" },
                                          "name": { "type": "string" },
                                          "node_id": { "type": "string" },
                                          "parent": {
                                            "allOf": [
                                              {
                                                "description": "Groups of organization members that gives permissions on specified repositories.",
                                                "nullable": true,
                                                "properties": {
                                                  "description": {
                                                    "description": "Description of the team",
                                                    "example": "A great team.",
                                                    "nullable": true,
                                                    "type": "string"
                                                  },
                                                  "html_url": {
                                                    "example": "https://github.com/orgs/rails/teams/core",
                                                    "format": "uri",
                                                    "type": "string"
                                                  },
                                                  "id": {
                                                    "description": "Unique identifier of the team",
                                                    "example": 1,
                                                    "type": "integer"
                                                  },
                                                  "ldap_dn": {
                                                    "description": "Distinguished Name (DN) that team maps to within LDAP environment",
                                                    "example": "uid=example,ou=users,dc=github,dc=com",
                                                    "type": "string"
                                                  },
                                                  "members_url": {
                                                    "example": "https://api.github.com/organizations/1/team/1/members{/member}",
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "description": "Name of the team",
                                                    "example": "Justice League",
                                                    "type": "string"
                                                  },
                                                  "node_id": {
                                                    "example": "MDQ6VGVhbTE=",
                                                    "type": "string"
                                                  },
                                                  "permission": {
                                                    "description": "Permission that the team will have for its repositories",
                                                    "example": "admin",
                                                    "type": "string"
                                                  },
                                                  "privacy": {
                                                    "description": "The level of privacy this team should have",
                                                    "example": "closed",
                                                    "type": "string"
                                                  },
                                                  "repositories_url": {
                                                    "example": "https://api.github.com/organizations/1/team/1/repos",
                                                    "format": "uri",
                                                    "type": "string"
                                                  },
                                                  "slug": {
                                                    "example": "justice-league",
                                                    "type": "string"
                                                  },
                                                  "url": {
                                                    "description": "URL for the team",
                                                    "example": "https://api.github.com/organizations/1/team/1",
                                                    "format": "uri",
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "id",
                                                  "node_id",
                                                  "url",
                                                  "members_url",
                                                  "name",
                                                  "description",
                                                  "permission",
                                                  "html_url",
                                                  "repositories_url",
                                                  "slug"
                                                ],
                                                "title": "Team Simple",
                                                "type": "object"
                                              }
                                            ],
                                            "nullable": true
                                          },
                                          "permission": { "type": "string" },
                                          "permissions": {
                                            "properties": {
                                              "admin": { "type": "boolean" },
                                              "maintain": { "type": "boolean" },
                                              "pull": { "type": "boolean" },
                                              "push": { "type": "boolean" },
                                              "triage": { "type": "boolean" }
                                            },
                                            "required": [
                                              "pull",
                                              "triage",
                                              "push",
                                              "maintain",
                                              "admin"
                                            ],
                                            "type": "object"
                                          },
                                          "privacy": { "type": "string" },
                                          "repositories_url": {
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "slug": { "type": "string" },
                                          "url": {
                                            "format": "uri",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "node_id",
                                          "url",
                                          "members_url",
                                          "name",
                                          "description",
                                          "permission",
                                          "html_url",
                                          "repositories_url",
                                          "slug",
                                          "parent"
                                        ],
                                        "title": "Team",
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "teams_url": {
                                      "example": "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams\"",
                                      "type": "string"
                                    },
                                    "url": {
                                      "example": "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions\"",
                                      "type": "string"
                                    },
                                    "users": {
                                      "description": "The list of users with review dismissal access.",
                                      "items": {
                                        "description": "Simple User",
                                        "nullable": true,
                                        "properties": {
                                          "avatar_url": {
                                            "example": "https://github.com/images/error/octocat_happy.gif",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "email": {
                                            "nullable": true,
                                            "type": "string"
                                          },
                                          "events_url": {
                                            "example": "https://api.github.com/users/octocat/events{/privacy}",
                                            "type": "string"
                                          },
                                          "followers_url": {
                                            "example": "https://api.github.com/users/octocat/followers",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "following_url": {
                                            "example": "https://api.github.com/users/octocat/following{/other_user}",
                                            "type": "string"
                                          },
                                          "gists_url": {
                                            "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                            "type": "string"
                                          },
                                          "gravatar_id": {
                                            "example": "41d064eb2195891e12d0413f63227ea7",
                                            "nullable": true,
                                            "type": "string"
                                          },
                                          "html_url": {
                                            "example": "https://github.com/octocat",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "id": {
                                            "example": 1,
                                            "type": "integer"
                                          },
                                          "login": {
                                            "example": "octocat",
                                            "type": "string"
                                          },
                                          "name": {
                                            "nullable": true,
                                            "type": "string"
                                          },
                                          "node_id": {
                                            "example": "MDQ6VXNlcjE=",
                                            "type": "string"
                                          },
                                          "organizations_url": {
                                            "example": "https://api.github.com/users/octocat/orgs",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "received_events_url": {
                                            "example": "https://api.github.com/users/octocat/received_events",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "repos_url": {
                                            "example": "https://api.github.com/users/octocat/repos",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "site_admin": { "type": "boolean" },
                                          "starred_at": {
                                            "example": "\"2020-07-09T00:17:55Z\"",
                                            "type": "string"
                                          },
                                          "starred_url": {
                                            "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                            "type": "string"
                                          },
                                          "subscriptions_url": {
                                            "example": "https://api.github.com/users/octocat/subscriptions",
                                            "format": "uri",
                                            "type": "string"
                                          },
                                          "type": {
                                            "example": "User",
                                            "type": "string"
                                          },
                                          "url": {
                                            "example": "https://api.github.com/users/octocat",
                                            "format": "uri",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "avatar_url",
                                          "events_url",
                                          "followers_url",
                                          "following_url",
                                          "gists_url",
                                          "gravatar_id",
                                          "html_url",
                                          "id",
                                          "node_id",
                                          "login",
                                          "organizations_url",
                                          "received_events_url",
                                          "repos_url",
                                          "site_admin",
                                          "starred_url",
                                          "subscriptions_url",
                                          "type",
                                          "url"
                                        ],
                                        "title": "Simple User",
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "users_url": {
                                      "example": "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users\"",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "require_code_owner_reviews": {
                                  "example": true,
                                  "type": "boolean"
                                },
                                "required_approving_review_count": {
                                  "example": 2,
                                  "maximum": 6,
                                  "minimum": 1,
                                  "type": "integer"
                                },
                                "url": {
                                  "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
                                  "format": "uri",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "dismiss_stale_reviews",
                                "require_code_owner_reviews"
                              ],
                              "title": "Protected Branch Pull Request Review",
                              "type": "object"
                            },
                            "required_signatures": {
                              "properties": {
                                "enabled": {
                                  "example": true,
                                  "type": "boolean"
                                },
                                "url": {
                                  "example": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures",
                                  "format": "uri",
                                  "type": "string"
                                }
                              },
                              "required": ["url", "enabled"],
                              "type": "object"
                            },
                            "required_status_checks": {
                              "properties": {
                                "contexts": {
                                  "items": { "type": "string" },
                                  "type": "array"
                                },
                                "contexts_url": { "type": "string" },
                                "enforcement_level": { "type": "string" },
                                "strict": { "type": "boolean" },
                                "url": { "type": "string" }
                              },
                              "required": ["contexts"],
                              "type": "object"
                            },
                            "restrictions": {
                              "description": "Branch Restriction Policy",
                              "properties": {
                                "apps": {
                                  "items": {
                                    "properties": {
                                      "created_at": { "type": "string" },
                                      "description": { "type": "string" },
                                      "events": {
                                        "items": { "type": "string" },
                                        "type": "array"
                                      },
                                      "external_url": { "type": "string" },
                                      "html_url": { "type": "string" },
                                      "id": { "type": "integer" },
                                      "name": { "type": "string" },
                                      "node_id": { "type": "string" },
                                      "owner": {
                                        "properties": {
                                          "avatar_url": { "type": "string" },
                                          "description": { "type": "string" },
                                          "events_url": { "type": "string" },
                                          "followers_url": {
                                            "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers\"",
                                            "type": "string"
                                          },
                                          "following_url": {
                                            "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}\"",
                                            "type": "string"
                                          },
                                          "gists_url": {
                                            "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}\"",
                                            "type": "string"
                                          },
                                          "gravatar_id": {
                                            "example": "\"\"",
                                            "type": "string"
                                          },
                                          "hooks_url": { "type": "string" },
                                          "html_url": {
                                            "example": "\"https://github.com/testorg-ea8ec76d71c3af4b\"",
                                            "type": "string"
                                          },
                                          "id": { "type": "integer" },
                                          "issues_url": { "type": "string" },
                                          "login": { "type": "string" },
                                          "members_url": { "type": "string" },
                                          "node_id": { "type": "string" },
                                          "organizations_url": {
                                            "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs\"",
                                            "type": "string"
                                          },
                                          "public_members_url": {
                                            "type": "string"
                                          },
                                          "received_events_url": {
                                            "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events\"",
                                            "type": "string"
                                          },
                                          "repos_url": { "type": "string" },
                                          "site_admin": {
                                            "example": false,
                                            "type": "boolean"
                                          },
                                          "starred_url": {
                                            "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}\"",
                                            "type": "string"
                                          },
                                          "subscriptions_url": {
                                            "example": "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions\"",
                                            "type": "string"
                                          },
                                          "type": {
                                            "example": "\"Organization\"",
                                            "type": "string"
                                          },
                                          "url": { "type": "string" }
                                        },
                                        "type": "object"
                                      },
                                      "permissions": {
                                        "properties": {
                                          "contents": { "type": "string" },
                                          "issues": { "type": "string" },
                                          "metadata": { "type": "string" },
                                          "single_file": { "type": "string" }
                                        },
                                        "type": "object"
                                      },
                                      "slug": { "type": "string" },
                                      "updated_at": { "type": "string" }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "apps_url": {
                                  "format": "uri",
                                  "type": "string"
                                },
                                "teams": {
                                  "items": {
                                    "properties": {
                                      "description": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "html_url": { "type": "string" },
                                      "id": { "type": "integer" },
                                      "members_url": { "type": "string" },
                                      "name": { "type": "string" },
                                      "node_id": { "type": "string" },
                                      "parent": {
                                        "nullable": true,
                                        "type": "string"
                                      },
                                      "permission": { "type": "string" },
                                      "privacy": { "type": "string" },
                                      "repositories_url": { "type": "string" },
                                      "slug": { "type": "string" },
                                      "url": { "type": "string" }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "teams_url": {
                                  "format": "uri",
                                  "type": "string"
                                },
                                "url": { "format": "uri", "type": "string" },
                                "users": {
                                  "items": {
                                    "properties": {
                                      "avatar_url": { "type": "string" },
                                      "events_url": { "type": "string" },
                                      "followers_url": { "type": "string" },
                                      "following_url": { "type": "string" },
                                      "gists_url": { "type": "string" },
                                      "gravatar_id": { "type": "string" },
                                      "html_url": { "type": "string" },
                                      "id": { "type": "integer" },
                                      "login": { "type": "string" },
                                      "node_id": { "type": "string" },
                                      "organizations_url": { "type": "string" },
                                      "received_events_url": {
                                        "type": "string"
                                      },
                                      "repos_url": { "type": "string" },
                                      "site_admin": { "type": "boolean" },
                                      "starred_url": { "type": "string" },
                                      "subscriptions_url": { "type": "string" },
                                      "type": { "type": "string" },
                                      "url": { "type": "string" }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "users_url": {
                                  "format": "uri",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "url",
                                "users_url",
                                "teams_url",
                                "apps_url",
                                "users",
                                "teams",
                                "apps"
                              ],
                              "title": "Branch Restriction Policy",
                              "type": "object"
                            },
                            "url": { "type": "string" }
                          },
                          "title": "Branch Protection",
                          "type": "object"
                        },
                        "protection_url": { "format": "uri", "type": "string" },
                        "required_approving_review_count": {
                          "example": 1,
                          "type": "integer"
                        }
                      },
                      "required": [
                        "name",
                        "commit",
                        "_links",
                        "protection",
                        "protected",
                        "protection_url"
                      ],
                      "title": "Branch With Protection",
                      "type": "object"
                    }
                  }
                },
                "description": "Response"
              },
              "403": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Basic Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" },
                        "status": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Forbidden"
              },
              "404": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Basic Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" },
                        "status": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Resource not found"
              },
              "422": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Validation Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "errors": {
                          "items": {
                            "properties": {
                              "code": { "type": "string" },
                              "field": { "type": "string" },
                              "index": { "type": "integer" },
                              "message": { "type": "string" },
                              "resource": { "type": "string" },
                              "value": {
                                "oneOf": [
                                  { "nullable": true, "type": "string" },
                                  { "nullable": true, "type": "integer" },
                                  {
                                    "items": { "type": "string" },
                                    "nullable": true,
                                    "type": "array"
                                  }
                                ]
                              }
                            },
                            "required": ["code"],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "message": { "type": "string" }
                      },
                      "required": ["message", "documentation_url"],
                      "title": "Validation Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Validation failed"
              }
            },
            "summary": "Rename a branch",
            "tags": ["repos"],
            "x-github": {
              "category": "repos",
              "enabledForGitHubApps": true,
              "githubCloudOnly": false,
              "previews": [],
              "subcategory": "branches"
            },
            "x-octokit": {}
          }
        }
      ],
      [
        "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
        {
          "get": {
            "deprecated": null,
            "description": "Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.",
            "externalDocs": {
              "description": "API method documentation",
              "url": "https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert"
            },
            "operationId": "code-scanning/list-alert-instances",
            "parameters": [
              {
                "in": "path",
                "name": "owner",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "in": "path",
                "name": "repo",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                "in": "path",
                "name": "alert_number",
                "required": true,
                "schema": {
                  "description": "The security alert number.",
                  "nullable": false,
                  "readOnly": true,
                  "type": "integer"
                },
                "style": "simple"
              },
              {
                "allowReserved": null,
                "description": "Page number of the results to fetch.",
                "in": "query",
                "name": "page",
                "required": false,
                "schema": { "default": 1, "type": "integer" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "Results per page (max 100)",
                "in": "query",
                "name": "per_page",
                "required": false,
                "schema": { "default": 30, "type": "integer" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.",
                "in": "query",
                "name": "ref",
                "required": false,
                "schema": {
                  "description": "The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/pull/<number>/merge`, or `refs/pull/<number>/head`.",
                  "type": "string"
                },
                "style": "form"
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "examples": {
                      "default": {
                        "value": [
                          {
                            "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
                            "classifications": ["library"],
                            "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
                            "environment": "",
                            "location": {
                              "end_column": 18,
                              "end_line": 917,
                              "path": "lib/ab12-gen.js",
                              "start_column": 7,
                              "start_line": 917
                            },
                            "message": {
                              "text": "This path depends on a user-provided value."
                            },
                            "ref": "refs/heads/main",
                            "state": "open"
                          },
                          {
                            "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
                            "classifications": ["source"],
                            "commit_sha": "b09da05606e27f463a2b49287684b4ae777092f2",
                            "environment": "",
                            "location": {
                              "end_column": 50,
                              "end_line": 2,
                              "path": "app/script.js",
                              "start_column": 10,
                              "start_line": 2
                            },
                            "message": {
                              "text": "This suffix check is missing a length comparison to correctly handle lastIndexOf returning -1."
                            },
                            "ref": "refs/pull/3740/merge",
                            "state": "fixed"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "items": {
                        "properties": {
                          "analysis_key": {
                            "description": "Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.",
                            "type": "string"
                          },
                          "classifications": {
                            "description": "Classifications that have been applied to the file that triggered the alert.\nFor example identifying it as documentation, or a generated file.",
                            "items": {
                              "description": "A classification of the file. For example to identify it as generated.",
                              "enum": [
                                "source",
                                "generated",
                                "test",
                                "library"
                              ],
                              "nullable": true,
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "commit_sha": { "type": "string" },
                          "environment": {
                            "description": "Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.",
                            "type": "string"
                          },
                          "html_url": { "type": "string" },
                          "location": {
                            "description": "Describe a region within a file for the alert.",
                            "properties": {
                              "end_column": { "type": "integer" },
                              "end_line": { "type": "integer" },
                              "path": { "type": "string" },
                              "start_column": { "type": "integer" },
                              "start_line": { "type": "integer" }
                            },
                            "type": "object"
                          },
                          "message": {
                            "properties": { "text": { "type": "string" } },
                            "type": "object"
                          },
                          "ref": {
                            "description": "The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/pull/<number>/merge`, or `refs/pull/<number>/head`.",
                            "type": "string"
                          },
                          "state": {
                            "description": "State of a code scanning alert.",
                            "enum": ["open", "closed", "dismissed", "fixed"],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "description": "Response"
              },
              "403": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Basic Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" },
                        "status": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Response if GitHub Advanced Security is not enabled for this repository"
              },
              "404": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Basic Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" },
                        "status": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Resource not found"
              },
              "503": {
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "code": { "type": "string" },
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" }
                      },
                      "type": "object"
                    }
                  }
                },
                "description": "Service unavailable"
              }
            },
            "summary": "List instances of a code scanning alert",
            "tags": ["code-scanning"],
            "x-github": {
              "category": "code-scanning",
              "enabledForGitHubApps": true,
              "githubCloudOnly": false,
              "previews": [],
              "subcategory": null
            },
            "x-octokit": {
              "changes": [
                {
                  "before": {
                    "operationId": "code-scanning/list-alerts-instances"
                  },
                  "date": "2021-04-30",
                  "type": "OPERATION"
                }
              ]
            }
          }
        }
      ],
      [
        "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
        {
          "delete": {
            "deprecated": null,
            "description": "Deletes a specified code scanning analysis from a repository. For\nprivate repositories, you must use an access token with the `repo` scope. For public repositories,\nyou must use an access token with `public_repo` and `repo:security_events` scopes.\nGitHub Apps must have the `security_events` write permission to use this endpoint.\n\nYou can delete one analysis at a time.\nTo delete a series of analyses, start with the most recent analysis and work backwards.\nConceptually, the process is similar to the undo function in a text editor.\n\n**Note**: The ability to delete analyses was introduced in GitHub Enterprise Server 3.1.\nYou can delete analyses that were generated prior to installing this release,\nhowever, if you do so, you will lose information about fixed alerts for all such analyses,\nfor the relevant code scanning tool.\nWe recommend that you only delete analyses that were generated with earlier releases\nif you don't need the details of fixed alerts from pre-3.1 releases.\n\nWhen you list the analyses for a repository,\none or more will be identified as deletable in the response:\n\n```\n\"deletable\": true\n```\n\nAn analysis is deletable when it's the most recent in a set of analyses.\nTypically, a repository will have multiple sets of analyses\nfor each enabled code scanning tool,\nwhere a set is determined by a unique combination of analysis values:\n\n* `ref`\n* `tool`\n* `analysis_key`\n* `environment`\n\nIf you attempt to delete an analysis that is not the most recent in a set,\nyou'll get a 400 response with the message:\n\n```\nAnalysis specified is not deletable.\n```\n\nThe response from a successful `DELETE` operation provides you with\ntwo alternative URLs for deleting the next analysis in the set\n(see the example default response below).\nUse the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis\nin the set. This is a useful option if you want to preserve at least one analysis\nfor the specified tool in your repository.\nUse the `confirm_delete_url` URL if you are content to remove all analyses for a tool.\nWhen you delete the last analysis in a set the value of `next_analysis_url` and `confirm_delete_url`\nin the 200 response is `null`.\n\nAs an example of the deletion process,\nlet's imagine that you added a workflow that configured a particular code scanning tool\nto analyze the code in a repository. This tool has added 15 analyses:\n10 on the default branch, and another 5 on a topic branch.\nYou therefore have two separate sets of analyses for this tool.\nYou've now decided that you want to remove all of the analyses for the tool.\nTo do this you must make 15 separate deletion requests.\nTo start, you must find the deletable analysis for one of the sets,\nstep through deleting the analyses in that set,\nand then repeat the process for the second set.\nThe procedure therefore consists of a nested loop:\n\n**Outer loop**:\n* List the analyses for the repository, filtered by tool.\n* Parse this list to find a deletable analysis. If found:\n\n  **Inner loop**:\n  * Delete the identified analysis.\n  * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.\n\nThe above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.",
            "externalDocs": {
              "description": "API method documentation",
              "url": "https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository"
            },
            "operationId": "code-scanning/delete-analysis",
            "parameters": [
              {
                "in": "path",
                "name": "owner",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "in": "path",
                "name": "repo",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "description": "The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.",
                "in": "path",
                "name": "analysis_id",
                "required": true,
                "schema": { "type": "integer" },
                "style": "simple"
              },
              {
                "allowReserved": null,
                "description": "Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`",
                "in": "query",
                "name": "confirm_delete",
                "required": false,
                "schema": { "nullable": true, "type": "string" },
                "style": "form"
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "examples": {
                      "default-response": {
                        "summary": "Default response",
                        "value": {
                          "confirm_delete_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/41?confirm_delete",
                          "next_analysis_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/41"
                        }
                      }
                    },
                    "schema": {
                      "description": "Successful deletion of a code scanning analysis",
                      "properties": {
                        "confirm_delete_url": {
                          "description": "Next deletable analysis in chain, with last analysis deletion confirmation",
                          "format": "uri",
                          "nullable": true,
                          "readOnly": true,
                          "type": "string"
                        },
                        "next_analysis_url": {
                          "description": "Next deletable analysis in chain, without last analysis deletion confirmation",
                          "format": "uri",
                          "nullable": true,
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "required": ["next_analysis_url", "confirm_delete_url"],
                      "title": "Analysis deletion",
                      "type": "object"
                    }
                  }
                },
                "description": "Response"
              },
              "400": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Basic Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" },
                        "status": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    }
                  },
                  "application/scim+json": {
                    "schema": {
                      "description": "Scim Error",
                      "properties": {
                        "detail": { "nullable": true, "type": "string" },
                        "documentation_url": {
                          "nullable": true,
                          "type": "string"
                        },
                        "message": { "nullable": true, "type": "string" },
                        "schemas": {
                          "items": { "type": "string" },
                          "type": "array"
                        },
                        "scimType": { "nullable": true, "type": "string" },
                        "status": { "type": "integer" }
                      },
                      "title": "Scim Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Bad Request"
              },
              "403": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Basic Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" },
                        "status": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Response if the repository is archived or if github advanced security is not enabled for this repository"
              },
              "404": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Basic Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" },
                        "status": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Resource not found"
              },
              "503": {
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "code": { "type": "string" },
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" }
                      },
                      "type": "object"
                    }
                  }
                },
                "description": "Service unavailable"
              }
            },
            "summary": "Delete a code scanning analysis from a repository",
            "tags": ["code-scanning"],
            "x-github": {
              "category": "code-scanning",
              "enabledForGitHubApps": true,
              "githubCloudOnly": false,
              "previews": []
            },
            "x-octokit": {}
          },
          "get": {
            "deprecated": null,
            "description": "Gets a specified code scanning analysis for a repository.\nYou must use an access token with the `security_events` scope to use this endpoint.\nGitHub Apps must have the `security_events` read permission to use this endpoint.\n\nThe default JSON response contains fields that describe the analysis.\nThis includes the Git reference and commit SHA to which the analysis relates,\nthe datetime of the analysis, the name of the code scanning tool,\nand the number of alerts.\n\nThe `rules_count` field in the default response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\nIf you use the Accept header `application/sarif+json`,\nthe response contains the analysis data that was uploaded.\nThis is formatted as\n[SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).\n\n**Deprecation notice**:\nThe `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.",
            "externalDocs": {
              "description": "API method documentation",
              "url": "https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository"
            },
            "operationId": "code-scanning/get-analysis",
            "parameters": [
              {
                "in": "path",
                "name": "owner",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "in": "path",
                "name": "repo",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "description": "The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.",
                "in": "path",
                "name": "analysis_id",
                "required": true,
                "schema": { "type": "integer" },
                "style": "simple"
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "examples": {
                      "response": {
                        "summary": "Default response",
                        "value": {
                          "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
                          "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript",
                          "commit_sha": "c18c69115654ff0166991962832dc2bd7756e655",
                          "created_at": "2021-01-13T11:55:49Z",
                          "deletable": true,
                          "environment": "{\"language\":\"javascript\"}",
                          "error": "",
                          "id": 3602840,
                          "ref": "refs/heads/main",
                          "results_count": 3,
                          "rules_count": 67,
                          "sarif_id": "47177e22-5596-11eb-80a1-c1e54ef945c6",
                          "tool": {
                            "guid": null,
                            "name": "CodeQL",
                            "version": "2.4.0"
                          },
                          "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/201",
                          "warning": ""
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "analysis_key": {
                          "description": "Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.",
                          "type": "string"
                        },
                        "category": {
                          "description": "Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.",
                          "type": "string"
                        },
                        "commit_sha": {
                          "description": "The SHA of the commit to which the analysis you are uploading relates.",
                          "maxLength": 40,
                          "minLength": 40,
                          "pattern": "^[0-9a-fA-F]+$",
                          "type": "string"
                        },
                        "created_at": {
                          "description": "The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
                          "format": "date-time",
                          "nullable": false,
                          "readOnly": true,
                          "type": "string"
                        },
                        "deletable": { "type": "boolean" },
                        "environment": {
                          "description": "Identifies the variable values associated with the environment in which this analysis was performed.",
                          "type": "string"
                        },
                        "error": {
                          "example": "error reading field xyz",
                          "type": "string"
                        },
                        "id": {
                          "description": "Unique identifier for this analysis.",
                          "type": "integer"
                        },
                        "ref": {
                          "description": "The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/pull/<number>/merge`, or `refs/pull/<number>/head`.",
                          "type": "string"
                        },
                        "results_count": {
                          "description": "The total number of results in the analysis.",
                          "type": "integer"
                        },
                        "rules_count": {
                          "description": "The total number of rules used in the analysis.",
                          "type": "integer"
                        },
                        "sarif_id": {
                          "description": "An identifier for the upload.",
                          "example": "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53",
                          "nullable": false,
                          "type": "string"
                        },
                        "tool": {
                          "properties": {
                            "guid": {
                              "description": "The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.",
                              "nullable": true,
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the tool used to generate the code scanning analysis.",
                              "type": "string"
                            },
                            "version": {
                              "description": "The version of the tool used to generate the code scanning analysis.",
                              "nullable": true,
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "tool_name": { "type": "string" },
                        "url": {
                          "description": "The REST API URL of the analysis resource.",
                          "format": "uri",
                          "nullable": false,
                          "readOnly": true,
                          "type": "string"
                        },
                        "warning": {
                          "description": "Warning generated when processing the analysis",
                          "example": "123 results were ignored",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ref",
                        "commit_sha",
                        "analysis_key",
                        "environment",
                        "error",
                        "created_at",
                        "results_count",
                        "rules_count",
                        "id",
                        "url",
                        "sarif_id",
                        "tool",
                        "deletable",
                        "warning"
                      ],
                      "type": "object"
                    }
                  },
                  "application/json+sarif": { "schema": { "type": "string" } }
                },
                "description": "Response"
              },
              "403": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Basic Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" },
                        "status": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Response if GitHub Advanced Security is not enabled for this repository"
              },
              "404": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Basic Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" },
                        "status": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Resource not found"
              },
              "503": {
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "code": { "type": "string" },
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" }
                      },
                      "type": "object"
                    }
                  }
                },
                "description": "Service unavailable"
              }
            },
            "summary": "Get a code scanning analysis for a repository",
            "tags": ["code-scanning"],
            "x-github": {
              "category": "code-scanning",
              "enabledForGitHubApps": true,
              "githubCloudOnly": false,
              "previews": []
            },
            "x-octokit": {}
          }
        }
      ],
      [
        "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}",
        {
          "get": {
            "deprecated": null,
            "description": "Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \"[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository).\" You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.",
            "externalDocs": {
              "description": "API method documentation",
              "url": "https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository"
            },
            "operationId": "code-scanning/get-sarif",
            "parameters": [
              {
                "in": "path",
                "name": "owner",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "in": "path",
                "name": "repo",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "description": "The SARIF ID obtained after uploading.",
                "in": "path",
                "name": "sarif_id",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "examples": {
                      "default": {
                        "summary": "Default response",
                        "value": {
                          "analyses_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses?sarif_id=47177e22-5596-11eb-80a1-c1e54ef945c6",
                          "processing_status": "complete"
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "analyses_url": {
                          "description": "The REST API URL for getting the analyses associated with the upload.",
                          "format": "uri",
                          "nullable": true,
                          "readOnly": true,
                          "type": "string"
                        },
                        "processing_status": {
                          "description": "`pending` files have not yet been processed, while `complete` means all results in the SARIF have been stored.",
                          "enum": ["pending", "complete"],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "description": "Response"
              },
              "403": {
                "content": {
                  "application/json": {
                    "schema": {
                      "description": "Basic Error",
                      "properties": {
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" },
                        "status": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "title": "Basic Error",
                      "type": "object"
                    }
                  }
                },
                "description": "Response if GitHub Advanced Security is not enabled for this repository"
              },
              "404": {
                "description": "Not Found if the sarif id does not match any upload"
              },
              "503": {
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "code": { "type": "string" },
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" }
                      },
                      "type": "object"
                    }
                  }
                },
                "description": "Service unavailable"
              }
            },
            "summary": "Get information about a SARIF upload",
            "tags": ["code-scanning"],
            "x-github": {
              "category": "code-scanning",
              "enabledForGitHubApps": true,
              "githubCloudOnly": false,
              "previews": []
            },
            "x-octokit": {}
          }
        }
      ],
      [
        "/repos/{owner}/{repo}/secret-scanning/alerts",
        {
          "get": {
            "deprecated": null,
            "description": "Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.",
            "externalDocs": {
              "description": "API method documentation",
              "url": "https://docs.github.com/enterprise-server@3.1/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository"
            },
            "operationId": "secret-scanning/list-alerts-for-repo",
            "parameters": [
              {
                "in": "path",
                "name": "owner",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "in": "path",
                "name": "repo",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "allowReserved": null,
                "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state.",
                "in": "query",
                "name": "state",
                "required": false,
                "schema": { "enum": ["open", "resolved"], "type": "string" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "A comma separated list of secret types to return. By default all secret types are returned. See \"[About secret scanning for private repositories](https://docs.github.com/enterprise-server@3.1/code-security/secret-security/about-secret-scanning#about-secret-scanning-for-private-repositories)\" for a complete list of secret types (API slug).",
                "in": "query",
                "name": "secret_type",
                "required": false,
                "schema": { "type": "string" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "Page number of the results to fetch.",
                "in": "query",
                "name": "page",
                "required": false,
                "schema": { "default": 1, "type": "integer" },
                "style": "form"
              },
              {
                "allowReserved": null,
                "description": "Results per page (max 100)",
                "in": "query",
                "name": "per_page",
                "required": false,
                "schema": { "default": 30, "type": "integer" },
                "style": "form"
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "examples": {
                      "default": {
                        "value": [
                          {
                            "created_at": "2020-11-06T18:48:51Z",
                            "html_url": "https://github.com/owner/private-repo/security/secret-scanning/2",
                            "number": 2,
                            "resolution": "false_positive",
                            "resolved_at": "2020-11-07T02:47:13Z",
                            "resolved_by": {
                              "avatar_url": "https://alambic.github.com/avatars/u/2?",
                              "events_url": "https://api.github.com/users/monalisa/events{/privacy}",
                              "followers_url": "https://api.github.com/users/monalisa/followers",
                              "following_url": "https://api.github.com/users/monalisa/following{/other_user}",
                              "gists_url": "https://api.github.com/users/monalisa/gists{/gist_id}",
                              "gravatar_id": "",
                              "html_url": "https://github.com/monalisa",
                              "id": 2,
                              "login": "monalisa",
                              "node_id": "MDQ6VXNlcjI=",
                              "organizations_url": "https://api.github.com/users/monalisa/orgs",
                              "received_events_url": "https://api.github.com/users/monalisa/received_events",
                              "repos_url": "https://api.github.com/users/monalisa/repos",
                              "site_admin": true,
                              "starred_url": "https://api.github.com/users/monalisa/starred{/owner}{/repo}",
                              "subscriptions_url": "https://api.github.com/users/monalisa/subscriptions",
                              "type": "User",
                              "url": "https://api.github.com/users/monalisa"
                            },
                            "secret": "aio_XXXXXXXXXXXXXXXXXXXXXXXXXXXX",
                            "secret_type": "adafruit_io_key",
                            "state": "resolved",
                            "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/2"
                          },
                          {
                            "created_at": "2020-11-06T18:18:30Z",
                            "html_url": "https://github.com/owner/repo/security/secret-scanning/1",
                            "number": 1,
                            "resolution": null,
                            "resolved_at": null,
                            "resolved_by": null,
                            "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2",
                            "secret_type": "mailchimp_api_key",
                            "state": "open",
                            "url": "https://api.github.com/repos/owner/repo/secret-scanning/alerts/1"
                          }
                        ]
                      }
                    },
                    "schema": {
                      "items": {
                        "properties": {
                          "created_at": {
                            "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
                            "format": "date-time",
                            "nullable": false,
                            "readOnly": true,
                            "type": "string"
                          },
                          "html_url": {
                            "description": "The GitHub URL of the alert resource.",
                            "format": "uri",
                            "nullable": false,
                            "readOnly": true,
                            "type": "string"
                          },
                          "number": {
                            "description": "The security alert number.",
                            "nullable": false,
                            "readOnly": true,
                            "type": "integer"
                          },
                          "resolution": {
                            "description": "**Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.",
                            "enum": [
                              null,
                              "false_positive",
                              "wont_fix",
                              "revoked",
                              "used_in_tests"
                            ],
                            "nullable": true,
                            "type": "string"
                          },
                          "resolved_at": {
                            "description": "The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
                            "format": "date-time",
                            "nullable": true,
                            "type": "string"
                          },
                          "resolved_by": {
                            "description": "Simple User",
                            "nullable": true,
                            "properties": {
                              "avatar_url": {
                                "example": "https://github.com/images/error/octocat_happy.gif",
                                "format": "uri",
                                "type": "string"
                              },
                              "email": { "nullable": true, "type": "string" },
                              "events_url": {
                                "example": "https://api.github.com/users/octocat/events{/privacy}",
                                "type": "string"
                              },
                              "followers_url": {
                                "example": "https://api.github.com/users/octocat/followers",
                                "format": "uri",
                                "type": "string"
                              },
                              "following_url": {
                                "example": "https://api.github.com/users/octocat/following{/other_user}",
                                "type": "string"
                              },
                              "gists_url": {
                                "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                "type": "string"
                              },
                              "gravatar_id": {
                                "example": "41d064eb2195891e12d0413f63227ea7",
                                "nullable": true,
                                "type": "string"
                              },
                              "html_url": {
                                "example": "https://github.com/octocat",
                                "format": "uri",
                                "type": "string"
                              },
                              "id": { "example": 1, "type": "integer" },
                              "login": {
                                "example": "octocat",
                                "type": "string"
                              },
                              "name": { "nullable": true, "type": "string" },
                              "node_id": {
                                "example": "MDQ6VXNlcjE=",
                                "type": "string"
                              },
                              "organizations_url": {
                                "example": "https://api.github.com/users/octocat/orgs",
                                "format": "uri",
                                "type": "string"
                              },
                              "received_events_url": {
                                "example": "https://api.github.com/users/octocat/received_events",
                                "format": "uri",
                                "type": "string"
                              },
                              "repos_url": {
                                "example": "https://api.github.com/users/octocat/repos",
                                "format": "uri",
                                "type": "string"
                              },
                              "site_admin": { "type": "boolean" },
                              "starred_at": {
                                "example": "\"2020-07-09T00:17:55Z\"",
                                "type": "string"
                              },
                              "starred_url": {
                                "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                "type": "string"
                              },
                              "subscriptions_url": {
                                "example": "https://api.github.com/users/octocat/subscriptions",
                                "format": "uri",
                                "type": "string"
                              },
                              "type": { "example": "User", "type": "string" },
                              "url": {
                                "example": "https://api.github.com/users/octocat",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "avatar_url",
                              "events_url",
                              "followers_url",
                              "following_url",
                              "gists_url",
                              "gravatar_id",
                              "html_url",
                              "id",
                              "node_id",
                              "login",
                              "organizations_url",
                              "received_events_url",
                              "repos_url",
                              "site_admin",
                              "starred_url",
                              "subscriptions_url",
                              "type",
                              "url"
                            ],
                            "title": "Simple User",
                            "type": "object"
                          },
                          "secret": {
                            "description": "The secret that was detected.",
                            "type": "string"
                          },
                          "secret_type": {
                            "description": "The type of secret that secret scanning detected.",
                            "type": "string"
                          },
                          "state": {
                            "description": "Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.",
                            "enum": ["open", "resolved"],
                            "type": "string"
                          },
                          "url": {
                            "description": "The REST API URL of the alert resource.",
                            "format": "uri",
                            "nullable": false,
                            "readOnly": true,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  }
                },
                "description": "Response"
              },
              "404": {
                "description": "Repository is public or secret scanning is disabled for the repository"
              },
              "503": {
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "code": { "type": "string" },
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" }
                      },
                      "type": "object"
                    }
                  }
                },
                "description": "Service unavailable"
              }
            },
            "summary": "List secret scanning alerts for a repository",
            "tags": ["secret-scanning"],
            "x-github": {
              "category": "secret-scanning",
              "enabledForGitHubApps": true,
              "githubCloudOnly": false,
              "previews": [],
              "subcategory": null
            },
            "x-octokit": {}
          }
        }
      ],
      [
        "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        {
          "get": {
            "deprecated": null,
            "description": "Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.",
            "externalDocs": {
              "description": "API method documentation",
              "url": "https://docs.github.com/enterprise-server@3.1/rest/reference/secret-scanning#get-a-secret-scanning-alert"
            },
            "operationId": "secret-scanning/get-alert",
            "parameters": [
              {
                "in": "path",
                "name": "owner",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "in": "path",
                "name": "repo",
                "required": true,
                "schema": { "type": "string" },
                "style": "simple"
              },
              {
                "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
                "in": "path",
                "name": "alert_number",
                "required": true,
                "schema": {
                  "description": "The security alert number.",
                  "nullable": false,
                  "readOnly": true,
                  "type": "integer"
                },
                "style": "simple"
              }
            ],
            "responses": {
              "200": {
                "content": {
                  "application/json": {
                    "examples": {
                      "default": {
                        "value": {
                          "created_at": "2020-11-06T18:18:30Z",
                          "html_url": "https://github.com/owner/private-repo/security/secret-scanning/42",
                          "number": 42,
                          "resolution": null,
                          "resolved_at": null,
                          "resolved_by": null,
                          "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2",
                          "secret_type": "mailchimp_api_key",
                          "state": "open",
                          "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42"
                        }
                      }
                    },
                    "schema": {
                      "properties": {
                        "created_at": {
                          "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
                          "format": "date-time",
                          "nullable": false,
                          "readOnly": true,
                          "type": "string"
                        },
                        "html_url": {
                          "description": "The GitHub URL of the alert resource.",
                          "format": "uri",
                          "nullable": false,
                          "readOnly": true,
                          "type": "string"
                        },
                        "number": {
                          "description": "The security alert number.",
                          "nullable": false,
                          "readOnly": true,
                          "type": "integer"
                        },
                        "resolution": {
                          "description": "**Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.",
                          "enum": [
                            null,
                            "false_positive",
                            "wont_fix",
                            "revoked",
                            "used_in_tests"
                          ],
                          "nullable": true,
                          "type": "string"
                        },
                        "resolved_at": {
                          "description": "The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
                          "format": "date-time",
                          "nullable": true,
                          "type": "string"
                        },
                        "resolved_by": {
                          "description": "Simple User",
                          "nullable": true,
                          "properties": {
                            "avatar_url": {
                              "example": "https://github.com/images/error/octocat_happy.gif",
                              "format": "uri",
                              "type": "string"
                            },
                            "email": { "nullable": true, "type": "string" },
                            "events_url": {
                              "example": "https://api.github.com/users/octocat/events{/privacy}",
                              "type": "string"
                            },
                            "followers_url": {
                              "example": "https://api.github.com/users/octocat/followers",
                              "format": "uri",
                              "type": "string"
                            },
                            "following_url": {
                              "example": "https://api.github.com/users/octocat/following{/other_user}",
                              "type": "string"
                            },
                            "gists_url": {
                              "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                              "type": "string"
                            },
                            "gravatar_id": {
                              "example": "41d064eb2195891e12d0413f63227ea7",
                              "nullable": true,
                              "type": "string"
                            },
                            "html_url": {
                              "example": "https://github.com/octocat",
                              "format": "uri",
                              "type": "string"
                            },
                            "id": { "example": 1, "type": "integer" },
                            "login": { "example": "octocat", "type": "string" },
                            "name": { "nullable": true, "type": "string" },
                            "node_id": {
                              "example": "MDQ6VXNlcjE=",
                              "type": "string"
                            },
                            "organizations_url": {
                              "example": "https://api.github.com/users/octocat/orgs",
                              "format": "uri",
                              "type": "string"
                            },
                            "received_events_url": {
                              "example": "https://api.github.com/users/octocat/received_events",
                              "format": "uri",
                              "type": "string"
                            },
                            "repos_url": {
                              "example": "https://api.github.com/users/octocat/repos",
                              "format": "uri",
                              "type": "string"
                            },
                            "site_admin": { "type": "boolean" },
                            "starred_at": {
                              "example": "\"2020-07-09T00:17:55Z\"",
                              "type": "string"
                            },
                            "starred_url": {
                              "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                              "type": "string"
                            },
                            "subscriptions_url": {
                              "example": "https://api.github.com/users/octocat/subscriptions",
                              "format": "uri",
                              "type": "string"
                            },
                            "type": { "example": "User", "type": "string" },
                            "url": {
                              "example": "https://api.github.com/users/octocat",
                              "format": "uri",
                              "type": "string"
                            }
                          },
                          "required": [
                            "avatar_url",
                            "events_url",
                            "followers_url",
                            "following_url",
                            "gists_url",
                            "gravatar_id",
                            "html_url",
                            "id",
                            "node_id",
                            "login",
                            "organizations_url",
                            "received_events_url",
                            "repos_url",
                            "site_admin",
                            "starred_url",
                            "subscriptions_url",
                            "type",
                            "url"
                          ],
                          "title": "Simple User",
                          "type": "object"
                        },
                        "secret": {
                          "description": "The secret that was detected.",
                          "type": "string"
                        },
                        "secret_type": {
                          "description": "The type of secret that secret scanning detected.",
                          "type": "string"
                        },
                        "state": {
                          "description": "Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.",
                          "enum": ["open", "resolved"],
                          "type": "string"
                        },
                        "url": {
                          "description": "The REST API URL of the alert resource.",
                          "format": "uri",
                          "nullable": false,
                          "readOnly": true,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "description": "Response"
              },
              "404": {
                "description": "Repository is public, or secret scanning is disabled for the repository, or the resource is not found"
              },
              "503": {
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "code": { "type": "string" },
                        "documentation_url": { "type": "string" },
                        "message": { "type": "string" }
                      },
                      "type": "object"
                    }
                  }
                },
                "description": "Service unavailable"
              }
            },
            "summary": "Get a secret scanning alert",
            "tags": ["secret-scanning"],
            "x-github": {
              "category": "secret-scanning",
              "enabledForGitHubApps": true,
              "githubCloudOnly": false,
              "previews": [],
              "subcategory": null
            },
            "x-octokit": {}
          }
        }
      ]
    ]
  },
  "servers": null,
  "version": null
}

{
  "paths": {
    "added": {
      "/admin/hooks": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-global-webhooks"
          },
          "operationId": "enterprise-admin/list-global-webhooks",
          "parameters": [
            {
              "description": "This API is under preview and subject to change.",
              "in": "header",
              "name": "accept",
              "required": true,
              "schema": {
                "default": "application/vnd.github.superpro-preview+json",
                "type": "string"
              },
              "style": "simple"
            },
            {
              "allowReserved": null,
              "description": "Results per page (max 100)",
              "in": "query",
              "name": "per_page",
              "required": false,
              "schema": { "default": 30, "type": "integer" },
              "style": "form"
            },
            {
              "allowReserved": null,
              "description": "Page number of the results to fetch.",
              "in": "query",
              "name": "page",
              "required": false,
              "schema": { "default": 1, "type": "integer" },
              "style": "form"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": [
                        {
                          "active": true,
                          "config": {
                            "content_type": "json",
                            "insecure_ssl": "0",
                            "secret": "********",
                            "url": "https://example.com"
                          },
                          "created_at": "2017-12-07T00:14:59Z",
                          "events": ["organization", "user"],
                          "id": 1,
                          "name": "web",
                          "ping_url": "https://api.github.com/admin/hooks/1/pings",
                          "type": "Global",
                          "updated_at": "2017-12-07T00:14:59Z",
                          "url": "https://api.github.com/admin/hooks/1"
                        }
                      ]
                    }
                  },
                  "schema": {
                    "items": {
                      "properties": {
                        "active": { "type": "boolean" },
                        "config": {
                          "properties": {
                            "content_type": { "type": "string" },
                            "insecure_ssl": { "type": "string" },
                            "secret": { "type": "string" },
                            "url": { "type": "string" }
                          },
                          "type": "object"
                        },
                        "created_at": { "type": "string" },
                        "events": {
                          "items": { "type": "string" },
                          "type": "array"
                        },
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "ping_url": { "type": "string" },
                        "type": { "type": "string" },
                        "updated_at": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "Response",
              "headers": {
                "Link": {
                  "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                  "required": null,
                  "schema": { "type": "string" },
                  "style": "simple"
                }
              }
            }
          },
          "summary": "List global webhooks",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "superpro",
                "note": "The [Global Webhooks API](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#global-webhooks) is currently available for developers to preview. To access the API during the preview period, you must provide a custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types) in the `Accept` header:\n```shell\napplication/vnd.github.superpro-preview+json\n```",
                "required": true
              }
            ],
            "subcategory": "global-webhooks"
          }
        },
        "post": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-global-webhook"
          },
          "operationId": "enterprise-admin/create-global-webhook",
          "parameters": [
            {
              "description": "This API is under preview and subject to change.",
              "in": "header",
              "name": "accept",
              "required": true,
              "schema": {
                "default": "application/vnd.github.superpro-preview+json",
                "type": "string"
              },
              "style": "simple"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "example": {
                  "config": {
                    "content_type": "json",
                    "secret": "secret",
                    "url": "https://example.com/webhook"
                  },
                  "events": ["organization", "user"],
                  "name": "web"
                },
                "schema": {
                  "properties": {
                    "active": {
                      "default": true,
                      "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                      "type": "boolean"
                    },
                    "config": {
                      "description": "Key/value pairs to provide settings for this webhook.",
                      "properties": {
                        "content_type": {
                          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                          "type": "string"
                        },
                        "insecure_ssl": {
                          "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                          "type": "string"
                        },
                        "secret": {
                          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/github-ae@latest/webhooks/event-payloads/#delivery-headers) header.",
                          "type": "string"
                        },
                        "url": {
                          "description": "The URL to which the payloads will be delivered.",
                          "type": "string"
                        }
                      },
                      "required": ["url"],
                      "type": "object"
                    },
                    "events": {
                      "description": "The [events](https://docs.github.com/github-ae@latest/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.",
                      "items": { "type": "string" },
                      "type": "array"
                    },
                    "name": {
                      "description": "Must be passed as \"web\".",
                      "type": "string"
                    }
                  },
                  "required": ["name", "config"],
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "active": true,
                        "config": {
                          "content_type": "json",
                          "insecure_ssl": "0",
                          "secret": "********",
                          "url": "https://example.com"
                        },
                        "created_at": "2017-12-07T00:14:59Z",
                        "events": ["organization", "user"],
                        "id": 1,
                        "name": "web",
                        "ping_url": "https://api.github.com/admin/hooks/1/pings",
                        "type": "Global",
                        "updated_at": "2017-12-07T00:14:59Z",
                        "url": "https://api.github.com/admin/hooks/1"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "active": { "type": "boolean" },
                      "config": {
                        "properties": {
                          "content_type": { "type": "string" },
                          "insecure_ssl": { "type": "string" },
                          "secret": { "type": "string" },
                          "url": { "type": "string" }
                        },
                        "type": "object"
                      },
                      "created_at": { "type": "string" },
                      "events": {
                        "items": { "type": "string" },
                        "type": "array"
                      },
                      "id": { "type": "integer" },
                      "name": { "type": "string" },
                      "ping_url": { "type": "string" },
                      "type": { "type": "string" },
                      "updated_at": { "type": "string" },
                      "url": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Create a global webhook",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "superpro",
                "note": "The [Global Webhooks API](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#global-webhooks) is currently available for developers to preview. To access the API during the preview period, you must provide a custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types) in the `Accept` header:\n```shell\napplication/vnd.github.superpro-preview+json\n```",
                "required": true
              }
            ],
            "subcategory": "global-webhooks"
          }
        }
      },
      "/admin/hooks/{hook_id}": {
        "delete": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-global-webhook"
          },
          "operationId": "enterprise-admin/delete-global-webhook",
          "parameters": [
            {
              "description": "This API is under preview and subject to change.",
              "in": "header",
              "name": "accept",
              "required": true,
              "schema": {
                "default": "application/vnd.github.superpro-preview+json",
                "type": "string"
              },
              "style": "simple"
            },
            {
              "in": "path",
              "name": "hook_id",
              "required": true,
              "schema": { "type": "integer" },
              "style": "simple"
            }
          ],
          "responses": { "204": { "description": "Response" } },
          "summary": "Delete a global webhook",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "superpro",
                "note": "The [Global Webhooks API](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#global-webhooks) is currently available for developers to preview. To access the API during the preview period, you must provide a custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types) in the `Accept` header:\n```shell\napplication/vnd.github.superpro-preview+json\n```",
                "required": true
              }
            ],
            "subcategory": "global-webhooks"
          }
        },
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-global-webhook"
          },
          "operationId": "enterprise-admin/get-global-webhook",
          "parameters": [
            {
              "description": "This API is under preview and subject to change.",
              "in": "header",
              "name": "accept",
              "required": true,
              "schema": {
                "default": "application/vnd.github.superpro-preview+json",
                "type": "string"
              },
              "style": "simple"
            },
            {
              "in": "path",
              "name": "hook_id",
              "required": true,
              "schema": { "type": "integer" },
              "style": "simple"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "active": true,
                        "config": {
                          "content_type": "json",
                          "insecure_ssl": "0",
                          "secret": "********",
                          "url": "https://example.com"
                        },
                        "created_at": "2017-12-07T00:14:59Z",
                        "events": ["organization", "user"],
                        "id": 1,
                        "name": "web",
                        "ping_url": "https://api.github.com/admin/hooks/1/pings",
                        "type": "Global",
                        "updated_at": "2017-12-07T00:14:59Z",
                        "url": "https://api.github.com/admin/hooks/1"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "active": { "type": "boolean" },
                      "config": {
                        "properties": {
                          "content_type": { "type": "string" },
                          "insecure_ssl": { "type": "string" },
                          "secret": { "type": "string" },
                          "url": { "type": "string" }
                        },
                        "type": "object"
                      },
                      "created_at": { "type": "string" },
                      "events": {
                        "items": { "type": "string" },
                        "type": "array"
                      },
                      "id": { "type": "integer" },
                      "name": { "type": "string" },
                      "ping_url": { "type": "string" },
                      "type": { "type": "string" },
                      "updated_at": { "type": "string" },
                      "url": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get a global webhook",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "superpro",
                "note": "The [Global Webhooks API](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#global-webhooks) is currently available for developers to preview. To access the API during the preview period, you must provide a custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types) in the `Accept` header:\n```shell\napplication/vnd.github.superpro-preview+json\n```",
                "required": true
              }
            ],
            "subcategory": "global-webhooks"
          }
        },
        "patch": {
          "deprecated": null,
          "description": "Parameters that are not provided will be overwritten with the default value or removed if no default exists.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-global-webhook"
          },
          "operationId": "enterprise-admin/update-global-webhook",
          "parameters": [
            {
              "description": "This API is under preview and subject to change.",
              "in": "header",
              "name": "accept",
              "required": true,
              "schema": {
                "default": "application/vnd.github.superpro-preview+json",
                "type": "string"
              },
              "style": "simple"
            },
            {
              "in": "path",
              "name": "hook_id",
              "required": true,
              "schema": { "type": "integer" },
              "style": "simple"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "example": {
                  "config": { "url": "https://example.com/webhook" },
                  "events": ["organization"]
                },
                "schema": {
                  "properties": {
                    "active": {
                      "default": true,
                      "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                      "type": "boolean"
                    },
                    "config": {
                      "description": "Key/value pairs to provide settings for this webhook.",
                      "properties": {
                        "content_type": {
                          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                          "type": "string"
                        },
                        "insecure_ssl": {
                          "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                          "type": "string"
                        },
                        "secret": {
                          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/github-ae@latest/webhooks/event-payloads/#delivery-headers) header.",
                          "type": "string"
                        },
                        "url": {
                          "description": "The URL to which the payloads will be delivered.",
                          "type": "string"
                        }
                      },
                      "required": ["url"],
                      "type": "object"
                    },
                    "events": {
                      "description": "The [events](https://docs.github.com/github-ae@latest/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.",
                      "items": { "type": "string" },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "required": null
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "active": true,
                        "config": {
                          "content_type": "form",
                          "insecure_ssl": "0",
                          "url": "https://example.com"
                        },
                        "created_at": "2017-12-07T00:14:59Z",
                        "events": ["organization"],
                        "id": 1,
                        "name": "web",
                        "ping_url": "https://api.github.com/admin/hooks/1/pings",
                        "type": "Global",
                        "updated_at": "2017-12-07T00:14:59Z",
                        "url": "https://api.github.com/admin/hooks/1"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "active": { "type": "boolean" },
                      "config": {
                        "properties": {
                          "content_type": { "type": "string" },
                          "insecure_ssl": { "type": "string" },
                          "url": { "type": "string" }
                        },
                        "type": "object"
                      },
                      "created_at": { "type": "string" },
                      "events": {
                        "items": { "type": "string" },
                        "type": "array"
                      },
                      "id": { "type": "integer" },
                      "name": { "type": "string" },
                      "ping_url": { "type": "string" },
                      "type": { "type": "string" },
                      "updated_at": { "type": "string" },
                      "url": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Update a global webhook",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "superpro",
                "note": "The [Global Webhooks API](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#global-webhooks) is currently available for developers to preview. To access the API during the preview period, you must provide a custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types) in the `Accept` header:\n```shell\napplication/vnd.github.superpro-preview+json\n```",
                "required": true
              }
            ],
            "subcategory": "global-webhooks"
          }
        }
      },
      "/admin/hooks/{hook_id}/pings": {
        "post": {
          "deprecated": null,
          "description": "This will trigger a [ping event](https://docs.github.com/github-ae@latest/webhooks/#ping-event) to be sent to the webhook.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#ping-a-global-webhook"
          },
          "operationId": "enterprise-admin/ping-global-webhook",
          "parameters": [
            {
              "description": "This API is under preview and subject to change.",
              "in": "header",
              "name": "accept",
              "required": true,
              "schema": {
                "default": "application/vnd.github.superpro-preview+json",
                "type": "string"
              },
              "style": "simple"
            },
            {
              "in": "path",
              "name": "hook_id",
              "required": true,
              "schema": { "type": "integer" },
              "style": "simple"
            }
          ],
          "responses": { "204": { "description": "Response" } },
          "summary": "Ping a global webhook",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "superpro",
                "note": "The [Global Webhooks API](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#global-webhooks) is currently available for developers to preview. To access the API during the preview period, you must provide a custom [media type](https://docs.github.com/github-ae@latest/rest/overview/media-types) in the `Accept` header:\n```shell\napplication/vnd.github.superpro-preview+json\n```",
                "required": true
              }
            ],
            "subcategory": "global-webhooks"
          }
        }
      },
      "/admin/keys": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-public-keys"
          },
          "operationId": "enterprise-admin/list-public-keys",
          "parameters": [
            {
              "allowReserved": null,
              "description": "Results per page (max 100)",
              "in": "query",
              "name": "per_page",
              "required": false,
              "schema": { "default": 30, "type": "integer" },
              "style": "form"
            },
            {
              "allowReserved": null,
              "description": "Page number of the results to fetch.",
              "in": "query",
              "name": "page",
              "required": false,
              "schema": { "default": 1, "type": "integer" },
              "style": "form"
            },
            {
              "allowReserved": null,
              "description": "One of `asc` (ascending) or `desc` (descending).",
              "in": "query",
              "name": "direction",
              "required": false,
              "schema": {
                "default": "desc",
                "enum": ["asc", "desc"],
                "type": "string"
              },
              "style": "form"
            },
            {
              "allowReserved": null,
              "in": "query",
              "name": "sort",
              "required": false,
              "schema": {
                "default": "created",
                "enum": ["created", "updated", "accessed"],
                "type": "string"
              },
              "style": "form"
            },
            {
              "allowReserved": null,
              "description": "Only show public keys accessed after the given time.",
              "in": "query",
              "name": "since",
              "required": false,
              "schema": { "type": "string" },
              "style": "form"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": [
                        {
                          "created_at": "2020-06-11T21:31:57Z",
                          "id": 2,
                          "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
                          "last_used": "2020-06-11T22:31:57Z",
                          "read_only": false,
                          "repository_id": 2,
                          "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
                          "url": "https://api.github.com/user/keys/2",
                          "user_id": 1,
                          "verified": false
                        },
                        {
                          "created_at": "2020-06-11T21:31:57Z",
                          "id": 3,
                          "key": "9Og8iYjAyymI9LvABpJerYrMxURPc8r+dB7TJyvv1234",
                          "last_used": "2020-06-11T22:31:57Z",
                          "read_only": false,
                          "repository_id": 2,
                          "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
                          "url": "https://api.github.com/user/keys/2",
                          "user_id": 1,
                          "verified": false
                        }
                      ]
                    }
                  },
                  "schema": {
                    "items": {
                      "properties": {
                        "created_at": {
                          "format": "date-time",
                          "type": "string"
                        },
                        "id": { "type": "integer" },
                        "key": { "type": "string" },
                        "last_used": {
                          "format": "date-time",
                          "nullable": true,
                          "type": "string"
                        },
                        "read_only": { "type": "boolean" },
                        "repository_id": {
                          "nullable": true,
                          "type": "integer"
                        },
                        "title": { "type": "string" },
                        "url": { "type": "string" },
                        "user_id": { "nullable": true, "type": "integer" },
                        "verified": { "type": "boolean" }
                      },
                      "required": [
                        "id",
                        "key",
                        "url",
                        "title",
                        "verified",
                        "created_at",
                        "read_only",
                        "last_used",
                        "user_id",
                        "repository_id"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "Response",
              "headers": {
                "Link": {
                  "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                  "required": null,
                  "schema": { "type": "string" },
                  "style": "simple"
                }
              }
            }
          },
          "summary": "List public keys",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "users"
          }
        }
      },
      "/admin/keys/{key_ids}": {
        "delete": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-public-key"
          },
          "operationId": "enterprise-admin/delete-public-key",
          "parameters": [
            {
              "in": "path",
              "name": "key_ids",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "responses": { "204": { "description": "Response" } },
          "summary": "Delete a public key",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "users"
          }
        }
      },
      "/admin/organizations": {
        "post": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-organization"
          },
          "operationId": "enterprise-admin/create-org",
          "requestBody": {
            "content": {
              "application/json": {
                "example": {
                  "admin": "monalisaoctocat",
                  "login": "github",
                  "profile_name": "GitHub, Inc."
                },
                "schema": {
                  "properties": {
                    "admin": {
                      "description": "The login of the user who will manage this organization.",
                      "type": "string"
                    },
                    "login": {
                      "description": "The organization's username.",
                      "type": "string"
                    },
                    "profile_name": {
                      "description": "The organization's display name.",
                      "type": "string"
                    }
                  },
                  "required": ["login", "admin"],
                  "type": "object"
                }
              }
            },
            "required": null
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "description": "A great organization",
                        "events_url": "https://api.github.com/orgs/github/events",
                        "hooks_url": "https://api.github.com/orgs/github/hooks",
                        "id": 1,
                        "issues_url": "https://api.github.com/orgs/github/issues",
                        "login": "github",
                        "members_url": "https://api.github.com/orgs/github/members{/member}",
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                        "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                        "repos_url": "https://api.github.com/orgs/github/repos",
                        "url": "https://api.github.com/orgs/github"
                      }
                    }
                  },
                  "schema": {
                    "description": "Organization Simple",
                    "properties": {
                      "avatar_url": {
                        "example": "https://github.com/images/error/octocat_happy.gif",
                        "type": "string"
                      },
                      "description": {
                        "example": "A great organization",
                        "nullable": true,
                        "type": "string"
                      },
                      "events_url": {
                        "example": "https://api.github.com/orgs/github/events",
                        "format": "uri",
                        "type": "string"
                      },
                      "hooks_url": {
                        "example": "https://api.github.com/orgs/github/hooks",
                        "type": "string"
                      },
                      "id": { "example": 1, "type": "integer" },
                      "issues_url": {
                        "example": "https://api.github.com/orgs/github/issues",
                        "type": "string"
                      },
                      "login": { "example": "github", "type": "string" },
                      "members_url": {
                        "example": "https://api.github.com/orgs/github/members{/member}",
                        "type": "string"
                      },
                      "node_id": {
                        "example": "MDEyOk9yZ2FuaXphdGlvbjE=",
                        "type": "string"
                      },
                      "public_members_url": {
                        "example": "https://api.github.com/orgs/github/public_members{/member}",
                        "type": "string"
                      },
                      "repos_url": {
                        "example": "https://api.github.com/orgs/github/repos",
                        "format": "uri",
                        "type": "string"
                      },
                      "url": {
                        "example": "https://api.github.com/orgs/github",
                        "format": "uri",
                        "type": "string"
                      }
                    },
                    "required": [
                      "login",
                      "url",
                      "id",
                      "node_id",
                      "repos_url",
                      "events_url",
                      "hooks_url",
                      "issues_url",
                      "members_url",
                      "public_members_url",
                      "avatar_url",
                      "description"
                    ],
                    "title": "Organization Simple",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Create an organization",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "orgs"
          }
        }
      },
      "/admin/organizations/{org}": {
        "patch": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-an-organization-name"
          },
          "operationId": "enterprise-admin/update-org-name",
          "parameters": [
            {
              "in": "path",
              "name": "org",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "example": { "login": "the-new-octocats" },
                "schema": {
                  "properties": {
                    "login": {
                      "description": "The organization's new name.",
                      "type": "string"
                    }
                  },
                  "required": ["login"],
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "example": {
                    "message": "Job queued to rename organization. It may take a few minutes to complete.",
                    "url": "https://<hostname>/api/v3/organizations/1"
                  },
                  "schema": {
                    "properties": {
                      "message": { "type": "string" },
                      "url": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Update an organization name",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "orgs"
          }
        }
      },
      "/admin/pre-receive-environments": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-pre-receive-environments"
          },
          "operationId": "enterprise-admin/list-pre-receive-environments",
          "parameters": [
            {
              "allowReserved": null,
              "description": "Results per page (max 100)",
              "in": "query",
              "name": "per_page",
              "required": false,
              "schema": { "default": 30, "type": "integer" },
              "style": "form"
            },
            {
              "allowReserved": null,
              "description": "Page number of the results to fetch.",
              "in": "query",
              "name": "page",
              "required": false,
              "schema": { "default": 1, "type": "integer" },
              "style": "form"
            },
            {
              "allowReserved": null,
              "description": "One of `asc` (ascending) or `desc` (descending).",
              "in": "query",
              "name": "direction",
              "required": false,
              "schema": {
                "default": "desc",
                "enum": ["asc", "desc"],
                "type": "string"
              },
              "style": "form"
            },
            {
              "allowReserved": null,
              "in": "query",
              "name": "sort",
              "required": false,
              "schema": {
                "default": "created",
                "enum": ["created", "updated", "name"],
                "type": "string"
              },
              "style": "form"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": [
                        {
                          "created_at": "2016-05-20T11:35:45-05:00",
                          "default_environment": true,
                          "download": {
                            "downloaded_at": "2016-05-26T07:42:53-05:00",
                            "message": null,
                            "state": "not_started",
                            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1/downloads/latest"
                          },
                          "hooks_count": 14,
                          "html_url": "https://github.example.com/admin/pre-receive-environments/1",
                          "id": 1,
                          "image_url": "githubenterprise://internal",
                          "name": "Default",
                          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1"
                        },
                        {
                          "created_at": "2016-05-20T11:35:45-05:00",
                          "default_environment": false,
                          "download": {
                            "downloaded_at": "2016-05-26T07:42:53-05:00",
                            "message": null,
                            "state": "success",
                            "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest"
                          },
                          "hooks_count": 1,
                          "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                          "id": 2,
                          "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                          "name": "DevTools Hook Env",
                          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2"
                        }
                      ]
                    }
                  },
                  "schema": {
                    "items": {
                      "properties": {
                        "created_at": { "type": "string" },
                        "default_environment": { "type": "boolean" },
                        "download": {
                          "properties": {
                            "downloaded_at": {
                              "nullable": true,
                              "type": "string"
                            },
                            "message": { "nullable": true, "type": "string" },
                            "state": { "type": "string" },
                            "url": { "type": "string" }
                          },
                          "type": "object"
                        },
                        "hooks_count": { "type": "integer" },
                        "html_url": { "type": "string" },
                        "id": { "type": "integer" },
                        "image_url": { "type": "string" },
                        "name": { "type": "string" },
                        "url": { "type": "string" }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "List pre-receive environments",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "eye-scream",
                "note": "APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.\n\nTo access the API you must provide a custom [media type](/rest/overview/media-types) in the `Accept` header:\n\n```shell\napplication/vnd.github.eye-scream-preview\n```",
                "required": true
              }
            ],
            "subcategory": "pre-receive-environments"
          }
        },
        "post": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-a-pre-receive-environment"
          },
          "operationId": "enterprise-admin/create-pre-receive-environment",
          "requestBody": {
            "content": {
              "application/json": {
                "example": {
                  "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                  "name": "DevTools Hook Env"
                },
                "schema": {
                  "properties": {
                    "image_url": {
                      "description": "URL from which to download a tarball of this environment.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The new pre-receive environment's name.",
                      "type": "string"
                    }
                  },
                  "required": ["name", "image_url"],
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "created_at": "2016-05-20T11:35:45-05:00",
                        "default_environment": false,
                        "download": {
                          "downloaded_at": null,
                          "message": null,
                          "state": "not_started",
                          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest"
                        },
                        "hooks_count": 1,
                        "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                        "id": 2,
                        "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                        "name": "DevTools Hook Env",
                        "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "created_at": { "type": "string" },
                      "default_environment": { "type": "boolean" },
                      "download": {
                        "properties": {
                          "downloaded_at": {
                            "nullable": true,
                            "type": "string"
                          },
                          "message": { "nullable": true, "type": "string" },
                          "state": { "type": "string" },
                          "url": { "type": "string" }
                        },
                        "type": "object"
                      },
                      "hooks_count": { "type": "integer" },
                      "html_url": { "type": "string" },
                      "id": { "type": "integer" },
                      "image_url": { "type": "string" },
                      "name": { "type": "string" },
                      "url": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Create a pre-receive environment",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "eye-scream",
                "note": "APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.\n\nTo access the API you must provide a custom [media type](/rest/overview/media-types) in the `Accept` header:\n\n```shell\napplication/vnd.github.eye-scream-preview\n```",
                "required": true
              }
            ],
            "subcategory": "pre-receive-environments"
          }
        }
      },
      "/admin/pre-receive-environments/{pre_receive_environment_id}": {
        "delete": {
          "deprecated": null,
          "description": "If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.\n\nThe possible error messages are:\n\n*   _Cannot modify or delete the default environment_\n*   _Cannot delete environment that has hooks_\n*   _Cannot delete environment when download is in progress_",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-pre-receive-environment"
          },
          "operationId": "enterprise-admin/delete-pre-receive-environment",
          "parameters": [
            {
              "in": "path",
              "name": "pre_receive_environment_id",
              "required": true,
              "schema": { "type": "integer" },
              "style": "simple"
            }
          ],
          "responses": {
            "204": { "description": "Response" },
            "422": {
              "content": {
                "application/json": {
                  "examples": {
                    "client-errors": {
                      "value": {
                        "errors": [
                          {
                            "code": "custom",
                            "message": "Cannot modify or delete the default environment",
                            "resource": "PreReceiveEnvironment"
                          }
                        ],
                        "message": "Validation Failed"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "errors": {
                        "items": {
                          "properties": {
                            "code": { "type": "string" },
                            "message": { "type": "string" },
                            "resource": { "type": "string" }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "message": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Client Errors"
            }
          },
          "summary": "Delete a pre-receive environment",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "eye-scream",
                "note": "APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.\n\nTo access the API you must provide a custom [media type](/rest/overview/media-types) in the `Accept` header:\n\n```shell\napplication/vnd.github.eye-scream-preview\n```",
                "required": true
              }
            ],
            "subcategory": "pre-receive-environments"
          }
        },
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-a-pre-receive-environment"
          },
          "operationId": "enterprise-admin/get-pre-receive-environment",
          "parameters": [
            {
              "in": "path",
              "name": "pre_receive_environment_id",
              "required": true,
              "schema": { "type": "integer" },
              "style": "simple"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "created_at": "2016-05-20T11:35:45-05:00",
                        "default_environment": false,
                        "download": {
                          "downloaded_at": null,
                          "message": null,
                          "state": "not_started",
                          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest"
                        },
                        "hooks_count": 1,
                        "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                        "id": 2,
                        "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                        "name": "DevTools Hook Env",
                        "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "created_at": { "type": "string" },
                      "default_environment": { "type": "boolean" },
                      "download": {
                        "properties": {
                          "downloaded_at": {
                            "nullable": true,
                            "type": "string"
                          },
                          "message": { "nullable": true, "type": "string" },
                          "state": { "type": "string" },
                          "url": { "type": "string" }
                        },
                        "type": "object"
                      },
                      "hooks_count": { "type": "integer" },
                      "html_url": { "type": "string" },
                      "id": { "type": "integer" },
                      "image_url": { "type": "string" },
                      "name": { "type": "string" },
                      "url": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get a pre-receive environment",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "eye-scream",
                "note": "APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.\n\nTo access the API you must provide a custom [media type](/rest/overview/media-types) in the `Accept` header:\n\n```shell\napplication/vnd.github.eye-scream-preview\n```",
                "required": true
              }
            ],
            "subcategory": "pre-receive-environments"
          }
        },
        "patch": {
          "deprecated": null,
          "description": "You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#update-a-pre-receive-environment"
          },
          "operationId": "enterprise-admin/update-pre-receive-environment",
          "parameters": [
            {
              "in": "path",
              "name": "pre_receive_environment_id",
              "required": true,
              "schema": { "type": "integer" },
              "style": "simple"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "image_url": {
                      "description": "URL from which to download a tarball of this environment.",
                      "type": "string"
                    },
                    "name": {
                      "description": "This pre-receive environment's new name.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "required": null
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default-response": {
                      "value": {
                        "created_at": "2016-05-20T11:35:45-05:00",
                        "default_environment": false,
                        "download": {
                          "downloaded_at": "2016-05-26T07:42:53-05:00",
                          "message": null,
                          "state": "success",
                          "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest"
                        },
                        "hooks_count": 1,
                        "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                        "id": 2,
                        "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                        "name": "DevTools Hook Env",
                        "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "created_at": { "type": "string" },
                      "default_environment": { "type": "boolean" },
                      "download": {
                        "properties": {
                          "downloaded_at": {
                            "nullable": true,
                            "type": "string"
                          },
                          "message": { "nullable": true, "type": "string" },
                          "state": { "type": "string" },
                          "url": { "type": "string" }
                        },
                        "type": "object"
                      },
                      "hooks_count": { "type": "integer" },
                      "html_url": { "type": "string" },
                      "id": { "type": "integer" },
                      "image_url": { "type": "string" },
                      "name": { "type": "string" },
                      "url": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "examples": {
                    "client-errors": {
                      "value": {
                        "errors": [
                          {
                            "code": "custom",
                            "message": "Cannot modify or delete the default environment",
                            "resource": "PreReceiveEnvironment"
                          }
                        ],
                        "message": "Validation Failed"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "errors": {
                        "items": {
                          "properties": {
                            "code": { "type": "string" },
                            "message": { "type": "string" },
                            "resource": { "type": "string" }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "message": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Client Errors"
            }
          },
          "summary": "Update a pre-receive environment",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "eye-scream",
                "note": "APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.\n\nTo access the API you must provide a custom [media type](/rest/overview/media-types) in the `Accept` header:\n\n```shell\napplication/vnd.github.eye-scream-preview\n```",
                "required": true
              }
            ],
            "subcategory": "pre-receive-environments"
          }
        }
      },
      "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads": {
        "post": {
          "deprecated": null,
          "description": "Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.\n\nIf a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.\n\nThe possible error messages are:\n\n* _Cannot modify or delete the default environment_\n* _Can not start a new download when a download is in progress_",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#start-a-pre-receive-environment-download"
          },
          "operationId": "enterprise-admin/start-pre-receive-environment-download",
          "parameters": [
            {
              "in": "path",
              "name": "pre_receive_environment_id",
              "required": true,
              "schema": { "type": "integer" },
              "style": "simple"
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": {
                  "examples": {
                    "default-response": {
                      "value": {
                        "downloaded_at": null,
                        "message": null,
                        "state": "not_started",
                        "url": "https://github.example.com/api/v3/admin/pre-receive-environments/3/downloads/latest"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "downloaded_at": { "nullable": true, "type": "string" },
                      "message": { "nullable": true, "type": "string" },
                      "state": { "type": "string" },
                      "url": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "examples": {
                    "client-errors": {
                      "value": {
                        "errors": [
                          {
                            "code": "custom",
                            "message": "Can not start a new download when a download is in progress",
                            "resource": "PreReceiveEnvironment"
                          }
                        ],
                        "message": "Validation Failed"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "errors": {
                        "items": {
                          "properties": {
                            "code": { "type": "string" },
                            "message": { "type": "string" },
                            "resource": { "type": "string" }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "message": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Client Errors"
            }
          },
          "summary": "Start a pre-receive environment download",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "eye-scream",
                "note": "APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.\n\nTo access the API you must provide a custom [media type](/rest/overview/media-types) in the `Accept` header:\n\n```shell\napplication/vnd.github.eye-scream-preview\n```",
                "required": true
              }
            ],
            "subcategory": "pre-receive-environments"
          }
        }
      },
      "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest": {
        "get": {
          "deprecated": null,
          "description": "In addition to seeing the download status at the \"[Get a pre-receive environment](#get-a-pre-receive-environment)\" endpoint, there is also this separate endpoint for just the download status.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment"
          },
          "operationId": "enterprise-admin/get-download-status-for-pre-receive-environment",
          "parameters": [
            {
              "in": "path",
              "name": "pre_receive_environment_id",
              "required": true,
              "schema": { "type": "integer" },
              "style": "simple"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "downloaded_at": "2016-05-26T07:42:53-05:00",
                        "message": null,
                        "state": "success",
                        "url": "https://github.example.com/api/v3/admin/pre-receive-environments/3/downloads/latest"
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "downloaded_at": { "nullable": true, "type": "string" },
                      "message": { "nullable": true, "type": "string" },
                      "state": { "type": "string" },
                      "url": { "type": "string" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get the download status for a pre-receive environment",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "previews": [
              {
                "name": "eye-scream",
                "note": "APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.\n\nTo access the API you must provide a custom [media type](/rest/overview/media-types) in the `Accept` header:\n\n```shell\napplication/vnd.github.eye-scream-preview\n```",
                "required": true
              }
            ],
            "subcategory": "pre-receive-environments"
          }
        }
      },
      "/admin/tokens": {
        "get": {
          "deprecated": null,
          "description": "Lists personal access tokens for all users, including admin users.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#list-personal-access-tokens"
          },
          "operationId": "enterprise-admin/list-personal-access-tokens",
          "parameters": [
            {
              "allowReserved": null,
              "description": "Results per page (max 100)",
              "in": "query",
              "name": "per_page",
              "required": false,
              "schema": { "default": 30, "type": "integer" },
              "style": "form"
            },
            {
              "allowReserved": null,
              "description": "Page number of the results to fetch.",
              "in": "query",
              "name": "page",
              "required": false,
              "schema": { "default": 1, "type": "integer" },
              "style": "form"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": [
                        {
                          "app": {
                            "client_id": "abcde12345fghij67890",
                            "name": "my github app",
                            "url": "http://my-github-app.com"
                          },
                          "created_at": "2011-09-06T17:26:27Z",
                          "expires_at": "2011-09-08T17:26:27Z",
                          "fingerprint": "jklmnop12345678",
                          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                          "id": 1,
                          "note": "optional note",
                          "note_url": "http://optional/note/url",
                          "scopes": ["public_repo"],
                          "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                          "token_last_eight": "Ae178B4a",
                          "updated_at": "2011-09-06T20:39:23Z",
                          "url": "https://api.github.com/authorizations/1"
                        }
                      ]
                    }
                  },
                  "schema": {
                    "items": {
                      "description": "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
                      "properties": {
                        "app": {
                          "properties": {
                            "client_id": { "type": "string" },
                            "name": { "type": "string" },
                            "url": { "format": "uri", "type": "string" }
                          },
                          "required": ["client_id", "name", "url"],
                          "type": "object"
                        },
                        "created_at": {
                          "format": "date-time",
                          "type": "string"
                        },
                        "expires_at": {
                          "format": "date-time",
                          "nullable": true,
                          "type": "string"
                        },
                        "fingerprint": { "nullable": true, "type": "string" },
                        "hashed_token": { "nullable": true, "type": "string" },
                        "id": { "type": "integer" },
                        "installation": {
                          "nullable": true,
                          "properties": {
                            "account": {
                              "description": "Simple User",
                              "properties": {
                                "avatar_url": {
                                  "example": "https://github.com/images/error/octocat_happy.gif",
                                  "format": "uri",
                                  "type": "string"
                                },
                                "email": { "nullable": true, "type": "string" },
                                "events_url": {
                                  "example": "https://api.github.com/users/octocat/events{/privacy}",
                                  "type": "string"
                                },
                                "followers_url": {
                                  "example": "https://api.github.com/users/octocat/followers",
                                  "format": "uri",
                                  "type": "string"
                                },
                                "following_url": {
                                  "example": "https://api.github.com/users/octocat/following{/other_user}",
                                  "type": "string"
                                },
                                "gists_url": {
                                  "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                  "type": "string"
                                },
                                "gravatar_id": {
                                  "example": "41d064eb2195891e12d0413f63227ea7",
                                  "nullable": true,
                                  "type": "string"
                                },
                                "html_url": {
                                  "example": "https://github.com/octocat",
                                  "format": "uri",
                                  "type": "string"
                                },
                                "id": { "example": 1, "type": "integer" },
                                "login": {
                                  "example": "octocat",
                                  "type": "string"
                                },
                                "name": { "nullable": true, "type": "string" },
                                "node_id": {
                                  "example": "MDQ6VXNlcjE=",
                                  "type": "string"
                                },
                                "organizations_url": {
                                  "example": "https://api.github.com/users/octocat/orgs",
                                  "format": "uri",
                                  "type": "string"
                                },
                                "received_events_url": {
                                  "example": "https://api.github.com/users/octocat/received_events",
                                  "format": "uri",
                                  "type": "string"
                                },
                                "repos_url": {
                                  "example": "https://api.github.com/users/octocat/repos",
                                  "format": "uri",
                                  "type": "string"
                                },
                                "site_admin": { "type": "boolean" },
                                "starred_at": {
                                  "example": "\"2020-07-09T00:17:55Z\"",
                                  "type": "string"
                                },
                                "starred_url": {
                                  "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                  "type": "string"
                                },
                                "subscriptions_url": {
                                  "example": "https://api.github.com/users/octocat/subscriptions",
                                  "format": "uri",
                                  "type": "string"
                                },
                                "type": { "example": "User", "type": "string" },
                                "url": {
                                  "example": "https://api.github.com/users/octocat",
                                  "format": "uri",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "avatar_url",
                                "events_url",
                                "followers_url",
                                "following_url",
                                "gists_url",
                                "gravatar_id",
                                "html_url",
                                "id",
                                "node_id",
                                "login",
                                "organizations_url",
                                "received_events_url",
                                "repos_url",
                                "site_admin",
                                "starred_url",
                                "subscriptions_url",
                                "type",
                                "url"
                              ],
                              "title": "Simple User",
                              "type": "object"
                            },
                            "has_multiple_single_files": {
                              "example": true,
                              "type": "boolean"
                            },
                            "permissions": {
                              "description": "The permissions granted to the user-to-server access token.",
                              "example": {
                                "contents": "read",
                                "deployments": "write",
                                "issues": "read",
                                "single_file": "read"
                              },
                              "properties": {
                                "actions": {
                                  "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "administration": {
                                  "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "checks": {
                                  "description": "The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "content_references": {
                                  "description": "The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "contents": {
                                  "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "deployments": {
                                  "description": "The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "environments": {
                                  "description": "The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "issues": {
                                  "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "members": {
                                  "description": "The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "organization_administration": {
                                  "description": "The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "organization_hooks": {
                                  "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "organization_packages": {
                                  "description": "The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "organization_plan": {
                                  "description": "The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.",
                                  "enum": ["read"],
                                  "type": "string"
                                },
                                "organization_projects": {
                                  "description": "The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                                  "enum": ["read", "write", "admin"],
                                  "type": "string"
                                },
                                "organization_secrets": {
                                  "description": "The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "organization_self_hosted_runners": {
                                  "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "organization_user_blocking": {
                                  "description": "The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "packages": {
                                  "description": "The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "pages": {
                                  "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "pull_requests": {
                                  "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "repository_hooks": {
                                  "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "repository_projects": {
                                  "description": "The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                                  "enum": ["read", "write", "admin"],
                                  "type": "string"
                                },
                                "secret_scanning_alerts": {
                                  "description": "The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "secrets": {
                                  "description": "The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "security_events": {
                                  "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "single_file": {
                                  "description": "The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "statuses": {
                                  "description": "The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "team_discussions": {
                                  "description": "The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.",
                                  "enum": ["read", "write"],
                                  "type": "string"
                                },
                                "vulnerability_alerts": {
                                  "description": "The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.",
                                  "enum": ["read"],
                                  "type": "string"
                                },
                                "workflows": {
                                  "description": "The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.",
                                  "enum": ["write"],
                                  "type": "string"
                                }
                              },
                              "title": "App Permissions",
                              "type": "object"
                            },
                            "repositories_url": {
                              "example": "https://api.github.com/users/octocat/repos",
                              "format": "uri",
                              "type": "string"
                            },
                            "repository_selection": {
                              "description": "Describe whether all repositories have been selected or there's a selection involved",
                              "enum": ["all", "selected"],
                              "type": "string"
                            },
                            "single_file_name": {
                              "example": "config.yaml",
                              "nullable": true,
                              "type": "string"
                            },
                            "single_file_paths": {
                              "example": [
                                "config.yml",
                                ".github/issue_TEMPLATE.md"
                              ],
                              "items": { "type": "string" },
                              "type": "array"
                            }
                          },
                          "required": [
                            "permissions",
                            "repository_selection",
                            "single_file_name",
                            "repositories_url",
                            "account"
                          ],
                          "title": "Scoped Installation",
                          "type": "object"
                        },
                        "note": { "nullable": true, "type": "string" },
                        "note_url": {
                          "format": "uri",
                          "nullable": true,
                          "type": "string"
                        },
                        "scopes": {
                          "description": "A list of scopes that this authorization is in.",
                          "items": { "type": "string" },
                          "nullable": true,
                          "type": "array"
                        },
                        "token": { "type": "string" },
                        "token_last_eight": {
                          "nullable": true,
                          "type": "string"
                        },
                        "updated_at": {
                          "format": "date-time",
                          "type": "string"
                        },
                        "url": { "format": "uri", "type": "string" },
                        "user": {
                          "description": "Simple User",
                          "nullable": true,
                          "properties": {
                            "avatar_url": {
                              "example": "https://github.com/images/error/octocat_happy.gif",
                              "format": "uri",
                              "type": "string"
                            },
                            "email": { "nullable": true, "type": "string" },
                            "events_url": {
                              "example": "https://api.github.com/users/octocat/events{/privacy}",
                              "type": "string"
                            },
                            "followers_url": {
                              "example": "https://api.github.com/users/octocat/followers",
                              "format": "uri",
                              "type": "string"
                            },
                            "following_url": {
                              "example": "https://api.github.com/users/octocat/following{/other_user}",
                              "type": "string"
                            },
                            "gists_url": {
                              "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                              "type": "string"
                            },
                            "gravatar_id": {
                              "example": "41d064eb2195891e12d0413f63227ea7",
                              "nullable": true,
                              "type": "string"
                            },
                            "html_url": {
                              "example": "https://github.com/octocat",
                              "format": "uri",
                              "type": "string"
                            },
                            "id": { "example": 1, "type": "integer" },
                            "login": { "example": "octocat", "type": "string" },
                            "name": { "nullable": true, "type": "string" },
                            "node_id": {
                              "example": "MDQ6VXNlcjE=",
                              "type": "string"
                            },
                            "organizations_url": {
                              "example": "https://api.github.com/users/octocat/orgs",
                              "format": "uri",
                              "type": "string"
                            },
                            "received_events_url": {
                              "example": "https://api.github.com/users/octocat/received_events",
                              "format": "uri",
                              "type": "string"
                            },
                            "repos_url": {
                              "example": "https://api.github.com/users/octocat/repos",
                              "format": "uri",
                              "type": "string"
                            },
                            "site_admin": { "type": "boolean" },
                            "starred_at": {
                              "example": "\"2020-07-09T00:17:55Z\"",
                              "type": "string"
                            },
                            "starred_url": {
                              "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                              "type": "string"
                            },
                            "subscriptions_url": {
                              "example": "https://api.github.com/users/octocat/subscriptions",
                              "format": "uri",
                              "type": "string"
                            },
                            "type": { "example": "User", "type": "string" },
                            "url": {
                              "example": "https://api.github.com/users/octocat",
                              "format": "uri",
                              "type": "string"
                            }
                          },
                          "required": [
                            "avatar_url",
                            "events_url",
                            "followers_url",
                            "following_url",
                            "gists_url",
                            "gravatar_id",
                            "html_url",
                            "id",
                            "node_id",
                            "login",
                            "organizations_url",
                            "received_events_url",
                            "repos_url",
                            "site_admin",
                            "starred_url",
                            "subscriptions_url",
                            "type",
                            "url"
                          ],
                          "title": "Simple User",
                          "type": "object"
                        }
                      },
                      "required": [
                        "app",
                        "id",
                        "note",
                        "note_url",
                        "scopes",
                        "token",
                        "hashed_token",
                        "token_last_eight",
                        "fingerprint",
                        "url",
                        "created_at",
                        "updated_at",
                        "expires_at"
                      ],
                      "title": "Authorization",
                      "type": "object"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "Response",
              "headers": {
                "Link": {
                  "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
                  "required": null,
                  "schema": { "type": "string" },
                  "style": "simple"
                }
              }
            }
          },
          "summary": "List personal access tokens",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "users"
          }
        }
      },
      "/admin/tokens/{token_id}": {
        "delete": {
          "deprecated": null,
          "description": "Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-personal-access-token"
          },
          "operationId": "enterprise-admin/delete-personal-access-token",
          "parameters": [
            {
              "in": "path",
              "name": "token_id",
              "required": true,
              "schema": { "type": "integer" },
              "style": "simple"
            }
          ],
          "responses": { "204": { "description": "Response" } },
          "summary": "Delete a personal access token",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "users"
          }
        }
      },
      "/admin/users/{username}": {
        "delete": {
          "deprecated": null,
          "description": "Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user) is often a better option.\n\nYou can delete any user account except your own.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-a-user"
          },
          "operationId": "enterprise-admin/delete-user",
          "parameters": [
            {
              "in": "path",
              "name": "username",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "responses": { "204": { "description": "Response" } },
          "summary": "Delete a user",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "users"
          }
        }
      },
      "/admin/users/{username}/authorizations": {
        "delete": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token"
          },
          "operationId": "enterprise-admin/delete-impersonation-o-auth-token",
          "parameters": [
            {
              "in": "path",
              "name": "username",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "responses": { "204": { "description": "Response" } },
          "summary": "Delete an impersonation OAuth token",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "users"
          }
        },
        "post": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#create-an-impersonation-oauth-token"
          },
          "operationId": "enterprise-admin/create-impersonation-o-auth-token",
          "parameters": [
            {
              "in": "path",
              "name": "username",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "scopes": {
                      "description": "A list of [scopes](https://docs.github.com/github-ae@latest/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                      "items": { "type": "string" },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "required": null
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "app": {
                          "client_id": "abcde12345fghij67890",
                          "name": "my github app",
                          "url": "http://my-github-app.com"
                        },
                        "created_at": "2011-09-06T17:26:27Z",
                        "expires_at": "2011-10-06T17:26:27Z",
                        "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                        "id": 1,
                        "note": "optional note",
                        "note_url": "http://optional/note/url",
                        "scopes": ["public_repo"],
                        "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                        "token_last_eight": "Ae178B4a",
                        "updated_at": "2011-09-06T20:39:23Z",
                        "url": "https://api.github.com/authorizations/1"
                      }
                    }
                  },
                  "schema": {
                    "description": "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
                    "properties": {
                      "app": {
                        "properties": {
                          "client_id": { "type": "string" },
                          "name": { "type": "string" },
                          "url": { "format": "uri", "type": "string" }
                        },
                        "required": ["client_id", "name", "url"],
                        "type": "object"
                      },
                      "created_at": { "format": "date-time", "type": "string" },
                      "expires_at": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "fingerprint": { "nullable": true, "type": "string" },
                      "hashed_token": { "nullable": true, "type": "string" },
                      "id": { "type": "integer" },
                      "installation": {
                        "nullable": true,
                        "properties": {
                          "account": {
                            "description": "Simple User",
                            "properties": {
                              "avatar_url": {
                                "example": "https://github.com/images/error/octocat_happy.gif",
                                "format": "uri",
                                "type": "string"
                              },
                              "email": { "nullable": true, "type": "string" },
                              "events_url": {
                                "example": "https://api.github.com/users/octocat/events{/privacy}",
                                "type": "string"
                              },
                              "followers_url": {
                                "example": "https://api.github.com/users/octocat/followers",
                                "format": "uri",
                                "type": "string"
                              },
                              "following_url": {
                                "example": "https://api.github.com/users/octocat/following{/other_user}",
                                "type": "string"
                              },
                              "gists_url": {
                                "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                "type": "string"
                              },
                              "gravatar_id": {
                                "example": "41d064eb2195891e12d0413f63227ea7",
                                "nullable": true,
                                "type": "string"
                              },
                              "html_url": {
                                "example": "https://github.com/octocat",
                                "format": "uri",
                                "type": "string"
                              },
                              "id": { "example": 1, "type": "integer" },
                              "login": {
                                "example": "octocat",
                                "type": "string"
                              },
                              "name": { "nullable": true, "type": "string" },
                              "node_id": {
                                "example": "MDQ6VXNlcjE=",
                                "type": "string"
                              },
                              "organizations_url": {
                                "example": "https://api.github.com/users/octocat/orgs",
                                "format": "uri",
                                "type": "string"
                              },
                              "received_events_url": {
                                "example": "https://api.github.com/users/octocat/received_events",
                                "format": "uri",
                                "type": "string"
                              },
                              "repos_url": {
                                "example": "https://api.github.com/users/octocat/repos",
                                "format": "uri",
                                "type": "string"
                              },
                              "site_admin": { "type": "boolean" },
                              "starred_at": {
                                "example": "\"2020-07-09T00:17:55Z\"",
                                "type": "string"
                              },
                              "starred_url": {
                                "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                "type": "string"
                              },
                              "subscriptions_url": {
                                "example": "https://api.github.com/users/octocat/subscriptions",
                                "format": "uri",
                                "type": "string"
                              },
                              "type": { "example": "User", "type": "string" },
                              "url": {
                                "example": "https://api.github.com/users/octocat",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "avatar_url",
                              "events_url",
                              "followers_url",
                              "following_url",
                              "gists_url",
                              "gravatar_id",
                              "html_url",
                              "id",
                              "node_id",
                              "login",
                              "organizations_url",
                              "received_events_url",
                              "repos_url",
                              "site_admin",
                              "starred_url",
                              "subscriptions_url",
                              "type",
                              "url"
                            ],
                            "title": "Simple User",
                            "type": "object"
                          },
                          "has_multiple_single_files": {
                            "example": true,
                            "type": "boolean"
                          },
                          "permissions": {
                            "description": "The permissions granted to the user-to-server access token.",
                            "example": {
                              "contents": "read",
                              "deployments": "write",
                              "issues": "read",
                              "single_file": "read"
                            },
                            "properties": {
                              "actions": {
                                "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "administration": {
                                "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "checks": {
                                "description": "The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "content_references": {
                                "description": "The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "contents": {
                                "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "deployments": {
                                "description": "The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "environments": {
                                "description": "The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "issues": {
                                "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "members": {
                                "description": "The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_administration": {
                                "description": "The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_hooks": {
                                "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_packages": {
                                "description": "The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_plan": {
                                "description": "The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.",
                                "enum": ["read"],
                                "type": "string"
                              },
                              "organization_projects": {
                                "description": "The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                                "enum": ["read", "write", "admin"],
                                "type": "string"
                              },
                              "organization_secrets": {
                                "description": "The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_self_hosted_runners": {
                                "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_user_blocking": {
                                "description": "The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "packages": {
                                "description": "The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "pages": {
                                "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "pull_requests": {
                                "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "repository_hooks": {
                                "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "repository_projects": {
                                "description": "The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                                "enum": ["read", "write", "admin"],
                                "type": "string"
                              },
                              "secret_scanning_alerts": {
                                "description": "The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "secrets": {
                                "description": "The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "security_events": {
                                "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "single_file": {
                                "description": "The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "statuses": {
                                "description": "The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "team_discussions": {
                                "description": "The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "vulnerability_alerts": {
                                "description": "The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.",
                                "enum": ["read"],
                                "type": "string"
                              },
                              "workflows": {
                                "description": "The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.",
                                "enum": ["write"],
                                "type": "string"
                              }
                            },
                            "title": "App Permissions",
                            "type": "object"
                          },
                          "repositories_url": {
                            "example": "https://api.github.com/users/octocat/repos",
                            "format": "uri",
                            "type": "string"
                          },
                          "repository_selection": {
                            "description": "Describe whether all repositories have been selected or there's a selection involved",
                            "enum": ["all", "selected"],
                            "type": "string"
                          },
                          "single_file_name": {
                            "example": "config.yaml",
                            "nullable": true,
                            "type": "string"
                          },
                          "single_file_paths": {
                            "example": [
                              "config.yml",
                              ".github/issue_TEMPLATE.md"
                            ],
                            "items": { "type": "string" },
                            "type": "array"
                          }
                        },
                        "required": [
                          "permissions",
                          "repository_selection",
                          "single_file_name",
                          "repositories_url",
                          "account"
                        ],
                        "title": "Scoped Installation",
                        "type": "object"
                      },
                      "note": { "nullable": true, "type": "string" },
                      "note_url": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                      },
                      "scopes": {
                        "description": "A list of scopes that this authorization is in.",
                        "items": { "type": "string" },
                        "nullable": true,
                        "type": "array"
                      },
                      "token": { "type": "string" },
                      "token_last_eight": {
                        "nullable": true,
                        "type": "string"
                      },
                      "updated_at": { "format": "date-time", "type": "string" },
                      "url": { "format": "uri", "type": "string" },
                      "user": {
                        "description": "Simple User",
                        "nullable": true,
                        "properties": {
                          "avatar_url": {
                            "example": "https://github.com/images/error/octocat_happy.gif",
                            "format": "uri",
                            "type": "string"
                          },
                          "email": { "nullable": true, "type": "string" },
                          "events_url": {
                            "example": "https://api.github.com/users/octocat/events{/privacy}",
                            "type": "string"
                          },
                          "followers_url": {
                            "example": "https://api.github.com/users/octocat/followers",
                            "format": "uri",
                            "type": "string"
                          },
                          "following_url": {
                            "example": "https://api.github.com/users/octocat/following{/other_user}",
                            "type": "string"
                          },
                          "gists_url": {
                            "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                            "type": "string"
                          },
                          "gravatar_id": {
                            "example": "41d064eb2195891e12d0413f63227ea7",
                            "nullable": true,
                            "type": "string"
                          },
                          "html_url": {
                            "example": "https://github.com/octocat",
                            "format": "uri",
                            "type": "string"
                          },
                          "id": { "example": 1, "type": "integer" },
                          "login": { "example": "octocat", "type": "string" },
                          "name": { "nullable": true, "type": "string" },
                          "node_id": {
                            "example": "MDQ6VXNlcjE=",
                            "type": "string"
                          },
                          "organizations_url": {
                            "example": "https://api.github.com/users/octocat/orgs",
                            "format": "uri",
                            "type": "string"
                          },
                          "received_events_url": {
                            "example": "https://api.github.com/users/octocat/received_events",
                            "format": "uri",
                            "type": "string"
                          },
                          "repos_url": {
                            "example": "https://api.github.com/users/octocat/repos",
                            "format": "uri",
                            "type": "string"
                          },
                          "site_admin": { "type": "boolean" },
                          "starred_at": {
                            "example": "\"2020-07-09T00:17:55Z\"",
                            "type": "string"
                          },
                          "starred_url": {
                            "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                            "type": "string"
                          },
                          "subscriptions_url": {
                            "example": "https://api.github.com/users/octocat/subscriptions",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": { "example": "User", "type": "string" },
                          "url": {
                            "example": "https://api.github.com/users/octocat",
                            "format": "uri",
                            "type": "string"
                          }
                        },
                        "required": [
                          "avatar_url",
                          "events_url",
                          "followers_url",
                          "following_url",
                          "gists_url",
                          "gravatar_id",
                          "html_url",
                          "id",
                          "node_id",
                          "login",
                          "organizations_url",
                          "received_events_url",
                          "repos_url",
                          "site_admin",
                          "starred_url",
                          "subscriptions_url",
                          "type",
                          "url"
                        ],
                        "title": "Simple User",
                        "type": "object"
                      }
                    },
                    "required": [
                      "app",
                      "id",
                      "note",
                      "note_url",
                      "scopes",
                      "token",
                      "hashed_token",
                      "token_last_eight",
                      "fingerprint",
                      "url",
                      "created_at",
                      "updated_at",
                      "expires_at"
                    ],
                    "title": "Authorization",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Create an impersonation OAuth token",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "users"
          }
        }
      },
      "/applications/{client_id}/grants/{access_token}": {
        "delete": {
          "deprecated": true,
          "description": "**Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.\n\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under \"Authorized OAuth Apps\" on GitHub AE](https://github.com/settings/applications#authorized).",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#revoke-a-grant-for-an-application"
          },
          "operationId": "apps/revoke-grant-for-application",
          "parameters": [
            {
              "description": "The client ID of your GitHub app.",
              "in": "path",
              "name": "client_id",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            },
            {
              "in": "path",
              "name": "access_token",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "responses": { "204": { "description": "Response" } },
          "summary": "Revoke a grant for an application",
          "tags": ["apps"],
          "x-github": {
            "category": "apps",
            "deprecationDate": "2020-02-14",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "removalDate": "2021-05-05",
            "subcategory": "oauth-applications"
          }
        }
      },
      "/applications/{client_id}/tokens/{access_token}": {
        "delete": {
          "deprecated": true,
          "description": "**Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#revoke-an-authorization-for-an-application"
          },
          "operationId": "apps/revoke-authorization-for-application",
          "parameters": [
            {
              "description": "The client ID of your GitHub app.",
              "in": "path",
              "name": "client_id",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            },
            {
              "in": "path",
              "name": "access_token",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "responses": { "204": { "description": "Response" } },
          "summary": "Revoke an authorization for an application",
          "tags": ["apps"],
          "x-github": {
            "category": "apps",
            "deprecationDate": "2020-02-14",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "removalDate": "2021-05-05",
            "subcategory": "oauth-applications"
          }
        },
        "get": {
          "deprecated": true,
          "description": "**Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#check-an-authorization"
          },
          "operationId": "apps/check-authorization",
          "parameters": [
            {
              "description": "The client ID of your GitHub app.",
              "in": "path",
              "name": "client_id",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            },
            {
              "in": "path",
              "name": "access_token",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "app": {
                          "client_id": "abcde12345fghij67890",
                          "name": "my github app",
                          "url": "http://my-github-app.com"
                        },
                        "created_at": "2011-09-06T17:26:27Z",
                        "expires_at": "2011-09-08T17:26:27Z",
                        "fingerprint": "jklmnop12345678",
                        "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                        "id": 1,
                        "note": "optional note",
                        "note_url": "http://optional/note/url",
                        "scopes": ["public_repo", "user"],
                        "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                        "token_last_eight": "Ae178B4a",
                        "updated_at": "2011-09-06T20:39:23Z",
                        "url": "https://api.github.com/authorizations/1",
                        "user": {
                          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                          "followers_url": "https://api.github.com/users/octocat/followers",
                          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                          "html_url": "https://github.com/octocat",
                          "id": 1,
                          "login": "octocat",
                          "node_id": "MDQ6VXNlcjE=",
                          "organizations_url": "https://api.github.com/users/octocat/orgs",
                          "received_events_url": "https://api.github.com/users/octocat/received_events",
                          "repos_url": "https://api.github.com/users/octocat/repos",
                          "site_admin": false,
                          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                          "type": "User",
                          "url": "https://api.github.com/users/octocat"
                        }
                      }
                    }
                  },
                  "schema": {
                    "description": "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
                    "nullable": true,
                    "properties": {
                      "app": {
                        "properties": {
                          "client_id": { "type": "string" },
                          "name": { "type": "string" },
                          "url": { "format": "uri", "type": "string" }
                        },
                        "required": ["client_id", "name", "url"],
                        "type": "object"
                      },
                      "created_at": { "format": "date-time", "type": "string" },
                      "expires_at": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "fingerprint": { "nullable": true, "type": "string" },
                      "hashed_token": { "nullable": true, "type": "string" },
                      "id": { "type": "integer" },
                      "installation": {
                        "nullable": true,
                        "properties": {
                          "account": {
                            "description": "Simple User",
                            "properties": {
                              "avatar_url": {
                                "example": "https://github.com/images/error/octocat_happy.gif",
                                "format": "uri",
                                "type": "string"
                              },
                              "email": { "nullable": true, "type": "string" },
                              "events_url": {
                                "example": "https://api.github.com/users/octocat/events{/privacy}",
                                "type": "string"
                              },
                              "followers_url": {
                                "example": "https://api.github.com/users/octocat/followers",
                                "format": "uri",
                                "type": "string"
                              },
                              "following_url": {
                                "example": "https://api.github.com/users/octocat/following{/other_user}",
                                "type": "string"
                              },
                              "gists_url": {
                                "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                "type": "string"
                              },
                              "gravatar_id": {
                                "example": "41d064eb2195891e12d0413f63227ea7",
                                "nullable": true,
                                "type": "string"
                              },
                              "html_url": {
                                "example": "https://github.com/octocat",
                                "format": "uri",
                                "type": "string"
                              },
                              "id": { "example": 1, "type": "integer" },
                              "login": {
                                "example": "octocat",
                                "type": "string"
                              },
                              "name": { "nullable": true, "type": "string" },
                              "node_id": {
                                "example": "MDQ6VXNlcjE=",
                                "type": "string"
                              },
                              "organizations_url": {
                                "example": "https://api.github.com/users/octocat/orgs",
                                "format": "uri",
                                "type": "string"
                              },
                              "received_events_url": {
                                "example": "https://api.github.com/users/octocat/received_events",
                                "format": "uri",
                                "type": "string"
                              },
                              "repos_url": {
                                "example": "https://api.github.com/users/octocat/repos",
                                "format": "uri",
                                "type": "string"
                              },
                              "site_admin": { "type": "boolean" },
                              "starred_at": {
                                "example": "\"2020-07-09T00:17:55Z\"",
                                "type": "string"
                              },
                              "starred_url": {
                                "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                "type": "string"
                              },
                              "subscriptions_url": {
                                "example": "https://api.github.com/users/octocat/subscriptions",
                                "format": "uri",
                                "type": "string"
                              },
                              "type": { "example": "User", "type": "string" },
                              "url": {
                                "example": "https://api.github.com/users/octocat",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "avatar_url",
                              "events_url",
                              "followers_url",
                              "following_url",
                              "gists_url",
                              "gravatar_id",
                              "html_url",
                              "id",
                              "node_id",
                              "login",
                              "organizations_url",
                              "received_events_url",
                              "repos_url",
                              "site_admin",
                              "starred_url",
                              "subscriptions_url",
                              "type",
                              "url"
                            ],
                            "title": "Simple User",
                            "type": "object"
                          },
                          "has_multiple_single_files": {
                            "example": true,
                            "type": "boolean"
                          },
                          "permissions": {
                            "description": "The permissions granted to the user-to-server access token.",
                            "example": {
                              "contents": "read",
                              "deployments": "write",
                              "issues": "read",
                              "single_file": "read"
                            },
                            "properties": {
                              "actions": {
                                "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "administration": {
                                "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "checks": {
                                "description": "The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "content_references": {
                                "description": "The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "contents": {
                                "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "deployments": {
                                "description": "The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "environments": {
                                "description": "The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "issues": {
                                "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "members": {
                                "description": "The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_administration": {
                                "description": "The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_hooks": {
                                "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_packages": {
                                "description": "The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_plan": {
                                "description": "The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.",
                                "enum": ["read"],
                                "type": "string"
                              },
                              "organization_projects": {
                                "description": "The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                                "enum": ["read", "write", "admin"],
                                "type": "string"
                              },
                              "organization_secrets": {
                                "description": "The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_self_hosted_runners": {
                                "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_user_blocking": {
                                "description": "The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "packages": {
                                "description": "The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "pages": {
                                "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "pull_requests": {
                                "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "repository_hooks": {
                                "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "repository_projects": {
                                "description": "The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                                "enum": ["read", "write", "admin"],
                                "type": "string"
                              },
                              "secret_scanning_alerts": {
                                "description": "The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "secrets": {
                                "description": "The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "security_events": {
                                "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "single_file": {
                                "description": "The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "statuses": {
                                "description": "The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "team_discussions": {
                                "description": "The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "vulnerability_alerts": {
                                "description": "The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.",
                                "enum": ["read"],
                                "type": "string"
                              },
                              "workflows": {
                                "description": "The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.",
                                "enum": ["write"],
                                "type": "string"
                              }
                            },
                            "title": "App Permissions",
                            "type": "object"
                          },
                          "repositories_url": {
                            "example": "https://api.github.com/users/octocat/repos",
                            "format": "uri",
                            "type": "string"
                          },
                          "repository_selection": {
                            "description": "Describe whether all repositories have been selected or there's a selection involved",
                            "enum": ["all", "selected"],
                            "type": "string"
                          },
                          "single_file_name": {
                            "example": "config.yaml",
                            "nullable": true,
                            "type": "string"
                          },
                          "single_file_paths": {
                            "example": [
                              "config.yml",
                              ".github/issue_TEMPLATE.md"
                            ],
                            "items": { "type": "string" },
                            "type": "array"
                          }
                        },
                        "required": [
                          "permissions",
                          "repository_selection",
                          "single_file_name",
                          "repositories_url",
                          "account"
                        ],
                        "title": "Scoped Installation",
                        "type": "object"
                      },
                      "note": { "nullable": true, "type": "string" },
                      "note_url": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                      },
                      "scopes": {
                        "description": "A list of scopes that this authorization is in.",
                        "items": { "type": "string" },
                        "nullable": true,
                        "type": "array"
                      },
                      "token": { "type": "string" },
                      "token_last_eight": {
                        "nullable": true,
                        "type": "string"
                      },
                      "updated_at": { "format": "date-time", "type": "string" },
                      "url": { "format": "uri", "type": "string" },
                      "user": {
                        "description": "Simple User",
                        "nullable": true,
                        "properties": {
                          "avatar_url": {
                            "example": "https://github.com/images/error/octocat_happy.gif",
                            "format": "uri",
                            "type": "string"
                          },
                          "email": { "nullable": true, "type": "string" },
                          "events_url": {
                            "example": "https://api.github.com/users/octocat/events{/privacy}",
                            "type": "string"
                          },
                          "followers_url": {
                            "example": "https://api.github.com/users/octocat/followers",
                            "format": "uri",
                            "type": "string"
                          },
                          "following_url": {
                            "example": "https://api.github.com/users/octocat/following{/other_user}",
                            "type": "string"
                          },
                          "gists_url": {
                            "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                            "type": "string"
                          },
                          "gravatar_id": {
                            "example": "41d064eb2195891e12d0413f63227ea7",
                            "nullable": true,
                            "type": "string"
                          },
                          "html_url": {
                            "example": "https://github.com/octocat",
                            "format": "uri",
                            "type": "string"
                          },
                          "id": { "example": 1, "type": "integer" },
                          "login": { "example": "octocat", "type": "string" },
                          "name": { "nullable": true, "type": "string" },
                          "node_id": {
                            "example": "MDQ6VXNlcjE=",
                            "type": "string"
                          },
                          "organizations_url": {
                            "example": "https://api.github.com/users/octocat/orgs",
                            "format": "uri",
                            "type": "string"
                          },
                          "received_events_url": {
                            "example": "https://api.github.com/users/octocat/received_events",
                            "format": "uri",
                            "type": "string"
                          },
                          "repos_url": {
                            "example": "https://api.github.com/users/octocat/repos",
                            "format": "uri",
                            "type": "string"
                          },
                          "site_admin": { "type": "boolean" },
                          "starred_at": {
                            "example": "\"2020-07-09T00:17:55Z\"",
                            "type": "string"
                          },
                          "starred_url": {
                            "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                            "type": "string"
                          },
                          "subscriptions_url": {
                            "example": "https://api.github.com/users/octocat/subscriptions",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": { "example": "User", "type": "string" },
                          "url": {
                            "example": "https://api.github.com/users/octocat",
                            "format": "uri",
                            "type": "string"
                          }
                        },
                        "required": [
                          "avatar_url",
                          "events_url",
                          "followers_url",
                          "following_url",
                          "gists_url",
                          "gravatar_id",
                          "html_url",
                          "id",
                          "node_id",
                          "login",
                          "organizations_url",
                          "received_events_url",
                          "repos_url",
                          "site_admin",
                          "starred_url",
                          "subscriptions_url",
                          "type",
                          "url"
                        ],
                        "title": "Simple User",
                        "type": "object"
                      }
                    },
                    "required": [
                      "app",
                      "id",
                      "note",
                      "note_url",
                      "scopes",
                      "token",
                      "hashed_token",
                      "token_last_eight",
                      "fingerprint",
                      "url",
                      "created_at",
                      "updated_at",
                      "expires_at"
                    ],
                    "title": "Authorization",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "description": "Basic Error",
                    "properties": {
                      "documentation_url": { "type": "string" },
                      "message": { "type": "string" },
                      "status": { "type": "string" },
                      "url": { "type": "string" }
                    },
                    "title": "Basic Error",
                    "type": "object"
                  }
                }
              },
              "description": "Resource not found"
            }
          },
          "summary": "Check an authorization",
          "tags": ["apps"],
          "x-github": {
            "category": "apps",
            "deprecationDate": "2020-02-14",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "removalDate": "2021-05-05",
            "subcategory": "oauth-applications"
          }
        },
        "post": {
          "deprecated": true,
          "description": "**Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/apps#reset-an-authorization"
          },
          "operationId": "apps/reset-authorization",
          "parameters": [
            {
              "description": "The client ID of your GitHub app.",
              "in": "path",
              "name": "client_id",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            },
            {
              "in": "path",
              "name": "access_token",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "app": {
                          "client_id": "abcde12345fghij67890",
                          "name": "my github app",
                          "url": "http://my-github-app.com"
                        },
                        "created_at": "2011-09-06T17:26:27Z",
                        "expires_at": "2011-09-08T17:26:27Z",
                        "fingerprint": "jklmnop12345678",
                        "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                        "id": 1,
                        "note": "optional note",
                        "note_url": "http://optional/note/url",
                        "scopes": ["public_repo", "user"],
                        "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                        "token_last_eight": "Ae178B4a",
                        "updated_at": "2011-09-06T20:39:23Z",
                        "url": "https://api.github.com/authorizations/1",
                        "user": {
                          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                          "followers_url": "https://api.github.com/users/octocat/followers",
                          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                          "html_url": "https://github.com/octocat",
                          "id": 1,
                          "login": "octocat",
                          "node_id": "MDQ6VXNlcjE=",
                          "organizations_url": "https://api.github.com/users/octocat/orgs",
                          "received_events_url": "https://api.github.com/users/octocat/received_events",
                          "repos_url": "https://api.github.com/users/octocat/repos",
                          "site_admin": false,
                          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                          "type": "User",
                          "url": "https://api.github.com/users/octocat"
                        }
                      }
                    }
                  },
                  "schema": {
                    "description": "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
                    "properties": {
                      "app": {
                        "properties": {
                          "client_id": { "type": "string" },
                          "name": { "type": "string" },
                          "url": { "format": "uri", "type": "string" }
                        },
                        "required": ["client_id", "name", "url"],
                        "type": "object"
                      },
                      "created_at": { "format": "date-time", "type": "string" },
                      "expires_at": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      },
                      "fingerprint": { "nullable": true, "type": "string" },
                      "hashed_token": { "nullable": true, "type": "string" },
                      "id": { "type": "integer" },
                      "installation": {
                        "nullable": true,
                        "properties": {
                          "account": {
                            "description": "Simple User",
                            "properties": {
                              "avatar_url": {
                                "example": "https://github.com/images/error/octocat_happy.gif",
                                "format": "uri",
                                "type": "string"
                              },
                              "email": { "nullable": true, "type": "string" },
                              "events_url": {
                                "example": "https://api.github.com/users/octocat/events{/privacy}",
                                "type": "string"
                              },
                              "followers_url": {
                                "example": "https://api.github.com/users/octocat/followers",
                                "format": "uri",
                                "type": "string"
                              },
                              "following_url": {
                                "example": "https://api.github.com/users/octocat/following{/other_user}",
                                "type": "string"
                              },
                              "gists_url": {
                                "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                                "type": "string"
                              },
                              "gravatar_id": {
                                "example": "41d064eb2195891e12d0413f63227ea7",
                                "nullable": true,
                                "type": "string"
                              },
                              "html_url": {
                                "example": "https://github.com/octocat",
                                "format": "uri",
                                "type": "string"
                              },
                              "id": { "example": 1, "type": "integer" },
                              "login": {
                                "example": "octocat",
                                "type": "string"
                              },
                              "name": { "nullable": true, "type": "string" },
                              "node_id": {
                                "example": "MDQ6VXNlcjE=",
                                "type": "string"
                              },
                              "organizations_url": {
                                "example": "https://api.github.com/users/octocat/orgs",
                                "format": "uri",
                                "type": "string"
                              },
                              "received_events_url": {
                                "example": "https://api.github.com/users/octocat/received_events",
                                "format": "uri",
                                "type": "string"
                              },
                              "repos_url": {
                                "example": "https://api.github.com/users/octocat/repos",
                                "format": "uri",
                                "type": "string"
                              },
                              "site_admin": { "type": "boolean" },
                              "starred_at": {
                                "example": "\"2020-07-09T00:17:55Z\"",
                                "type": "string"
                              },
                              "starred_url": {
                                "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                                "type": "string"
                              },
                              "subscriptions_url": {
                                "example": "https://api.github.com/users/octocat/subscriptions",
                                "format": "uri",
                                "type": "string"
                              },
                              "type": { "example": "User", "type": "string" },
                              "url": {
                                "example": "https://api.github.com/users/octocat",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "avatar_url",
                              "events_url",
                              "followers_url",
                              "following_url",
                              "gists_url",
                              "gravatar_id",
                              "html_url",
                              "id",
                              "node_id",
                              "login",
                              "organizations_url",
                              "received_events_url",
                              "repos_url",
                              "site_admin",
                              "starred_url",
                              "subscriptions_url",
                              "type",
                              "url"
                            ],
                            "title": "Simple User",
                            "type": "object"
                          },
                          "has_multiple_single_files": {
                            "example": true,
                            "type": "boolean"
                          },
                          "permissions": {
                            "description": "The permissions granted to the user-to-server access token.",
                            "example": {
                              "contents": "read",
                              "deployments": "write",
                              "issues": "read",
                              "single_file": "read"
                            },
                            "properties": {
                              "actions": {
                                "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "administration": {
                                "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "checks": {
                                "description": "The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "content_references": {
                                "description": "The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "contents": {
                                "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "deployments": {
                                "description": "The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "environments": {
                                "description": "The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "issues": {
                                "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "members": {
                                "description": "The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_administration": {
                                "description": "The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_hooks": {
                                "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_packages": {
                                "description": "The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_plan": {
                                "description": "The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.",
                                "enum": ["read"],
                                "type": "string"
                              },
                              "organization_projects": {
                                "description": "The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                                "enum": ["read", "write", "admin"],
                                "type": "string"
                              },
                              "organization_secrets": {
                                "description": "The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_self_hosted_runners": {
                                "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "organization_user_blocking": {
                                "description": "The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "packages": {
                                "description": "The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "pages": {
                                "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "pull_requests": {
                                "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "repository_hooks": {
                                "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "repository_projects": {
                                "description": "The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                                "enum": ["read", "write", "admin"],
                                "type": "string"
                              },
                              "secret_scanning_alerts": {
                                "description": "The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "secrets": {
                                "description": "The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "security_events": {
                                "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "single_file": {
                                "description": "The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "statuses": {
                                "description": "The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "team_discussions": {
                                "description": "The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.",
                                "enum": ["read", "write"],
                                "type": "string"
                              },
                              "vulnerability_alerts": {
                                "description": "The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.",
                                "enum": ["read"],
                                "type": "string"
                              },
                              "workflows": {
                                "description": "The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.",
                                "enum": ["write"],
                                "type": "string"
                              }
                            },
                            "title": "App Permissions",
                            "type": "object"
                          },
                          "repositories_url": {
                            "example": "https://api.github.com/users/octocat/repos",
                            "format": "uri",
                            "type": "string"
                          },
                          "repository_selection": {
                            "description": "Describe whether all repositories have been selected or there's a selection involved",
                            "enum": ["all", "selected"],
                            "type": "string"
                          },
                          "single_file_name": {
                            "example": "config.yaml",
                            "nullable": true,
                            "type": "string"
                          },
                          "single_file_paths": {
                            "example": [
                              "config.yml",
                              ".github/issue_TEMPLATE.md"
                            ],
                            "items": { "type": "string" },
                            "type": "array"
                          }
                        },
                        "required": [
                          "permissions",
                          "repository_selection",
                          "single_file_name",
                          "repositories_url",
                          "account"
                        ],
                        "title": "Scoped Installation",
                        "type": "object"
                      },
                      "note": { "nullable": true, "type": "string" },
                      "note_url": {
                        "format": "uri",
                        "nullable": true,
                        "type": "string"
                      },
                      "scopes": {
                        "description": "A list of scopes that this authorization is in.",
                        "items": { "type": "string" },
                        "nullable": true,
                        "type": "array"
                      },
                      "token": { "type": "string" },
                      "token_last_eight": {
                        "nullable": true,
                        "type": "string"
                      },
                      "updated_at": { "format": "date-time", "type": "string" },
                      "url": { "format": "uri", "type": "string" },
                      "user": {
                        "description": "Simple User",
                        "nullable": true,
                        "properties": {
                          "avatar_url": {
                            "example": "https://github.com/images/error/octocat_happy.gif",
                            "format": "uri",
                            "type": "string"
                          },
                          "email": { "nullable": true, "type": "string" },
                          "events_url": {
                            "example": "https://api.github.com/users/octocat/events{/privacy}",
                            "type": "string"
                          },
                          "followers_url": {
                            "example": "https://api.github.com/users/octocat/followers",
                            "format": "uri",
                            "type": "string"
                          },
                          "following_url": {
                            "example": "https://api.github.com/users/octocat/following{/other_user}",
                            "type": "string"
                          },
                          "gists_url": {
                            "example": "https://api.github.com/users/octocat/gists{/gist_id}",
                            "type": "string"
                          },
                          "gravatar_id": {
                            "example": "41d064eb2195891e12d0413f63227ea7",
                            "nullable": true,
                            "type": "string"
                          },
                          "html_url": {
                            "example": "https://github.com/octocat",
                            "format": "uri",
                            "type": "string"
                          },
                          "id": { "example": 1, "type": "integer" },
                          "login": { "example": "octocat", "type": "string" },
                          "name": { "nullable": true, "type": "string" },
                          "node_id": {
                            "example": "MDQ6VXNlcjE=",
                            "type": "string"
                          },
                          "organizations_url": {
                            "example": "https://api.github.com/users/octocat/orgs",
                            "format": "uri",
                            "type": "string"
                          },
                          "received_events_url": {
                            "example": "https://api.github.com/users/octocat/received_events",
                            "format": "uri",
                            "type": "string"
                          },
                          "repos_url": {
                            "example": "https://api.github.com/users/octocat/repos",
                            "format": "uri",
                            "type": "string"
                          },
                          "site_admin": { "type": "boolean" },
                          "starred_at": {
                            "example": "\"2020-07-09T00:17:55Z\"",
                            "type": "string"
                          },
                          "starred_url": {
                            "example": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                            "type": "string"
                          },
                          "subscriptions_url": {
                            "example": "https://api.github.com/users/octocat/subscriptions",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": { "example": "User", "type": "string" },
                          "url": {
                            "example": "https://api.github.com/users/octocat",
                            "format": "uri",
                            "type": "string"
                          }
                        },
                        "required": [
                          "avatar_url",
                          "events_url",
                          "followers_url",
                          "following_url",
                          "gists_url",
                          "gravatar_id",
                          "html_url",
                          "id",
                          "node_id",
                          "login",
                          "organizations_url",
                          "received_events_url",
                          "repos_url",
                          "site_admin",
                          "starred_url",
                          "subscriptions_url",
                          "type",
                          "url"
                        ],
                        "title": "Simple User",
                        "type": "object"
                      }
                    },
                    "required": [
                      "app",
                      "id",
                      "note",
                      "note_url",
                      "scopes",
                      "token",
                      "hashed_token",
                      "token_last_eight",
                      "fingerprint",
                      "url",
                      "created_at",
                      "updated_at",
                      "expires_at"
                    ],
                    "title": "Authorization",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Reset an authorization",
          "tags": ["apps"],
          "x-github": {
            "category": "apps",
            "deprecationDate": "2020-02-14",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "removalDate": "2021-05-05",
            "subcategory": "oauth-applications"
          }
        }
      },
      "/enterprise/announcement": {
        "delete": {
          "deprecated": null,
          "description": "Removes the global announcement banner in your enterprise.",
          "operationId": "enterprise-admin/remove-announcement",
          "responses": { "204": { "description": "Response" } },
          "summary": "Remove the global announcement banner",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "announcement"
          }
        },
        "get": {
          "deprecated": null,
          "description": "Gets the current message and expiration date of the global announcement banner in your enterprise.",
          "operationId": "enterprise-admin/get-announcement",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "summary": "Default response",
                      "value": {
                        "announcement": "Very **important** announcement about _nothing_.",
                        "expires_at": "2021-01-01T00:00:00.000+00:00"
                      }
                    }
                  },
                  "schema": {
                    "description": "Enterprise global announcement",
                    "properties": {
                      "announcement": {
                        "description": "The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Mastering markdown](https://guides.github.com/features/mastering-markdown/).\"",
                        "example": "Very **important** announcement about _nothing_.",
                        "type": "string"
                      },
                      "expires_at": {
                        "description": "The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.",
                        "example": "\"2021-01-01T00:00:00.000-07:00\"",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": ["announcement"],
                    "title": "Enterprise Announcement",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get the global announcement banner",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "announcement"
          }
        },
        "patch": {
          "deprecated": null,
          "description": "Sets the message and expiration time for the global announcement banner in your enterprise.",
          "operationId": "enterprise-admin/set-announcement",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Enterprise global announcement",
                  "properties": {
                    "announcement": {
                      "description": "The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Mastering markdown](https://guides.github.com/features/mastering-markdown/).\"",
                      "example": "Very **important** announcement about _nothing_.",
                      "type": "string"
                    },
                    "expires_at": {
                      "description": "The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.",
                      "example": "\"2021-01-01T00:00:00.000-07:00\"",
                      "format": "date-time",
                      "nullable": true,
                      "type": "string"
                    }
                  },
                  "required": ["announcement"],
                  "title": "Enterprise Announcement",
                  "type": "object"
                }
              }
            },
            "required": null
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "summary": "Default response",
                      "value": {
                        "announcement": "Very **important** announcement about _nothing_.",
                        "expires_at": "2021-01-01T00:00:00.000+00:00"
                      }
                    }
                  },
                  "schema": {
                    "description": "Enterprise global announcement",
                    "properties": {
                      "announcement": {
                        "description": "The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Mastering markdown](https://guides.github.com/features/mastering-markdown/).\"",
                        "example": "Very **important** announcement about _nothing_.",
                        "type": "string"
                      },
                      "expires_at": {
                        "description": "The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.",
                        "example": "\"2021-01-01T00:00:00.000-07:00\"",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": ["announcement"],
                    "title": "Enterprise Announcement",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Set the global announcement banner",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "announcement"
          }
        }
      },
      "/enterprise/settings/license": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-license-information"
          },
          "operationId": "enterprise-admin/get-license-information",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "days_until_expiration": 365,
                        "expire_at": "2016/02/06 12:41:52 -0600",
                        "kind": "standard",
                        "seats": 1400,
                        "seats_available": 84,
                        "seats_used": 1316
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "days_until_expiration": { "type": "integer" },
                      "expire_at": { "type": "string" },
                      "kind": { "type": "string" },
                      "seats": {
                        "oneOf": [{ "type": "string" }, { "type": "integer" }]
                      },
                      "seats_available": {
                        "oneOf": [{ "type": "string" }, { "type": "integer" }]
                      },
                      "seats_used": { "type": "integer" }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get license information",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "license"
          }
        }
      },
      "/enterprise/stats/all": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-statistics"
          },
          "operationId": "enterprise-admin/get-all-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "examples": {
                    "default": {
                      "value": {
                        "comments": {
                          "total_commit_comments": 6,
                          "total_gist_comments": 28,
                          "total_issue_comments": 366,
                          "total_pull_request_comments": 30
                        },
                        "gists": {
                          "private_gists": 151,
                          "public_gists": 25,
                          "total_gists": 178
                        },
                        "hooks": {
                          "active_hooks": 23,
                          "inactive_hooks": 4,
                          "total_hooks": 27
                        },
                        "issues": {
                          "closed_issues": 96,
                          "open_issues": 83,
                          "total_issues": 179
                        },
                        "milestones": {
                          "closed_milestones": 1,
                          "open_milestones": 6,
                          "total_milestones": 7
                        },
                        "orgs": {
                          "disabled_orgs": 0,
                          "total_orgs": 33,
                          "total_team_members": 314,
                          "total_teams": 60
                        },
                        "pages": { "total_pages": 36 },
                        "pulls": {
                          "mergeable_pulls": 21,
                          "merged_pulls": 60,
                          "total_pulls": 86,
                          "unmergeable_pulls": 3
                        },
                        "repos": {
                          "fork_repos": 18,
                          "org_repos": 51,
                          "root_repos": 194,
                          "total_pushes": 3082,
                          "total_repos": 212,
                          "total_wikis": 15
                        },
                        "users": {
                          "admin_users": 45,
                          "suspended_users": 21,
                          "total_users": 254
                        }
                      }
                    }
                  },
                  "schema": {
                    "properties": {
                      "comments": {
                        "properties": {
                          "total_commit_comments": { "type": "integer" },
                          "total_gist_comments": { "type": "integer" },
                          "total_issue_comments": { "type": "integer" },
                          "total_pull_request_comments": { "type": "integer" }
                        },
                        "required": [
                          "total_commit_comments",
                          "total_gist_comments",
                          "total_issue_comments",
                          "total_pull_request_comments"
                        ],
                        "title": "Enterprise Comment Stats",
                        "type": "object"
                      },
                      "gists": {
                        "properties": {
                          "private_gists": { "type": "integer" },
                          "public_gists": { "type": "integer" },
                          "total_gists": { "type": "integer" }
                        },
                        "required": [
                          "total_gists",
                          "private_gists",
                          "public_gists"
                        ],
                        "title": "Enterprise Gist Stats",
                        "type": "object"
                      },
                      "hooks": {
                        "properties": {
                          "active_hooks": { "type": "integer" },
                          "inactive_hooks": { "type": "integer" },
                          "total_hooks": { "type": "integer" }
                        },
                        "required": [
                          "total_hooks",
                          "active_hooks",
                          "inactive_hooks"
                        ],
                        "title": "Hooks Enterprise Stats",
                        "type": "object"
                      },
                      "issues": {
                        "properties": {
                          "closed_issues": { "type": "integer" },
                          "open_issues": { "type": "integer" },
                          "total_issues": { "type": "integer" }
                        },
                        "required": [
                          "total_issues",
                          "open_issues",
                          "closed_issues"
                        ],
                        "title": "Enterprise Issue Stats",
                        "type": "object"
                      },
                      "milestones": {
                        "properties": {
                          "closed_milestones": { "type": "integer" },
                          "open_milestones": { "type": "integer" },
                          "total_milestones": { "type": "integer" }
                        },
                        "required": [
                          "total_milestones",
                          "open_milestones",
                          "closed_milestones"
                        ],
                        "title": "Enterprise Milestone Stats",
                        "type": "object"
                      },
                      "orgs": {
                        "properties": {
                          "disabled_orgs": { "type": "integer" },
                          "total_orgs": { "type": "integer" },
                          "total_team_members": { "type": "integer" },
                          "total_teams": { "type": "integer" }
                        },
                        "required": [
                          "total_orgs",
                          "disabled_orgs",
                          "total_teams",
                          "total_team_members"
                        ],
                        "title": "Enterprise Organization Stats",
                        "type": "object"
                      },
                      "pages": {
                        "properties": { "total_pages": { "type": "integer" } },
                        "required": ["total_pages"],
                        "title": "Enterprise Pages Stats",
                        "type": "object"
                      },
                      "pulls": {
                        "properties": {
                          "mergeable_pulls": { "type": "integer" },
                          "merged_pulls": { "type": "integer" },
                          "total_pulls": { "type": "integer" },
                          "unmergeable_pulls": { "type": "integer" }
                        },
                        "required": [
                          "total_pulls",
                          "merged_pulls",
                          "mergeable_pulls",
                          "unmergeable_pulls"
                        ],
                        "title": "Enterprise Pull Request Stats",
                        "type": "object"
                      },
                      "repos": {
                        "properties": {
                          "fork_repos": { "type": "integer" },
                          "org_repos": { "type": "integer" },
                          "root_repos": { "type": "integer" },
                          "total_pushes": { "type": "integer" },
                          "total_repos": { "type": "integer" },
                          "total_wikis": { "type": "integer" }
                        },
                        "required": [
                          "total_repos",
                          "root_repos",
                          "fork_repos",
                          "org_repos",
                          "total_pushes",
                          "total_wikis"
                        ],
                        "title": "Repository Enterprise Stats",
                        "type": "object"
                      },
                      "users": {
                        "properties": {
                          "admin_users": { "type": "integer" },
                          "suspended_users": { "type": "integer" },
                          "total_users": { "type": "integer" }
                        },
                        "required": [
                          "total_users",
                          "admin_users",
                          "suspended_users"
                        ],
                        "title": "Enterprise User Stats",
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get all statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/enterprise/stats/comments": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-comment-statistics"
          },
          "operationId": "enterprise-admin/get-comment-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "total_commit_comments": { "type": "integer" },
                      "total_gist_comments": { "type": "integer" },
                      "total_issue_comments": { "type": "integer" },
                      "total_pull_request_comments": { "type": "integer" }
                    },
                    "required": [
                      "total_commit_comments",
                      "total_gist_comments",
                      "total_issue_comments",
                      "total_pull_request_comments"
                    ],
                    "title": "Enterprise Comment Stats",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get comment statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/enterprise/stats/gists": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-gist-statistics"
          },
          "operationId": "enterprise-admin/get-all-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "private_gists": { "type": "integer" },
                      "public_gists": { "type": "integer" },
                      "total_gists": { "type": "integer" }
                    },
                    "required": [
                      "total_gists",
                      "private_gists",
                      "public_gists"
                    ],
                    "title": "Enterprise Gist Stats",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get gist statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/enterprise/stats/hooks": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-hooks-statistics"
          },
          "operationId": "enterprise-admin/get-hooks-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "active_hooks": { "type": "integer" },
                      "inactive_hooks": { "type": "integer" },
                      "total_hooks": { "type": "integer" }
                    },
                    "required": [
                      "total_hooks",
                      "active_hooks",
                      "inactive_hooks"
                    ],
                    "title": "Hooks Enterprise Stats",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get hooks statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/enterprise/stats/issues": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-issues-statistics"
          },
          "operationId": "enterprise-admin/get-issue-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "closed_issues": { "type": "integer" },
                      "open_issues": { "type": "integer" },
                      "total_issues": { "type": "integer" }
                    },
                    "required": [
                      "total_issues",
                      "open_issues",
                      "closed_issues"
                    ],
                    "title": "Enterprise Issue Stats",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get issue statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/enterprise/stats/milestones": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-milestone-statistics"
          },
          "operationId": "enterprise-admin/get-milestone-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "closed_milestones": { "type": "integer" },
                      "open_milestones": { "type": "integer" },
                      "total_milestones": { "type": "integer" }
                    },
                    "required": [
                      "total_milestones",
                      "open_milestones",
                      "closed_milestones"
                    ],
                    "title": "Enterprise Milestone Stats",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get milestone statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/enterprise/stats/orgs": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-organization-statistics"
          },
          "operationId": "enterprise-admin/get-org-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "disabled_orgs": { "type": "integer" },
                      "total_orgs": { "type": "integer" },
                      "total_team_members": { "type": "integer" },
                      "total_teams": { "type": "integer" }
                    },
                    "required": [
                      "total_orgs",
                      "disabled_orgs",
                      "total_teams",
                      "total_team_members"
                    ],
                    "title": "Enterprise Organization Stats",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get organization statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/enterprise/stats/pages": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pages-statistics"
          },
          "operationId": "enterprise-admin/get-pages-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": { "total_pages": { "type": "integer" } },
                    "required": ["total_pages"],
                    "title": "Enterprise Pages Stats",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get pages statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/enterprise/stats/pulls": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-pull-requests-statistics"
          },
          "operationId": "enterprise-admin/get-pull-request-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "mergeable_pulls": { "type": "integer" },
                      "merged_pulls": { "type": "integer" },
                      "total_pulls": { "type": "integer" },
                      "unmergeable_pulls": { "type": "integer" }
                    },
                    "required": [
                      "total_pulls",
                      "merged_pulls",
                      "mergeable_pulls",
                      "unmergeable_pulls"
                    ],
                    "title": "Enterprise Pull Request Stats",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get pull request statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/enterprise/stats/repos": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-repository-statistics"
          },
          "operationId": "enterprise-admin/get-repo-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "fork_repos": { "type": "integer" },
                      "org_repos": { "type": "integer" },
                      "root_repos": { "type": "integer" },
                      "total_pushes": { "type": "integer" },
                      "total_repos": { "type": "integer" },
                      "total_wikis": { "type": "integer" }
                    },
                    "required": [
                      "total_repos",
                      "root_repos",
                      "fork_repos",
                      "org_repos",
                      "total_pushes",
                      "total_wikis"
                    ],
                    "title": "Repository Enterprise Stats",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get repository statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/enterprise/stats/users": {
        "get": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#get-users-statistics"
          },
          "operationId": "enterprise-admin/get-user-stats",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "admin_users": { "type": "integer" },
                      "suspended_users": { "type": "integer" },
                      "total_users": { "type": "integer" }
                    },
                    "required": [
                      "total_users",
                      "admin_users",
                      "suspended_users"
                    ],
                    "title": "Enterprise User Stats",
                    "type": "object"
                  }
                }
              },
              "description": "Response"
            }
          },
          "summary": "Get users statistics",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "admin-stats"
          }
        }
      },
      "/repos/{owner}/{repo}/lfs": {
        "delete": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#disable-git-lfs-for-a-repository"
          },
          "operationId": "enterprise-admin/disable-lfs-for-repo",
          "parameters": [
            {
              "in": "path",
              "name": "owner",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            },
            {
              "in": "path",
              "name": "repo",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "responses": { "204": { "description": "Response" } },
          "summary": "Disable Git LFS for a repository",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "lfs"
          }
        },
        "put": {
          "deprecated": null,
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#enable-git-lfs-for-a-repository"
          },
          "operationId": "enterprise-admin/enable-lfs-for-repo",
          "parameters": [
            {
              "in": "path",
              "name": "owner",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            },
            {
              "in": "path",
              "name": "repo",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "responses": {
            "202": {
              "content": {
                "application/json": { "schema": { "type": "object" } }
              },
              "description": "Accepted"
            },
            "403": {
              "description": "We will return a 403 with one of the following messages:\n\n- Git LFS support not enabled because Git LFS is globally disabled.\n- Git LFS support not enabled because Git LFS is disabled for the root repository in the network.\n- Git LFS support not enabled because Git LFS is disabled for <owner>."
            }
          },
          "summary": "Enable Git LFS for a repository",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "lfs"
          }
        }
      },
      "/users/{username}/suspended": {
        "delete": {
          "deprecated": null,
          "description": "If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#unsuspend-a-user"
          },
          "operationId": "enterprise-admin/unsuspend-user",
          "parameters": [
            {
              "in": "path",
              "name": "username",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "properties": {
                    "reason": {
                      "description": "The reason the user is being unsuspended. This message will be logged in the [audit log](https://help.github.com/enterprise/admin/articles/audit-logging/). If you don't provide a `reason`, it will default to \"Unsuspended via API by _SITE\\_ADMINISTRATOR_\", where _SITE\\_ADMINISTRATOR_ is the person who performed the action.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "required": null
          },
          "responses": { "204": { "description": "Response" } },
          "summary": "Unsuspend a user",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "users"
          }
        },
        "put": {
          "deprecated": null,
          "description": "If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.\n\nYou can suspend any user account except your own.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs).\"",
          "externalDocs": {
            "description": "API method documentation",
            "url": "https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user"
          },
          "operationId": "enterprise-admin/suspend-user",
          "parameters": [
            {
              "in": "path",
              "name": "username",
              "required": true,
              "schema": { "type": "string" },
              "style": "simple"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "properties": {
                    "reason": {
                      "description": "The reason the user is being suspended. This message will be logged in the [audit log](https://help.github.com/enterprise/admin/articles/audit-logging/). If you don't provide a `reason`, it will default to \"Suspended via API by _SITE\\_ADMINISTRATOR_\", where _SITE\\_ADMINISTRATOR_ is the person who performed the action.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "required": null
          },
          "responses": { "204": { "description": "Response" } },
          "summary": "Suspend a user",
          "tags": ["enterprise-admin"],
          "x-github": {
            "category": "enterprise-admin",
            "enabledForGitHubApps": false,
            "githubCloudOnly": false,
            "subcategory": "users"
          }
        }
      }
    },
    "changed": {
      "/repos/{owner}/{repo}": {
        "patch": {
          "request_body": {
            "content_changed": {
              "changed": {
                "application/json": {
                  "schema_changed": {
                    "properties_changed": {
                      "removed": ["security_and_analysis"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/repos/{owner}/{repo}/releases": {
        "post": {
          "request_body": {
            "content_changed": {
              "changed": {
                "application/json": {
                  "schema_changed": {
                    "properties_changed": {
                      "removed": ["discussion_category_name"]
                    }
                  }
                }
              }
            }
          },
          "responses": { "removed": ["404"] }
        }
      },
      "/repos/{owner}/{repo}/releases/{release_id}": {
        "patch": {
          "request_body": {
            "content_changed": {
              "changed": {
                "application/json": {
                  "schema_changed": {
                    "properties_changed": {
                      "removed": ["discussion_category_name"]
                    }
                  }
                }
              }
            }
          },
          "responses": { "removed": ["404"] }
        }
      }
    },
    "removed": {
      "/applications/grants": ["get"],
      "/applications/grants/{grant_id}": ["get", "delete"],
      "/applications/{client_id}/token/scoped": ["post"],
      "/authorizations": ["get", "post"],
      "/authorizations/clients/{client_id}": ["put"],
      "/authorizations/clients/{client_id}/{fingerprint}": ["put"],
      "/authorizations/{authorization_id}": ["get", "delete", "patch"],
      "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations": [
        "get",
        "put"
      ],
      "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}": [
        "put",
        "delete"
      ],
      "/enterprises/{enterprise}/actions/runners/downloads": ["get"],
      "/enterprises/{enterprise}/actions/runners/registration-token": ["post"],
      "/enterprises/{enterprise}/actions/runners/remove-token": ["post"],
      "/enterprises/{enterprise}/audit-log": ["get"],
      "/enterprises/{enterprise}/settings/billing/actions": ["get"],
      "/enterprises/{enterprise}/settings/billing/packages": ["get"],
      "/enterprises/{enterprise}/settings/billing/shared-storage": ["get"],
      "/events": ["get"],
      "/marketplace_listing/accounts/{account_id}": ["get"],
      "/marketplace_listing/plans": ["get"],
      "/marketplace_listing/plans/{plan_id}/accounts": ["get"],
      "/marketplace_listing/stubbed/accounts/{account_id}": ["get"],
      "/marketplace_listing/stubbed/plans": ["get"],
      "/marketplace_listing/stubbed/plans/{plan_id}/accounts": ["get"],
      "/networks/{owner}/{repo}/events": ["get"],
      "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories": [
        "get",
        "put"
      ],
      "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}": [
        "put",
        "delete"
      ],
      "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners": [
        "get",
        "put"
      ],
      "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": [
        "put",
        "delete"
      ],
      "/orgs/{org}/actions/runners": ["get"],
      "/orgs/{org}/actions/runners/downloads": ["get"],
      "/orgs/{org}/actions/runners/registration-token": ["post"],
      "/orgs/{org}/actions/runners/remove-token": ["post"],
      "/orgs/{org}/audit-log": ["get"],
      "/orgs/{org}/blocks": ["get"],
      "/orgs/{org}/blocks/{username}": ["get", "put", "delete"],
      "/orgs/{org}/credential-authorizations": ["get"],
      "/orgs/{org}/credential-authorizations/{credential_id}": ["delete"],
      "/orgs/{org}/events": ["get"],
      "/orgs/{org}/failed_invitations": ["get"],
      "/orgs/{org}/hooks/{hook_id}/deliveries": ["get"],
      "/orgs/{org}/interaction-limits": ["get", "put", "delete"],
      "/orgs/{org}/invitations": ["get", "post"],
      "/orgs/{org}/invitations/{invitation_id}": ["delete"],
      "/orgs/{org}/invitations/{invitation_id}/teams": ["get"],
      "/orgs/{org}/migrations": ["get", "post"],
      "/orgs/{org}/migrations/{migration_id}": ["get"],
      "/orgs/{org}/migrations/{migration_id}/archive": ["get", "delete"],
      "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": [
        "delete"
      ],
      "/orgs/{org}/migrations/{migration_id}/repositories": ["get"],
      "/orgs/{org}/packages": ["get"],
      "/orgs/{org}/packages/{package_type}/{package_name}": ["get", "delete"],
      "/orgs/{org}/packages/{package_type}/{package_name}/restore": ["post"],
      "/orgs/{org}/packages/{package_type}/{package_name}/versions": ["get"],
      "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": [
        "get",
        "delete"
      ],
      "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": [
        "post"
      ],
      "/orgs/{org}/public_members": ["get"],
      "/orgs/{org}/public_members/{username}": ["get", "put", "delete"],
      "/orgs/{org}/secret-scanning/alerts": ["get"],
      "/orgs/{org}/settings/billing/actions": ["get"],
      "/orgs/{org}/settings/billing/packages": ["get"],
      "/orgs/{org}/settings/billing/shared-storage": ["get"],
      "/orgs/{org}/team-sync/groups": ["get"],
      "/orgs/{org}/teams/{team_slug}/invitations": ["get"],
      "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings": [
        "get",
        "patch"
      ],
      "/repos/{owner}/{repo}/actions/runners/downloads": ["get"],
      "/repos/{owner}/{repo}/actions/runners/registration-token": ["post"],
      "/repos/{owner}/{repo}/actions/runners/remove-token": ["post"],
      "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals": ["get"],
      "/repos/{owner}/{repo}/actions/runs/{run_id}/approve": ["post"],
      "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": [
        "get",
        "post"
      ],
      "/repos/{owner}/{repo}/automated-security-fixes": ["put", "delete"],
      "/repos/{owner}/{repo}/branches/{branch}/rename": ["post"],
      "/repos/{owner}/{repo}/community/code_of_conduct": ["get"],
      "/repos/{owner}/{repo}/community/profile": ["get"],
      "/repos/{owner}/{repo}/dispatches": ["post"],
      "/repos/{owner}/{repo}/environments": ["get"],
      "/repos/{owner}/{repo}/environments/{environment_name}": [
        "get",
        "put",
        "delete"
      ],
      "/repos/{owner}/{repo}/import": ["get", "put", "delete", "patch"],
      "/repos/{owner}/{repo}/import/authors": ["get"],
      "/repos/{owner}/{repo}/import/authors/{author_id}": ["patch"],
      "/repos/{owner}/{repo}/import/large_files": ["get"],
      "/repos/{owner}/{repo}/import/lfs": ["patch"],
      "/repos/{owner}/{repo}/interaction-limits": ["get", "put", "delete"],
      "/repos/{owner}/{repo}/pages/health": ["get"],
      "/repos/{owner}/{repo}/secret-scanning/alerts": ["get"],
      "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": [
        "get",
        "patch"
      ],
      "/repos/{owner}/{repo}/traffic/clones": ["get"],
      "/repos/{owner}/{repo}/traffic/popular/paths": ["get"],
      "/repos/{owner}/{repo}/traffic/popular/referrers": ["get"],
      "/repos/{owner}/{repo}/traffic/views": ["get"],
      "/repos/{owner}/{repo}/vulnerability-alerts": ["get", "put", "delete"],
      "/repositories": ["get"],
      "/repositories/{repository_id}/environments/{environment_name}/secrets": [
        "get"
      ],
      "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key": [
        "get"
      ],
      "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}": [
        "get",
        "put",
        "delete"
      ],
      "/scim/v2/enterprises/{enterprise}/Users": ["get", "post"],
      "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}": [
        "get",
        "put",
        "delete",
        "patch"
      ],
      "/scim/v2/organizations/{org}/Users": ["get", "post"],
      "/scim/v2/organizations/{org}/Users/{scim_user_id}": [
        "get",
        "put",
        "delete",
        "patch"
      ],
      "/teams/{team_id}/invitations": ["get"],
      "/teams/{team_id}/team-sync/group-mappings": ["get", "patch"],
      "/user/blocks": ["get"],
      "/user/blocks/{username}": ["get", "put", "delete"],
      "/user/email/visibility": ["patch"],
      "/user/emails": ["get", "post", "delete"],
      "/user/interaction-limits": ["get", "put", "delete"],
      "/user/marketplace_purchases": ["get"],
      "/user/marketplace_purchases/stubbed": ["get"],
      "/user/migrations": ["get", "post"],
      "/user/migrations/{migration_id}": ["get"],
      "/user/migrations/{migration_id}/archive": ["get", "delete"],
      "/user/migrations/{migration_id}/repos/{repo_name}/lock": ["delete"],
      "/user/migrations/{migration_id}/repositories": ["get"],
      "/user/packages": ["get"],
      "/user/packages/{package_type}/{package_name}": ["get", "delete"],
      "/user/packages/{package_type}/{package_name}/restore": ["post"],
      "/user/packages/{package_type}/{package_name}/versions": ["get"],
      "/user/packages/{package_type}/{package_name}/versions/{package_version_id}": [
        "get",
        "delete"
      ],
      "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": [
        "post"
      ],
      "/user/public_emails": ["get"],
      "/user/{username}/packages": ["get"],
      "/users/{username}/events/public": ["get"],
      "/users/{username}/packages/{package_type}/{package_name}": [
        "get",
        "delete"
      ],
      "/users/{username}/packages/{package_type}/{package_name}/restore": [
        "post"
      ],
      "/users/{username}/packages/{package_type}/{package_name}/versions": [
        "get"
      ],
      "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": [
        "get",
        "delete"
      ],
      "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": [
        "post"
      ],
      "/users/{username}/received_events": ["get"],
      "/users/{username}/received_events/public": ["get"],
      "/users/{username}/settings/billing/actions": ["get"],
      "/users/{username}/settings/billing/packages": ["get"],
      "/users/{username}/settings/billing/shared-storage": ["get"]
    }
  },
  "servers": {
    "added": [
      {
        "url": "https://{hostname}/api/v3",
        "variables": {
          "hostname": {
            "default": "HOSTNAME",
            "description": "Self-hosted GitHub AE hostname"
          }
        }
      }
    ],
    "removed": [{ "url": "https://api.github.com" }]
  }
}
